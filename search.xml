<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Activiti7的基本原理和使用</title>
    <url>/xmp-blog/2023/03/09/Activiti7%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Activiti7的基本原理和使用"><a href="#Activiti7的基本原理和使用" class="headerlink" title="Activiti7的基本原理和使用"></a><strong>Activiti7的基本原理和使用</strong></h1><h1 id="1-什么是工作流？"><a href="#1-什么是工作流？" class="headerlink" title="1 什么是工作流？#"></a>1 什么是工作流？<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%EF%BC%9F">#</a></h1><h2 id="1-1-工作流介绍"><a href="#1-1-工作流介绍" class="headerlink" title="1.1 工作流介绍#"></a>1.1 工作流介绍<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#11-%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%BB%8B%E7%BB%8D">#</a></h2><ul>
<li>工作流（Workflow），就是通过计算机对业务流程自动化执行管理。它主要解决的是“使在多个参与者之间按照某种预定义的规则自动进行传递文档、信息或任务的过程，从而实现某个预期的业务目标，或者促使此目标的实现”。<span id="more"></span></li>
</ul>
<h2 id="1-2-工作流系统"><a href="#1-2-工作流系统" class="headerlink" title="1.2 工作流系统#"></a>1.2 工作流系统<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#12-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%B3%BB%E7%BB%9F">#</a></h2><h3 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1 概述#"></a>1.2.1 概述<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#121-%E6%A6%82%E8%BF%B0">#</a></h3><ul>
<li>一个软件系统中具有工作流的功能，我们把它称为工作流系统。</li>
<li>一个系统中工作流的功能是什么？就是对系统的业务流程进行自动化管理，所以工作流是建立在业务流程的基础上，所以一个软件的系统核心根本上还是系统的业务流程，工作流只是协助进行业务流程管理。</li>
<li>即使没有工作流业务系统也可以开发运行，只不过有了工作流可以更好的管理业务流程，提高系统的可扩展性。</li>
</ul>
<h3 id="1-2-2-使用行业"><a href="#1-2-2-使用行业" class="headerlink" title="1.2.2 使用行业#"></a>1.2.2 使用行业<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#122-%E4%BD%BF%E7%94%A8%E8%A1%8C%E4%B8%9A">#</a></h3><ul>
<li>消费品行业，制造业，电信服务业，银证险等金融服务业，物流服务业，物业服务业，物业管理，大中型进出口贸易公司，政府事业机构，研究院所及教育服务业等，特别是大的跨国企业和集团公司。</li>
</ul>
<h3 id="1-2-3-具体应用"><a href="#1-2-3-具体应用" class="headerlink" title="1.2.3 具体应用#"></a>1.2.3 具体应用<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#123-%E5%85%B7%E4%BD%93%E5%BA%94%E7%94%A8">#</a></h3><ul>
<li>关键业务流程：订单、报价处理、合同审核、客户电话处理、供应链管理等。</li>
<li>行政管理类：出差申请、加班申请、请假申请、用车申请、各种办公用品申请、购买申请、日报周报等凡是原来手工流转处理的行政表单。</li>
<li>人事管理类：员工培训安排、绩效考评、职位变动处理、员工档案信息管理等。</li>
<li>财务相关类：付款请求、应收款处理、日常报销处、出差报销、预算和计划申请等。</li>
<li>客户服务类：客户信息管理、客户投诉、请求处理、售后财务管理等。</li>
<li>特殊服务类：ISO系统对应流程、质量管理对应流程、产品数据信息管理、贸易公司报关处理、物流公司货物跟踪处理等各种通过表单逐步手动流转完成的任务均可应用工作流软件自动规范实施。</li>
</ul>
<h2 id="1-3-工作流实现方式"><a href="#1-3-工作流实现方式" class="headerlink" title="1.3 工作流实现方式#"></a>1.3 工作流实现方式<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#13-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F">#</a></h2><ul>
<li>在没有专门的工作流引擎之前，我们之前为了实现流程控制，通常的做法就是采用状态字段的值来跟踪流程的变化情况。这样不同角色的用户，通过状态字段的取值来决定记录是否显示。</li>
<li>针对有权限可以查看的记录，当前用户根据自己的角色来决定审批是否是合格的操作。如果合格将状态字段设置一个值，来代表合格；当然如果不合格也需要设置一个值来代表不合格的情况。</li>
<li>这是一种最为原始的方式。通过状态字段虽然做到了流程控制，但是当我们的流程发生变更的时候，这种方式所编写的代码也要进行调整。</li>
<li>那么有没有专业的方式来实现工作流的管理呢？并且可以做到业务流程变化之后，我们的程序可以不用改变，如果可以实现这样的效果，那么我们的业务系统的适应能力就得到了极大提升。答案就是采用工作流引擎。</li>
</ul>
<h2 id="1-4-工作流实现原理分析"><a href="#1-4-工作流实现原理分析" class="headerlink" title="1.4 工作流实现原理分析#"></a>1.4 工作流实现原理分析<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#14-%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90">#</a></h2><ul>
<li>如何做到我们在业务流程发生变更后，我们的业务系统代码可以不发生改变？原理如下：</li>
</ul>
<p><a href="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095106879-1620779290.png"><img src="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095106879-1620779290.png" alt="工作流实现原理图"></a></p>
<ul>
<li>将业务流程的每个节点读取到数据库中，这样每个节点（包括开始节点和结束节点）就是数据库中的一条记录，当发生业务流程的时候，不断的从业务流程图中读取下一个节点，其实就相当于操作节点对应的数据库记录，这样就实现流程管理和状态字段无关。</li>
</ul>
<h1 id="2-什么是Activiti7？"><a href="#2-什么是Activiti7？" class="headerlink" title="2 什么是Activiti7？#"></a>2 什么是Activiti7？<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#2-%E4%BB%80%E4%B9%88%E6%98%AFactiviti7%EF%BC%9F">#</a></h1><h2 id="2-1-Activiti7介绍"><a href="#2-1-Activiti7介绍" class="headerlink" title="2.1 Activiti7介绍#"></a>2.1 Activiti7介绍<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#21-activiti7%E4%BB%8B%E7%BB%8D">#</a></h2><h3 id="2-1-1-概述"><a href="#2-1-1-概述" class="headerlink" title="2.1.1 概述#"></a>2.1.1 概述<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#211-%E6%A6%82%E8%BF%B0">#</a></h3><ul>
<li>Alfresco 软件在 2010 年 5 月 17 日宣布 Activiti 业务流程管理（BPM）开源项目的正式启动， 其<br>首席架构师由业务流程管理 BPM 的专家 Tom Baeyens 担任， Tom Baeyens 就是原来 jbpm 的架构师，<br>而 jbpm 是一个非常有名的工作流引擎，当然 activiti 也是一个工作流引擎。</li>
<li>Activiti 是一个工作流引擎， activiti 可以将业务系统中复杂的业务流程抽取出来，使用专门的<br>建模语言（BPMN2.0）进行定义，业务系统按照预先定义的流程进行执行，实现了业务系统的业务<br>流程由 activiti 进行管理，减少业务系统由于流程变更进行系统升级改造的工作量，从而提高系统的<br>健壮性，同时也减少了系统开发维护成本。</li>
<li><a href="https://www.activiti.org/">官方网站</a></li>
</ul>
<h3 id="2-1-2-Activiti7内部核心机制"><a href="#2-1-2-Activiti7内部核心机制" class="headerlink" title="2.1.2 Activiti7内部核心机制#"></a>2.1.2 Activiti7内部核心机制<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#212-activiti7%E5%86%85%E9%83%A8%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6">#</a></h3><ul>
<li>1️⃣业务流程图要规范化，需要遵守一套标准。</li>
<li>2️⃣业务流程图本质上就是一个XML文件，而XML可以存放所要的数据。</li>
<li>3️⃣读取业务流程图的过程就是解析XML文件的过程。</li>
<li>4️⃣读取一个业务流程图的结点就相当于解析一个XML的结点，进一步将数据插入到MySQL表中，形成一条记录。</li>
<li>5️⃣将一个业务流程图的所有节点都读取并存入到MySQL表中。</li>
<li>6️⃣后面只要读取MySQL表中的记录就相当于读取业务流程图的一个节点。</li>
<li>7️⃣业务流程的推进，后面就转换为读取表中的数据，并且处理数据，结束的时候这一行数据就可以删除了。</li>
</ul>
<h3 id="2-1-3-BPM"><a href="#2-1-3-BPM" class="headerlink" title="2.1.3 BPM#"></a>2.1.3 BPM<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#213-bpm">#</a></h3><ul>
<li><p>BPM（Business Process Management），即业务流程管理，是一种以规范化的构造端到端的卓越业务流程为中心，以持续的提高组织业务绩效为目的的系统化方法，常见商业管理教育如EMBA、MBA等均将BPM包含在内。</p>
</li>
<li><p>企业流程管理主要是对企业内部改革，改变企业只能管理机构重叠、中间层次多、流程不闭环等，做到机构不重叠、业务不复杂，达到缩短流程周期、节约运作资本、提高企业效益的作用。</p>
</li>
<li><p>比较下面的两个人事加薪流程，那个效率更高？</p>
<ul>
<li>流程一：</li>
</ul>
<p>人事加薪流程制定加薪计划部门经理审批总经理审批财务经理审批</p>
<ul>
<li>流程二：</li>
</ul>
<p>1万元以内1万元以上人事加薪流程制定加薪计划部门经理审批1万元财务经理审批总经理审批</p>
<ul>
<li>上面的两个流程的区别在于第二个流程在执行时，如果本次加薪金额在一万元内不再由总经理审批将比第一个流程缩短流程周期，从而提高效率。</li>
</ul>
</li>
<li><p>比较下面的两个看病的流程，那个效率更高？</p>
<ul>
<li>流程一：</li>
</ul>
<p>病人看病流程病人去医院看病挂号看病交费取药</p>
<ul>
<li>流程二：</li>
</ul>
<p>病人看病流程病人去医院看病挂号看病交费取药</p>
<ul>
<li>上面的两个流程的区别在于第二个流程将交费和取药放在一起进行，这样导致的结果是此窗口的工作人员必须具有财务、药学专业知识，岗位强度加大，人员培训难度加大从而导致人员不易扩展，工作效率低下。</li>
</ul>
</li>
</ul>
<h3 id="2-1-4-BPM软件"><a href="#2-1-4-BPM软件" class="headerlink" title="2.1.4 BPM软件#"></a>2.1.4 BPM软件<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#214-bpm%E8%BD%AF%E4%BB%B6">#</a></h3><ul>
<li>BPM软件就是根据企业中业务环境的变化，推进人和人之间、人和系统之间以及系统和系统之间的整合及调整的经营方法和解决方案的IT工具。通常以Internet方式实现信息传、数据同步、业务监控和企业业务流程的持续升级优化，从而实现跨应用、跨部门、夸合作伙伴和客户的企业运作。通过BPM软件对企业内部及外部的业务流程的整个生命周期进行建模、自动化、管理监控和优化，使企业成本降低，利润得以大幅度提升。</li>
<li>BPM软件在企业中应用领域广泛，凡是有业务流程的地方都可以用BPM软件进行管理，比如企业人事办公管理、采购流程管理、公文审批流程管理、财务管理等。</li>
</ul>
<h3 id="2-1-5-BPMN"><a href="#2-1-5-BPMN" class="headerlink" title="2.1.5 BPMN#"></a>2.1.5 BPMN<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#215-bpmn">#</a></h3><ul>
<li><p>BPMN（Business Process Model And Notation），业务流程模型和符号，是由BPMI（Business Process Management Initiative）开发的一套的业务流程建模符号，使用BPMN提供的符号可以创建业务流程。2004年5月发布了BPMN1.0规范。BPMI于2005年9月并入OMG（The Object Management Group，对象管理组织）组织。OMG于2011年1月发布BPMN2.0的最终版本。</p>
</li>
<li><p>BPMN是目前被各BPM厂商广泛接受的BPM标准。Activit就是使用BPMN2.0进行流程建模、流程执行管理，它包括很多的建模符号。</p>
<ul>
<li><p>比如：</p>
<ul>
<li>Event用一个圆圈表示，它是流程中运行过程中发生的事情。</li>
</ul>
<p><a href="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095107110-1141687013.png"><img src="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095107110-1141687013.png" alt="Event"></a></p>
<ul>
<li>活动用圆形矩形表示，一个流程由一个活动或多个活动组成。</li>
</ul>
<p><a href="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095107260-1091167916.png"><img src="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095107260-1091167916.png" alt="BPMN图标"></a></p>
</li>
</ul>
</li>
<li><p>一个BPMN的例子：</p>
<ul>
<li>首先当事人发起一个请假单；</li>
<li>其次他所在部门的经理对请假单进行审核；</li>
<li>然后人事经理进行复核并进行备案；</li>
<li>最后请假流程结束。</li>
</ul>
</li>
</ul>
<p><a href="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095107421-849218252.png"><img src="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095107421-849218252.png" alt="BPMN例子"></a></p>
<ul>
<li>BPMN其实是用XML表示业务流程的，上面的.bpmn文件使用文本编辑器打开：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bpmn2:definitions</span> <span class="attr">xmlns:bpmn2</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:dc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:di</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sample-diagram&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://bpmn.io/schema/bpmn&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmn2:process</span> <span class="attr">id</span>=<span class="string">&quot;process1596086637078&quot;</span> <span class="attr">name</span>=<span class="string">&quot;流程1596086637078&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmn2:startEvent</span> <span class="attr">id</span>=<span class="string">&quot;StartEvent_01ydzqe&quot;</span> <span class="attr">name</span>=<span class="string">&quot;开始&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmn2:outgoing</span>&gt;</span>SequenceFlow_13g4uaz<span class="tag">&lt;/<span class="name">bpmn2:outgoing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmn2:startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmn2:userTask</span> <span class="attr">id</span>=<span class="string">&quot;UserTask_1lf9x0v&quot;</span> <span class="attr">name</span>=<span class="string">&quot;填写请假单&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmn2:incoming</span>&gt;</span>SequenceFlow_13g4uaz<span class="tag">&lt;/<span class="name">bpmn2:incoming</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmn2:outgoing</span>&gt;</span>SequenceFlow_0yljdna<span class="tag">&lt;/<span class="name">bpmn2:outgoing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmn2:userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmn2:sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;SequenceFlow_13g4uaz&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;StartEvent_01ydzqe&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;UserTask_1lf9x0v&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmn2:userTask</span> <span class="attr">id</span>=<span class="string">&quot;UserTask_0xa95fp&quot;</span> <span class="attr">name</span>=<span class="string">&quot;部门经理审批&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmn2:incoming</span>&gt;</span>SequenceFlow_0yljdna<span class="tag">&lt;/<span class="name">bpmn2:incoming</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmn2:outgoing</span>&gt;</span>SequenceFlow_0wc7wvy<span class="tag">&lt;/<span class="name">bpmn2:outgoing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmn2:userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmn2:sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;SequenceFlow_0yljdna&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;UserTask_1lf9x0v&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;UserTask_0xa95fp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmn2:userTask</span> <span class="attr">id</span>=<span class="string">&quot;UserTask_1p57lka&quot;</span> <span class="attr">name</span>=<span class="string">&quot;人事复核&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmn2:incoming</span>&gt;</span>SequenceFlow_0wc7wvy<span class="tag">&lt;/<span class="name">bpmn2:incoming</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmn2:outgoing</span>&gt;</span>SequenceFlow_0o4nsg1<span class="tag">&lt;/<span class="name">bpmn2:outgoing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmn2:userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmn2:sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;SequenceFlow_0wc7wvy&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;UserTask_0xa95fp&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;UserTask_1p57lka&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmn2:endEvent</span> <span class="attr">id</span>=<span class="string">&quot;EndEvent_05yb7io&quot;</span> <span class="attr">name</span>=<span class="string">&quot;结束&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmn2:incoming</span>&gt;</span>SequenceFlow_0o4nsg1<span class="tag">&lt;/<span class="name">bpmn2:incoming</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmn2:endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmn2:sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;SequenceFlow_0o4nsg1&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;UserTask_1p57lka&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;EndEvent_05yb7io&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmn2:process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_1&quot;</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;process1596086637078&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">id</span>=<span class="string">&quot;StartEvent_01ydzqe_di&quot;</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;StartEvent_01ydzqe&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">x</span>=<span class="string">&quot;382&quot;</span> <span class="attr">y</span>=<span class="string">&quot;82&quot;</span> <span class="attr">width</span>=<span class="string">&quot;36&quot;</span> <span class="attr">height</span>=<span class="string">&quot;36&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">x</span>=<span class="string">&quot;389&quot;</span> <span class="attr">y</span>=<span class="string">&quot;58&quot;</span> <span class="attr">width</span>=<span class="string">&quot;22&quot;</span> <span class="attr">height</span>=<span class="string">&quot;14&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">id</span>=<span class="string">&quot;UserTask_1lf9x0v_di&quot;</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;UserTask_1lf9x0v&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">x</span>=<span class="string">&quot;490&quot;</span> <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">id</span>=<span class="string">&quot;SequenceFlow_13g4uaz_di&quot;</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;SequenceFlow_13g4uaz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;418&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;490&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">id</span>=<span class="string">&quot;UserTask_0xa95fp_di&quot;</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;UserTask_0xa95fp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">x</span>=<span class="string">&quot;700&quot;</span> <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">id</span>=<span class="string">&quot;SequenceFlow_0yljdna_di&quot;</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;SequenceFlow_0yljdna&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;590&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;700&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">id</span>=<span class="string">&quot;UserTask_1p57lka_di&quot;</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;UserTask_1p57lka&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">x</span>=<span class="string">&quot;910&quot;</span> <span class="attr">y</span>=<span class="string">&quot;60&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;80&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">id</span>=<span class="string">&quot;SequenceFlow_0wc7wvy_di&quot;</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;SequenceFlow_0wc7wvy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;800&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;910&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">id</span>=<span class="string">&quot;EndEvent_05yb7io_di&quot;</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;EndEvent_05yb7io&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">x</span>=<span class="string">&quot;1152&quot;</span> <span class="attr">y</span>=<span class="string">&quot;82&quot;</span> <span class="attr">width</span>=<span class="string">&quot;36&quot;</span> <span class="attr">height</span>=<span class="string">&quot;36&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">x</span>=<span class="string">&quot;1159&quot;</span> <span class="attr">y</span>=<span class="string">&quot;125&quot;</span> <span class="attr">width</span>=<span class="string">&quot;22&quot;</span> <span class="attr">height</span>=<span class="string">&quot;14&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">id</span>=<span class="string">&quot;SequenceFlow_0o4nsg1_di&quot;</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;SequenceFlow_0o4nsg1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;1010&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;1152&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bpmn2:definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-Activiti如何使用"><a href="#2-2-Activiti如何使用" class="headerlink" title="2.2 Activiti如何使用#"></a>2.2 Activiti如何使用<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#22-activiti%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">#</a></h2><h3 id="2-2-1-整合Activiti"><a href="#2-2-1-整合Activiti" class="headerlink" title="2.2.1 整合Activiti#"></a>2.2.1 整合Activiti<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#221-%E6%95%B4%E5%90%88activiti">#</a></h3><ul>
<li>Activiti是一个工作流引擎，业务系统使用Activiti来对系统的业务流程进行自动化管理，为了方便业务系统访问（操作）Activiti的接口或功能，通常将Activiti和业务系统的环境集成在一起。</li>
</ul>
<h3 id="2-2-2-实现业务流程建模，使用BPMN实现业务流程图"><a href="#2-2-2-实现业务流程建模，使用BPMN实现业务流程图" class="headerlink" title="2.2.2 实现业务流程建模，使用BPMN实现业务流程图#"></a>2.2.2 实现业务流程建模，使用BPMN实现业务流程图<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#222-%E5%AE%9E%E7%8E%B0%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%BB%BA%E6%A8%A1%EF%BC%8C%E4%BD%BF%E7%94%A8bpmn%E5%AE%9E%E7%8E%B0%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%9B%BE">#</a></h3><ul>
<li>使用Activiti流程建模工具(Activity-designer)定义业务流程(.bpmn文件)。</li>
<li>.bpmn文件就是业务流程定义文件，通过xml定义业务流程。</li>
<li>如果使用其他公司开发的工作引擎一般都提供了可视化的建模工具（Process Designer）用于生成流程定义文件，建模工具操作直观，一般都支持图形化拖拽方式、多窗口的用户界面、丰富的过程图形元素、过程元素拷贝、粘贴、删除等功能。</li>
</ul>
<h3 id="2-2-3-部署业务流程到Activiti"><a href="#2-2-3-部署业务流程到Activiti" class="headerlink" title="2.2.3 部署业务流程到Activiti#"></a>2.2.3 部署业务流程到Activiti<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#223-%E9%83%A8%E7%BD%B2%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%88%B0activiti">#</a></h3><ul>
<li>向Activiti部署业务流程定义(.bpmn文件)。</li>
<li>使用Activiti提供的API向Activiti中部署.bpmn文件（一般情况下还需要一起部署业务流程的图片.png）。</li>
</ul>
<h3 id="2-2-4-启动流程实例-ProcessInstance"><a href="#2-2-4-启动流程实例-ProcessInstance" class="headerlink" title="2.2.4 启动流程实例(ProcessInstance)#"></a>2.2.4 启动流程实例(ProcessInstance)<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#224-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%AE%9E%E4%BE%8Bprocessinstance">#</a></h3><ul>
<li>启动一个流程实例表示开始一次业务流程的运行，比如员工请假流程部署完成，如果张三要请假就可以启动一个流程实例，如果李四要请假也需要启动一个流程实例，两个流程的执行互不影响，就好比定义一个Java类，实例化两个Java对象一样，部署的流程就好比Java类，启动一个流程实例就好比new一个Java对象。</li>
</ul>
<h3 id="2-2-5-查询待办任务-Task"><a href="#2-2-5-查询待办任务-Task" class="headerlink" title="2.2.5 查询待办任务(Task)#"></a>2.2.5 查询待办任务(Task)<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#225-%E6%9F%A5%E8%AF%A2%E5%BE%85%E5%8A%9E%E4%BB%BB%E5%8A%A1task">#</a></h3><ul>
<li>因为现在系统的业务流程已经交给Activiti管理，通过Activiti就可以查询当前流程执行到哪里了，当前用户需要办理什么任务了，这些Activiti帮我们管理了，而不像传统方式中需要我们在SQL语句中的WHERE条件中指定当前查询的状态值是多少。。</li>
</ul>
<h3 id="2-2-6-处理待办任务"><a href="#2-2-6-处理待办任务" class="headerlink" title="2.2.6 处理待办任务#"></a>2.2.6 处理待办任务<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#226-%E5%A4%84%E7%90%86%E5%BE%85%E5%8A%9E%E4%BB%BB%E5%8A%A1">#</a></h3><ul>
<li>用户查询待办任务后，就可以办理某个任务，如果这任务办理完成还需要其他用户办理，比如采购单创建后由部门经理审核，这个过程也是由Activiti帮我们完成了，不需要我们在代码中硬编码指定下一个任务办理人了。</li>
</ul>
<h3 id="2-2-7-结束流程"><a href="#2-2-7-结束流程" class="headerlink" title="2.2.7 结束流程#"></a>2.2.7 结束流程<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#227-%E7%BB%93%E6%9D%9F%E6%B5%81%E7%A8%8B">#</a></h3><ul>
<li>当任务办理完成没有下一个任务&#x2F;结点了，这个流程实例就完成了。</li>
</ul>
<h1 id="3-环境准备"><a href="#3-环境准备" class="headerlink" title="3 环境准备#"></a>3 环境准备<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#3-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">#</a></h1><h2 id="3-1-开发环境"><a href="#3-1-开发环境" class="headerlink" title="3.1 开发环境#"></a>3.1 开发环境<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#31-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">#</a></h2><h3 id="3-1-1-Java环境"><a href="#3-1-1-Java环境" class="headerlink" title="3.1.1 Java环境#"></a>3.1.1 Java环境<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#311-java%E7%8E%AF%E5%A2%83">#</a></h3><ul>
<li>JDK14。</li>
</ul>
<h3 id="3-1-2-数据库"><a href="#3-1-2-数据库" class="headerlink" title="3.1.2 数据库#"></a>3.1.2 数据库<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#312-%E6%95%B0%E6%8D%AE%E5%BA%93">#</a></h3><ul>
<li>MySQL5.7。</li>
</ul>
<h3 id="3-1-3-Web容器"><a href="#3-1-3-Web容器" class="headerlink" title="3.1.3 Web容器#"></a>3.1.3 Web容器<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#313-web%E5%AE%B9%E5%99%A8">#</a></h3><ul>
<li>Tomcat8.5。</li>
</ul>
<h3 id="3-1-4-开发工具"><a href="#3-1-4-开发工具" class="headerlink" title="3.1.4 开发工具#"></a>3.1.4 开发工具<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#314-%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7">#</a></h3><ul>
<li>MySQL客户端连接工具：Navicat for MySQL。</li>
<li>文件编辑器NotePad++或其他。</li>
<li>Java开发工具：IDEA(Eclipse)。</li>
</ul>
<h2 id="3-2-Activiti环境"><a href="#3-2-Activiti环境" class="headerlink" title="3.2 Activiti环境#"></a>3.2 Activiti环境<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#32-activiti%E7%8E%AF%E5%A2%83">#</a></h2><ul>
<li>Activiti7默认支持Spring5。</li>
</ul>
<h3 id="3-2-1-IDEA中安装ActivitiDesigner（Activiti流程设计器）"><a href="#3-2-1-IDEA中安装ActivitiDesigner（Activiti流程设计器）" class="headerlink" title="3.2.1 IDEA中安装ActivitiDesigner（Activiti流程设计器）#"></a>3.2.1 IDEA中安装ActivitiDesigner（Activiti流程设计器）<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#321-idea%E4%B8%AD%E5%AE%89%E8%A3%85activitidesigner%EF%BC%88activiti%E6%B5%81%E7%A8%8B%E8%AE%BE%E8%AE%A1%E5%99%A8%EF%BC%89">#</a></h3><p><a href="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095107591-981833034.png"><img src="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095107591-981833034.png" alt="IDEA安装Activiti流程设计器"></a></p>
<h3 id="3-2-2-在IDEA中解决actiBPM中文乱码问题"><a href="#3-2-2-在IDEA中解决actiBPM中文乱码问题" class="headerlink" title="3.2.2 在IDEA中解决actiBPM中文乱码问题#"></a>3.2.2 在IDEA中解决actiBPM中文乱码问题<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#322-%E5%9C%A8idea%E4%B8%AD%E8%A7%A3%E5%86%B3actibpm%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98">#</a></h3><ul>
<li>在IDEA中将File–&gt;Settings–&gt;Editor–&gt;File Encodings修改为UTF-8</li>
</ul>
<p><a href="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095107850-139508263.png"><img src="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095107850-139508263.png" alt="设置File Encodings的编码"></a></p>
<ul>
<li>在IDEA的Help–&gt;Edit Custom VM Options中末尾添加<code>-Dfile.encoding=UTF-8</code></li>
</ul>
<p><a href="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095108013-1796322103.jpg"><img src="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095108013-1796322103.jpg" alt="设置虚拟机的参数"></a></p>
<p><a href="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095108195-2049264938.png"><img src="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095108195-2049264938.png" alt="设置虚拟机的编码参数"></a></p>
<ul>
<li>在IDEA的安装目录的bin目录下将idea.exe.vmoptions和idea64.exe.vmoptions两个文件末尾添加<code>-Dfile.encoding=UTF-8</code></li>
</ul>
<p><a href="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095108402-1472621426.png"><img src="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095108402-1472621426.png" alt="安装目录添加编码参数"></a></p>
<ul>
<li>重启IDEA即可。</li>
</ul>
<h3 id="3-2-3-Activiti支持的数据库"><a href="#3-2-3-Activiti支持的数据库" class="headerlink" title="3.2.3 Activiti支持的数据库#"></a>3.2.3 Activiti支持的数据库<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#323-activiti%E6%94%AF%E6%8C%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93">#</a></h3><ul>
<li>Activiti的运行需要数据库的支撑，支持如下版本：<ul>
<li>h2。</li>
<li>MySQL。</li>
<li>Oracle。</li>
<li>Db2。</li>
<li>postgres。</li>
<li>mssql。</li>
</ul>
</li>
</ul>
<h3 id="3-2-4-创建activiti数据库"><a href="#3-2-4-创建activiti数据库" class="headerlink" title="3.2.4 创建activiti数据库#"></a>3.2.4 创建activiti数据库<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#324-%E5%88%9B%E5%BB%BAactiviti%E6%95%B0%E6%8D%AE%E5%BA%93">#</a></h3><ul>
<li>使用的DBMS是MySQL。</li>
<li>sql脚本：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE activiti <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-5-创建表"><a href="#3-2-5-创建表" class="headerlink" title="3.2.5 创建表#"></a>3.2.5 创建表<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#325-%E5%88%9B%E5%BB%BA%E8%A1%A8">#</a></h3><ul>
<li>通过Java程序创建表。</li>
</ul>
<h4 id="3-2-5-1-创建Java工程"><a href="#3-2-5-1-创建Java工程" class="headerlink" title="3.2.5.1 创建Java工程#"></a>3.2.5.1 创建Java工程<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#3251-%E5%88%9B%E5%BB%BAjava%E5%B7%A5%E7%A8%8B">#</a></h4><ul>
<li>通过IDEA创建Maven的Java工程。</li>
</ul>
<h4 id="3-2-5-2-加入相关jar包的Maven坐标"><a href="#3-2-5-2-加入相关jar包的Maven坐标" class="headerlink" title="3.2.5.2 加入相关jar包的Maven坐标#"></a>3.2.5.2 加入相关jar包的Maven坐标<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#3252-%E5%8A%A0%E5%85%A5%E7%9B%B8%E5%85%B3jar%E5%8C%85%E7%9A%84maven%E5%9D%90%E6%A0%87">#</a></h4><ul>
<li>在Java工程中加入ProcessEngine所需要的jar包，包括：<ul>
<li>activiti-engine-7.0.0.GA.jar</li>
<li>activiti依赖的jar包：mybatis、slf4j、log4j等</li>
<li>activiti依赖的spring的jar包</li>
<li>数据库驱动</li>
<li>第三方数据库连接池dbcp</li>
<li>单元测试junit</li>
</ul>
</li>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti.version</span>&gt;</span>7.0.0.GA<span class="tag">&lt;/<span class="name">activiti.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-json-converter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-layout<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;activiti.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-cloud-services-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7-201802-EA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti.cloud.dependencies<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.0.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-5-3-日志文件log4j2-xml"><a href="#3-2-5-3-日志文件log4j2-xml" class="headerlink" title="3.2.5.3 日志文件log4j2.xml#"></a>3.2.5.3 日志文件log4j2.xml<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#3253-%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6log4j2xml">#</a></h4><ul>
<li>log4j2.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-5-4-Activit核心配置文件activiti-cfg-xml"><a href="#3-2-5-4-Activit核心配置文件activiti-cfg-xml" class="headerlink" title="3.2.5.4 Activit核心配置文件activiti-cfg.xml#"></a>3.2.5.4 Activit核心配置文件activiti-cfg.xml<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#3254-activit%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6activiti-cfgxml">#</a></h4><ul>
<li>activiti-cfg.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://192.168.134.100:3306/activiti?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>autoReconnect=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Activiti单独运行的ProcessEngine配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            activiti数据库表处理策略 </span></span><br><span class="line"><span class="comment">                false(默认值)：检查数据库的版本和依赖库的版本，如果不匹配就抛出异常</span></span><br><span class="line"><span class="comment">                true：构建流程引擎时，执行检查，如果需要就执行更新。如果表不存在，就创建。</span></span><br><span class="line"><span class="comment">                create-drop：构建流程引擎时创建数据库报表，关闭流程引擎时就删除这些表。</span></span><br><span class="line"><span class="comment">                drop-create：先删除表再创建表。</span></span><br><span class="line"><span class="comment">                create：构建流程引擎时创建数据库表，关闭流程引擎时不删除这些表</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-5-5-测试"><a href="#3-2-5-5-测试" class="headerlink" title="3.2.5.5 测试#"></a>3.2.5.5 测试<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#3255-%E6%B5%8B%E8%AF%95">#</a></h4><ul>
<li>创建ProcessEngineConfiguration，通过ProcessEngineConfiguration创建ProcessEngine，在创建ProcessEngine的同时会自动创建数据库。</li>
<li>示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sunxiaping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngine;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngineConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;mailto:1900919313@qq.com&quot;&gt;weiwei.xu&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 2020-07-31 6:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivitiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建ProcessEngineConfiguration对象</span></span><br><span class="line">        <span class="type">ProcessEngineConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(<span class="string">&quot;activiti-cfg.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//创建ProcessEngine对象</span></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">        System.out.println(<span class="string">&quot;processEngine = &quot;</span> + processEngine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>1️⃣：运行以上程序即可完成Activiti数据库表的创建，通过改变activiti-cfg.xml中的databaseSchemaUpdate参数的值执行不同的数据表处理策略。</p>
<p>2️⃣：上面的方法createProcessEngineConfigurationFromResource在执行activiti-cfg.xml中找固定的名称processEngineConfiguration，也可以使用重载方法调用，这时就可以不用限定processEngineConfiguration名称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngineConfiguration <span class="title function_">createProcessEngineConfigurationFromResource</span><span class="params">(String resource, String beanName)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> BeansConfigurationHelper.parseProcessEngineConfigurationFromResource(resource, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>此时我们查看数据库，发现25张表，结果如下所示：</li>
</ul>
<p><a href="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095108610-1140194181.jpg"><img src="https://img2020.cnblogs.com/blog/1128804/202009/1128804-20200913095108610-1140194181.jpg" alt="代码生成Activiti的数据库表"></a></p>
<h3 id="3-2-6-数据库表的命名规则"><a href="#3-2-6-数据库表的命名规则" class="headerlink" title="3.2.6 数据库表的命名规则#"></a>3.2.6 数据库表的命名规则<a href="https://www.cnblogs.com/xuweiweiwoaini/p/13660394.html#326-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99">#</a></h3><ul>
<li>Activiti的表都是以<code>ACT_</code>开头。第二部分是表示表的用途的两个字母标识。用途也和服务的API对应。</li>
<li><code>ACT_RE_*</code>：’RE’表示Repository。这个前缀的表包含了流程定义和流程静态资源（图片、规则等等）。</li>
<li><code>ACT_RU_*</code>：’RU’表示Runtime。这些运行时的表，包含流程实例，任务、变量，异步任务等运行中的数据。Activiti只在流程实例执行过程中保存这些数据，在流程结束时就会删除这些记录。这些运行时表可以一直很小并且速度很快。</li>
<li><code>ACT_HI_*</code>：’HI’表示History。这些表包含历史数据，比如历史流程实例，变量，任务等等。</li>
<li><code>ACT_GE_*</code>：’GE’表示General。通用数据，用于不同场景下。</li>
</ul>
]]></content>
      <categories>
        <category>工作流</category>
      </categories>
      <tags>
        <tag>工作流,java</tag>
      </tags>
  </entry>
  <entry>
    <title>7大设计原则和23种设计模式</title>
    <url>/xmp-blog/2021/03/05/7%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="7大设计原则和23种设计模式"><a href="#7大设计原则和23种设计模式" class="headerlink" title="7大设计原则和23种设计模式"></a><strong>7大设计原则和23种设计模式</strong></h1><span id="more"></span>
<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><ol>
<li>设计模式不是一种新的语言，也不是什么新api，更不是什么新语法。</li>
<li>设计模式是前辈们不断总结，不断打磨出的设计方法。不同的设计模式适用于不同的场景。</li>
<li>设计模式公认的有23种，分别对应23种不同的设计场景。</li>
<li>千万不要认为任何一种设计模式能解决任何问题，每一种设计模式只能用于适用的场景，不是万能的。</li>
<li>设计模式不是万能的，有优点也有缺点，不能为了适用设计模式而使用设计模式。切记防止‘’‘模式的滥用’</li>
<li>23种设计模式，背后其实是7大设计原则。也就是说，每一个设计模式都归属于一个或者多个设计原则</li>
<li>七大设计原则背后总结为一个字:分</li>
<li>7大设计原则分别是：<ul>
<li>单一职责原则</li>
<li>接口隔离原则</li>
<li>里氏替换原则</li>
<li>迪米特法则(最少知道原则)</li>
<li>依赖倒置原则</li>
<li>开闭原则(OCP)</li>
<li>组合优于继承原则</li>
</ul>
</li>
</ol>
<h3 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1.单一职责原则"></a>1.单一职责原则</h3><p>​	每个方法，每个类，每个框架都只负责一件事情</p>
<p>例如：Math.round()只负责完成四舍五入方法，其它不管(方法)</p>
<p>​			Read类只负责文件的读取(类)</p>
<p>​			SpringMVC只负责简化MVC的开发(框架)</p>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NegtiveTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//统计一个文本文件中有多少个单词</span></span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;C:\\Users\\asus\\Desktop\\2.txt&quot;</span>);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(line+&quot;!!&quot;);</span></span><br><span class="line">            stringBuilder.append(line);</span><br><span class="line">            stringBuilder.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] strings = stringBuilder.toString().split(<span class="string">&quot;[^a-zA-Z]+&quot;</span>);</span><br><span class="line">        System.out.println(strings.length);</span><br><span class="line">        Arrays.stream(strings).forEach(s -&gt; System.out.println(s+<span class="string">&quot;`````&quot;</span>));</span><br><span class="line"><span class="comment">//        System.out.println(stringBuilder);</span></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上代码违反了单一职责原则：</span></span><br><span class="line"><span class="comment">//1.代码重用性低</span></span><br><span class="line"><span class="comment">//2.可读性低</span></span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PositiveTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//统计一个文本文件中有多少个单词</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> loadFile(<span class="string">&quot;C:\\Users\\asus\\Desktop\\2.txt&quot;</span>);</span><br><span class="line">        String[] strings = getWords(string);</span><br><span class="line">        System.out.println(strings.length);</span><br><span class="line">        Arrays.stream(strings).forEach(s -&gt; System.out.println(s + <span class="string">&quot;`````&quot;</span>));</span><br><span class="line"><span class="comment">//        System.out.println(stringBuilder);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只负责返回单词数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] getWords(String string) &#123;</span><br><span class="line">        String[] strings = string.toString().split(<span class="string">&quot;[^a-zA-Z]+&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> strings;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只负责读取文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">loadFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(path);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(line+&quot;!!&quot;);</span></span><br><span class="line">            stringBuilder.append(line);</span><br><span class="line">            stringBuilder.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-开闭原则-OCP"><a href="#2-开闭原则-OCP" class="headerlink" title="2.开闭原则(OCP)"></a>2.开闭原则(OCP)</h3><p>​	1.对扩展新功能开放</p>
<p>​	2.对修改旧功能关闭</p>
<p>反例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cellphone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price * <span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cellphone</span> <span class="variable">cellphone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cellphone</span>();</span><br><span class="line">        cellphone.setBrand(<span class="string">&quot;华为&quot;</span>);</span><br><span class="line">        cellphone.setPrice(<span class="number">1999.0</span>);</span><br><span class="line">      <span class="comment">//所有手机打8折，违反开闭原则的做法是打开Cellphone源码，在setPrice上修改</span></span><br><span class="line">        System.out.println(cellphone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cellphone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cellphone</span> <span class="variable">cellphone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiscountCellphone</span>();</span><br><span class="line">        cellphone.setBrand(<span class="string">&quot;华为&quot;</span>);</span><br><span class="line">        cellphone.setPrice(<span class="number">1999.0</span>);</span><br><span class="line">        <span class="comment">//所有手机打8折，符合开闭原则的做法是新建一个子类，继承Cellphone重写父类setPrice方法</span></span><br><span class="line">        System.out.println(cellphone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiscountCellphone</span> <span class="keyword">extends</span> <span class="title class_">Cellphone</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setPrice(price * <span class="number">0.8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-接口隔离原则"><a href="#3-接口隔离原则" class="headerlink" title="3.接口隔离原则"></a>3.接口隔离原则</h3><p>​		1.客户端不应该依赖它不需要的接口</p>
<p>​		2.类间的依赖关系应该建立在最小接口上</p>
<p>反例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceSegregationNegativeTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="comment">//        animal.fly();</span></span><br><span class="line">        animal.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is swimming&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//狗不具备飞行的能力，不应该实现飞行的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Dog can not fly&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>正例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceSegregationPositiveTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.run();</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">        bird.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">RunAble</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SwimAble</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 狗会跑，会游泳，客户端只需要实现它需要的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">RunAble</span>, SwimAble &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is swimming&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸟会飞，只需要实现它需要的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bird is flying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-依赖倒置原则"><a href="#4-依赖倒置原则" class="headerlink" title="4.依赖倒置原则"></a>4.依赖倒置原则</h3><p>​	上层不应该依赖于下层，上层和下层都应该依赖于抽象的接口</p>
<p>反例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependencyInversionNegativeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Person类依赖于Dog和Cat类，如果要喂鸟等其它动物，就要改Person的源代码，不利于扩展</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.setName(<span class="string">&quot;小猫&quot;</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.setName(<span class="string">&quot;小狗&quot;</span>);</span><br><span class="line">        person.feed2(dog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人正在喂&quot;</span> + cat.getName());</span><br><span class="line">        cat.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">feed2</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人正在喂&quot;</span> + dog.getName());</span><br><span class="line">        dog.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫正在吃猫粮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗正在吃狗粮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/xmp-blog/2021/03/05/7%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20200916173837289.png" class="" title="image-20200916173837289">

<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependencyInversionPositiveTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Person类、Dog类、Cat类都依赖于抽象的Animal接口，如果需要喂鸟只需要新建一个Bird类实现Animal即可，利于扩展</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.setName(<span class="string">&quot;小猫&quot;</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.setName(<span class="string">&quot;小狗&quot;</span>);</span><br><span class="line">        person.feed(cat);</span><br><span class="line">        person.feed(dog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫正在吃猫粮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗正在吃狗粮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/xmp-blog/2021/03/05/7%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20200916174620854.png" class="" title="image-20200916174620854">

<h3 id="5-迪米特法则-最少知道原则"><a href="#5-迪米特法则-最少知道原则" class="headerlink" title="5.迪米特法则(最少知道原则)"></a>5.迪米特法则(最少知道原则)</h3><p>​		迪米特法则，也叫最少知道原则(封装)</p>
<p>​		一个类，对于其他类，要知道的越少越好</p>
<p>​		只和朋友通信，什么是朋友:1、类中的字段2、方法的返回值 3、方法的参数 4、方法中实例化出的对象</p>
<p>反例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demeterNegativeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.shutdownComputer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">killProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭程序&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeScreen</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭屏幕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">powerOff</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电源&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">    <span class="comment">//Person对于Computer的细节知道的太多。对于person只需要知道关机键在哪里就行，不需要知道细节</span></span><br><span class="line">    <span class="comment">//这种做法提高了代码的复杂度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdownComputer</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.saveData();</span><br><span class="line">        computer.killProcess();</span><br><span class="line">        computer.closeScreen();</span><br><span class="line">        computer.powerOff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemeterPositiveTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.shutdownComputer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">killProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭程序&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeScreen</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭屏幕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">powerOff</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电源&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        saveData();</span><br><span class="line">        killProcess();</span><br><span class="line">        closeScreen();</span><br><span class="line">        powerOff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdownComputer</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-里氏替换原则"><a href="#6-里氏替换原则" class="headerlink" title="6.里氏替换原则"></a>6.里氏替换原则</h3><p>​		任何能使用父类对象的地方，都应该能透明地替换为子类对象。子类对象替换父类对象，语法不会报错，业务逻辑也不会出问题</p>
<p>反例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法重写:在子类和父类中，出现返回类型相同、方法名相同、方法参数相同的方法时，构成方法重写</span></span><br><span class="line"><span class="comment"> * 方法重写的两个限制:1.子类重写父类方法时，子类方法的修饰符不能比父类更严格 2.子类重写父类方法时，不能抛出比父类更多的异常</span></span><br><span class="line"><span class="comment"> * 为什么要有这两个限制？ 为了子类对象替换父类对象时，语法不报错，满足里氏替换原则。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-组合优于继承"><a href="#7-组合优于继承" class="headerlink" title="7.组合优于继承"></a>7.组合优于继承</h3><p>​		类与类之间的关系有3种:</p>
<p>​		1.继承：子类继承父类</p>
<p>​		2.依赖: 一个类的对象作为另一个类的局部变量</p>
<p>​		3.关联:一个类的对象作为另一个类的字段(属性) </p>
<p>​				“关联”可以细分为:1.组合(关系强，鸟和翅膀) 2.聚合(关系弱，大雁和雁群)</p>
<p>​		组合优于继承中的组合没有分的那么细，其实指的的就是关联关系。</p>
<h4 id="例A"><a href="#例A" class="headerlink" title="例A:"></a>例A:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 需求:制作一个集合，要求该集合能够记录曾经加过多少次元素。(不是统计某一时刻有多少元素)</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MySet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySet</span>();</span><br><span class="line"><span class="comment">//        set.add(1);</span></span><br><span class="line"><span class="comment">//        set.add(2);</span></span><br><span class="line"><span class="comment">//        set.add(3);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set1.add(<span class="number">4</span>);</span><br><span class="line">        set1.add(<span class="number">5</span>);</span><br><span class="line">        set.addAll(set1);</span><br><span class="line">        System.out.println(set.getCount());</span><br><span class="line">        <span class="comment">//想要的结果是2结果返回了4</span></span><br><span class="line">        <span class="comment">//原因是addAll方法回调了add方法。所有这种代码没有完成需求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySet</span> <span class="keyword">extends</span> <span class="title class_">HashSet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection c)</span> &#123;</span><br><span class="line">        count += c.size();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="例B："><a href="#例B：" class="headerlink" title="例B："></a>例B：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 需求:制作一个集合，要求该集合能够记录曾经加过多少次元素。(不是统计某一时刻有多少元素)</span></span><br><span class="line"><span class="comment"> * 针对例A中出现的问题，addAll方法会回调add方法，只需要去掉子类中的addAll方法，不去重写父类的addAll方法即可，</span></span><br><span class="line"><span class="comment"> * 因为addAll会去回调add方法</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MySet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySet</span>();</span><br><span class="line"><span class="comment">//        set.add(1);</span></span><br><span class="line"><span class="comment">//        set.add(2);</span></span><br><span class="line"><span class="comment">//        set.add(3);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set1.add(<span class="number">4</span>);</span><br><span class="line">        set1.add(<span class="number">5</span>);</span><br><span class="line">        set.addAll(set1);</span><br><span class="line">        System.out.println(set.getCount());</span><br><span class="line">        <span class="comment">//结果返回的2，已经满足了需求。</span></span><br><span class="line">        <span class="comment">//问题:目前满足需求的前提是addAll方法会去回调add方法，但是万一jdk在未来的版本里面不再回调add方法，那么我们自定义的MySet这段代码就会被&quot;撼动&quot;!</span></span><br><span class="line">        <span class="comment">//例如:HashMap在JDK1.6、1.7、1.8中底层分别变换了3次！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySet</span> <span class="keyword">extends</span> <span class="title class_">HashSet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="例C："><a href="#例C：" class="headerlink" title="例C："></a>例C：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 需求:制作一个集合，要求该集合能够记录曾经加过多少次元素。(不是统计某一时刻有多少元素)</span></span><br><span class="line"><span class="comment"> * 针对例B中出现的问题，MySet必需依赖一个事实:addAll方法必需回调add方法，但是JDK未来的版本无法做这个保证</span></span><br><span class="line"><span class="comment"> * 修改代码如下:我们亲自重写addAll方法，保证一定会回调add方法</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MySet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySet</span>();</span><br><span class="line"><span class="comment">//        set.add(1);</span></span><br><span class="line"><span class="comment">//        set.add(2);</span></span><br><span class="line"><span class="comment">//        set.add(3);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set1.add(<span class="number">4</span>);</span><br><span class="line">        set1.add(<span class="number">5</span>);</span><br><span class="line">        set.addAll(set1);</span><br><span class="line">        System.out.println(set.getCount());</span><br><span class="line">        <span class="comment">//结果:2</span></span><br><span class="line">        <span class="comment">//问题1:如果在新的JDK版本中，突然多了一个添加元素到集合的方法:addSome，这个方法是我们始料未及的，我们的MySet根本没有重写addSome方法。</span></span><br><span class="line">        <span class="comment">//这样在新版本中，我们的MySet也继承了addSome方法，当使用addSome方法添加元素时，就不会去统计元素添加的记录。</span></span><br><span class="line">        <span class="comment">//问题2:我们重写了addAll和add方法，但是在HashSet的所有方法中，可能会有一些方法依赖于addAll和add方法。我们没头没脑地重写</span></span><br><span class="line">        <span class="comment">//了别人的方法，就会导致其他依赖于这些方法的方法出现问题!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySet</span> <span class="keyword">extends</span> <span class="title class_">HashSet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection c)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">modified</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Object e : c)</span><br><span class="line">            <span class="keyword">if</span> (add(e))</span><br><span class="line">                modified = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="例D："><a href="#例D：" class="headerlink" title="例D："></a>例D：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 需求:制作一个集合，要求该集合能够记录曾经加过多少次元素。(不是统计某一时刻有多少元素)</span></span><br><span class="line"><span class="comment"> * 针对例C中出现的问题</span></span><br><span class="line"><span class="comment"> * 修改代码如下:1.我们不再重写addAll和add方法。2我们额外制作两个方法addAll2和add2方法，来替换addAll和add方法，而且还要在类的api</span></span><br><span class="line"><span class="comment"> * 文档里面说明方法怎么使用。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MySet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySet</span>();</span><br><span class="line"><span class="comment">//        set.add(1);</span></span><br><span class="line"><span class="comment">//        set.add(2);</span></span><br><span class="line"><span class="comment">//        set.add(3);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set1.add(<span class="number">4</span>);</span><br><span class="line">        set1.add(<span class="number">5</span>);</span><br><span class="line">        set.addAll2(set1);</span><br><span class="line">        System.out.println(set.getCount());</span><br><span class="line">        <span class="comment">//结果:2</span></span><br><span class="line">        <span class="comment">//此时，代码勉强满足了需求</span></span><br><span class="line">        <span class="comment">//问题1：用户必须看了api文档才能知道怎么使用addAll2和add2方法，而且方法名不能写错</span></span><br><span class="line">        <span class="comment">//问题2:万一在将来的某个版本JDK中，恰恰也出现了addAll2和add2方法，那就没辙了</span></span><br><span class="line">        <span class="comment">//难道不能用继承了吗？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySet</span> <span class="keyword">extends</span> <span class="title class_">HashSet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add2</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll2</span><span class="params">(Collection c)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">modified</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Object e : c)</span><br><span class="line">            <span class="keyword">if</span> (add2(e))</span><br><span class="line">                modified = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="例E"><a href="#例E" class="headerlink" title="例E:"></a>例E:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 需求:制作一个集合，要求该集合能够记录曾经加过多少次元素。(不是统计某一时刻有多少元素)</span></span><br><span class="line"><span class="comment"> * 针对例D中出现的问题</span></span><br><span class="line"><span class="comment"> * 修改代码如下:1.我们的MySet不再继承HashSet 2.取而代之，我们让MySet和HashSet发生关联关系(组合)</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MySet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySet</span>();</span><br><span class="line"><span class="comment">//        set.add(1);</span></span><br><span class="line"><span class="comment">//        set.add(2);</span></span><br><span class="line"><span class="comment">//        set.add(3);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set1.add(<span class="number">4</span>);</span><br><span class="line">        set1.add(<span class="number">5</span>);</span><br><span class="line">        set.addAll(set1);</span><br><span class="line">        System.out.println(set.getCount());</span><br><span class="line">        <span class="comment">//结果:2</span></span><br><span class="line">        <span class="comment">//此时，可以说一声:完美</span></span><br><span class="line">        <span class="comment">//问题1:难道以后不能用继承了吗？</span></span><br><span class="line">        <span class="comment">//问题2:难道以后不能方法重写了吗？</span></span><br><span class="line">        <span class="comment">//如果父类的作者和子类的作者不是同一个人，就不要继承，那么父类的作者不知道未来的子类会重写哪些方法，那么子类的作者也不知道未来的父类会修改或新增哪些方法</span></span><br><span class="line">        <span class="comment">//如果父类和子类的作者是同一个人，那么可以大胆的使用继承，如果我们仅仅为了复用代码而且使用继承，难免会出现&quot;沟通&quot;上的问题。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">return</span> hashSet.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection c)</span> &#123;</span><br><span class="line">        count += c.size();</span><br><span class="line">        <span class="keyword">return</span> hashSet.addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h1><h2 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1.简单工厂模式"></a>1.简单工厂模式</h2><p>反例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hamburger</span>();</span><br><span class="line">        food.eat();</span><br><span class="line">        <span class="comment">//这种设计非常脆弱，因为只要作者修改了源代码，客户端也需要修改。这样服务端代码和客户端代码是耦合的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================================================</span></span><br><span class="line"><span class="comment">//抽象产品</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hamburger</span> <span class="keyword">implements</span> <span class="title class_">Food</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃汉堡包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> SimpleFactory.getFood(<span class="number">3</span>);</span><br><span class="line">        food.eat();</span><br><span class="line">        <span class="comment">//简单工厂</span></span><br><span class="line">        <span class="comment">//优点:1.把具体产品的类型从客户端，解耦出来</span></span><br><span class="line">        <span class="comment">//		2.服务端如果修改了具体产品的类名，         //  客户端不需要修改代码，符合面向接口编程</span></span><br><span class="line">        <span class="comment">//缺点:</span></span><br><span class="line">        <span class="comment">//1.客户端需要记住常量和具体产品的映射关系，例如1表示Hamburger 2表示RiceNoodle</span></span><br><span class="line">        <span class="comment">//2.如果具体产品特别多，服务端的代码就会变得很臃肿</span></span><br><span class="line">        <span class="comment">//3.最重要的是，客户端如果想要扩展新的具体产品，势必需要修改服务端源代码，这样会违反开闭原则</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================</span></span><br><span class="line"><span class="comment">//抽象产品</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hamburger</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃汉堡包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RiceNoodle</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃米线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Food <span class="title function_">getFood</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                food = <span class="keyword">new</span> <span class="title class_">Hamburger</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                food = <span class="keyword">new</span> <span class="title class_">RiceNoodle</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> food;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/xmp-blog/2021/03/05/7%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20200925095846988.png" class="" title="image-20200925095846988">

<h2 id="2-工厂方法模式"><a href="#2-工厂方法模式" class="headerlink" title="2.工厂方法模式"></a>2.工厂方法模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 工厂方法优点:1.具有简单工厂的优点，服务端修改了具体产品的类名，客户端不需要知道</span></span><br><span class="line"><span class="comment"> * 2.当客户端需要扩展一个新的具体产品的时候，不需要修改服务端作者的源码，只需要自定义一个新的工厂即可</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 疑问:1.我们知道简单工厂和工厂方法都有共同的优点，服务端修改了具体产品的类名，客户端不需要知道。</span></span><br><span class="line"><span class="comment"> * 但是，现在的代码，客户端依赖于具体的工厂类名，如果作者修改了具体工厂的类名，那么客户端也需要随之修改，</span></span><br><span class="line"><span class="comment"> * 绕了一圈又回去了!</span></span><br><span class="line"><span class="comment"> * 解释:工厂的名称，视为接口，作者有责任，有义务保证工厂名称是稳定的。也就是说客户端虽然依赖于工厂名称，但是在IT业内</span></span><br><span class="line"><span class="comment"> * 所有的工厂名称是趋于稳定的(不是100%不会变)，至少工厂的名称要比具体产品的类名要更稳定!约定大于配置</span></span><br><span class="line"><span class="comment"> * 疑问2:既然产品是我们自己扩展出来的，为什么不直接实名话具体产品呢？我们就是扩展产品的作者，想怎么改类名都可以自己把控，为什么</span></span><br><span class="line"><span class="comment"> * 还要扩展产品工厂呢？</span></span><br><span class="line"><span class="comment"> * 解释:作者在开发功能的时候，不只会开发一些抽象产品、具体产品、对应的工厂，还会配图搭配一些提前做好的框架!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        FoodFactory foodFactory = new HamburgerFactory();</span></span><br><span class="line"><span class="comment">//        Food food = foodFactory.getFood();</span></span><br><span class="line"><span class="comment">//        food.eat();</span></span><br><span class="line">        <span class="type">FoodFactory</span> <span class="variable">bzFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BZFactory</span>();</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> bzFactory.getFood();</span><br><span class="line">        food.eat();</span><br><span class="line">        JudgeTaste.taste(bzFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端扩展的新产品工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BZFactory</span> <span class="keyword">implements</span> <span class="title class_">FoodFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Food <span class="title function_">getFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BZ</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端扩展的新的具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BZ</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃包子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================</span></span><br><span class="line"><span class="comment">//抽象产品</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hamburger</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃汉堡包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RiceNoodle</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃米线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FoodFactory</span> &#123;</span><br><span class="line">    Food <span class="title function_">getFood</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HamburgerFactory</span> <span class="keyword">implements</span> <span class="title class_">FoodFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Food <span class="title function_">getFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Hamburger</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JudgeTaste</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">taste</span><span class="params">(FoodFactory foodFactory)</span> &#123;</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> foodFactory.getFood();</span><br><span class="line">        food.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委1，品尝&quot;</span>);</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food2</span> <span class="operator">=</span> foodFactory.getFood();</span><br><span class="line">        food2.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委2，品尝&quot;</span>);</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food3</span> <span class="operator">=</span> foodFactory.getFood();</span><br><span class="line">        food3.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委3，品尝&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/xmp-blog/2021/03/05/7%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20200925100241557.png" class="" title="image-20200925100241557">

<h2 id="3-抽象工厂"><a href="#3-抽象工厂" class="headerlink" title="3.抽象工厂"></a>3.抽象工厂</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 针对工厂方法的问题，当有多个产品等级的时候(食物、饮料、甜品。。。。)，工厂类就会很多</span></span><br><span class="line"><span class="comment"> *修改代码如下，使用抽象工厂设计模式</span></span><br><span class="line"><span class="comment"> 优点:1.仍然有简单工厂和工厂方法的优点</span></span><br><span class="line"><span class="comment"> 2.抽象工厂把工厂类的数量减少了，无论多少个产品等级，工厂就一套</span></span><br><span class="line"><span class="comment"> 缺点:当产品等级变化时，会引起以前的工厂类代码修改，违反了开闭原则</span></span><br><span class="line"><span class="comment"> 总结:当产品等级比较固定时，可以使用抽象工厂</span></span><br><span class="line"><span class="comment"> 当产品等级经常变化，不建议使用抽象工厂</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Factory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KFCFactory</span>();</span><br><span class="line"><span class="comment">//        Food food = factory.getFood();</span></span><br><span class="line"><span class="comment">//        food.eat();</span></span><br><span class="line"><span class="comment">//        Factory CMJFactory = new CMJFactory();</span></span><br><span class="line"><span class="comment">//        Food food1 = CMJFactory.getFood();</span></span><br><span class="line"><span class="comment">//        food1.eat();</span></span><br><span class="line">        JudgeTaste.taste(factory);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        DrinkFactory drinkFactory = new ColaFactory();</span></span><br><span class="line"><span class="comment">//        Drink drink = drinkFactory.getDrink();</span></span><br><span class="line"><span class="comment">//        drink.drink();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Drink</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cola</span> <span class="keyword">implements</span> <span class="title class_">Drink</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喝可口可乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SoybeanMilk</span> <span class="keyword">implements</span> <span class="title class_">Drink</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喝豆浆&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//interface DrinkFactory &#123;</span></span><br><span class="line"><span class="comment">//    Drink getDrink();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KFCFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Food <span class="title function_">getFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Hamburger</span>() &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Drink <span class="title function_">getDrink</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cola</span>() &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMJFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Food <span class="title function_">getFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RiceNoodle</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Drink <span class="title function_">getDrink</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SoybeanMilk</span>() &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象产品</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hamburger</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃汉堡包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RiceNoodle</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃米线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    Food <span class="title function_">getFood</span><span class="params">()</span>;</span><br><span class="line">    Drink <span class="title function_">getDrink</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JudgeTaste</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">taste</span><span class="params">(Factory factory)</span> &#123;</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> factory.getFood();</span><br><span class="line">        <span class="type">Drink</span> <span class="variable">drink</span> <span class="operator">=</span> factory.getDrink();</span><br><span class="line">        food.eat();</span><br><span class="line">        drink.drink();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委1，品尝&quot;</span>);</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food2</span> <span class="operator">=</span> factory.getFood();</span><br><span class="line">        <span class="type">Drink</span> <span class="variable">drink2</span> <span class="operator">=</span> factory.getDrink();</span><br><span class="line">        food2.eat();</span><br><span class="line">        drink2.drink();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委2，品尝&quot;</span>);</span><br><span class="line">        <span class="type">Food</span> <span class="variable">food3</span> <span class="operator">=</span> factory.getFood();</span><br><span class="line">        <span class="type">Drink</span> <span class="variable">drink3</span> <span class="operator">=</span> factory.getDrink();</span><br><span class="line">        food3.eat();</span><br><span class="line">        drink3.drink();</span><br><span class="line">        System.out.println(<span class="string">&quot;评委3，品尝&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/xmp-blog/2021/03/05/7%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20200925094749493.png" class="" title="image-20200925094749493">

<img src="/xmp-blog/2021/03/05/7%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20200925101154034.png" class="" title="image-20200925101154034">

<h2 id="4-代理模式"><a href="#4-代理模式" class="headerlink" title="4.代理模式"></a>4.代理模式</h2><h4 id="例A："><a href="#例A：" class="headerlink" title="例A："></a>例A：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     需求:制作一个能加减乘除的类</span></span><br><span class="line"><span class="comment"> *     变化:添加日志功能，在每个方法执行时，在方法开始和结束时打印日志信息。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyATest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalcImpl</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calc.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sub</span> <span class="operator">=</span> calc.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mul</span> <span class="operator">=</span> calc.mul(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">div</span> <span class="operator">=</span> calc.div(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;add = &quot;</span> + add);</span><br><span class="line">        System.out.println(<span class="string">&quot;sub = &quot;</span> + sub);</span><br><span class="line">        System.out.println(<span class="string">&quot;mul = &quot;</span> + mul);</span><br><span class="line">        System.out.println(<span class="string">&quot;div = &quot;</span> + div);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ICalc</span>&#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalcImpl</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a*b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a/b;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="例B：-1"><a href="#例B：-1" class="headerlink" title="例B："></a>例B：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 需求:制作一个能加减乘除的类</span></span><br><span class="line"><span class="comment"> * 针对A例中的变化，满足需求了。</span></span><br><span class="line"><span class="comment"> * 但是有问题：1.代码重复 2.如果需求变化，要求将日志改成英文输出，就需要改很多地方 3.代码极具膨胀，核心代码和非核心代码耦合在一起</span></span><br><span class="line"><span class="comment"> * 4.如果需求改变，要求加入求余，立方等等？</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyBTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalcImpl</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calc.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sub</span> <span class="operator">=</span> calc.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mul</span> <span class="operator">=</span> calc.mul(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">div</span> <span class="operator">=</span> calc.div(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;add = &quot;</span> + add);</span><br><span class="line">        System.out.println(<span class="string">&quot;sub = &quot;</span> + sub);</span><br><span class="line">        System.out.println(<span class="string">&quot;mul = &quot;</span> + mul);</span><br><span class="line">        System.out.println(<span class="string">&quot;div = &quot;</span> + div);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalcImpl</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法开始执行，入参:&quot;</span> + a + <span class="string">&quot;,&quot;</span> + b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a + b;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法执行结束，返回:&quot;</span> + i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub方法开始执行，入参:&quot;</span> + a + <span class="string">&quot;,&quot;</span> + b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a - b;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub方法执行结束，返回:&quot;</span> + i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mul方法开始执行，入参:&quot;</span> + a + <span class="string">&quot;,&quot;</span> + b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a * b;</span><br><span class="line">        System.out.println(<span class="string">&quot;mul方法执行结束，返回:&quot;</span> + i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;div方法开始执行，入参:&quot;</span> + a + <span class="string">&quot;,&quot;</span> + b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a / b;</span><br><span class="line">        System.out.println(<span class="string">&quot;div方法执行结束，返回:&quot;</span> + i);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="例C：-1"><a href="#例C：-1" class="headerlink" title="例C："></a>例C：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 需求:制作一个能加减乘除的类</span></span><br><span class="line"><span class="comment"> * 针对B例中的问题，使用模板模式优化代码，提高代码重用性。</span></span><br><span class="line"><span class="comment"> * 目前优点，解决的问题：1.代码重复 2.如果需求变化，要求将日志改成英文输出，就需要改很多地方</span></span><br><span class="line"><span class="comment"> * 仍然存在的问题：</span></span><br><span class="line"><span class="comment"> * 1.代码极具膨胀，核心代码和非核心代码耦合在一起</span></span><br><span class="line"><span class="comment"> * 2.如果需求改变，要求加入求余，立方等等？</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyCTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CalcImpl</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalcImpl</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calc.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sub</span> <span class="operator">=</span> calc.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mul</span> <span class="operator">=</span> calc.mul(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">div</span> <span class="operator">=</span> calc.div(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;add = &quot; + add);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;sub = &quot; + sub);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;mul = &quot; + mul);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;div = &quot; + div);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//add方法开始执行，入参:[1, 2]</span></span><br><span class="line">        <span class="comment">//add方法执行结束，返回:3</span></span><br><span class="line">        <span class="comment">//sub方法开始执行，入参:[1, 2]</span></span><br><span class="line">        <span class="comment">//sub方法执行结束，返回:-1</span></span><br><span class="line">        <span class="comment">//mul方法开始执行，入参:[-1]</span></span><br><span class="line">        <span class="comment">//mul方法执行结束，返回:2</span></span><br><span class="line">        <span class="comment">//div方法开始执行，入参:[1, 2]</span></span><br><span class="line">        <span class="comment">//div方法执行结束，返回:0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalcImpl</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">(String methodName, Object... parm)</span> &#123;</span><br><span class="line">        System.out.println(methodName + <span class="string">&quot;方法开始执行，入参:&quot;</span> + Arrays.asList(parm).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">(String methodName, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(methodName + <span class="string">&quot;方法执行结束，返回:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;add方法开始执行，入参:&quot; + a + &quot;,&quot; + b);</span></span><br><span class="line">        begin(<span class="string">&quot;add&quot;</span>,a,b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a + b;</span><br><span class="line">        end(<span class="string">&quot;add&quot;</span>,i);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;add方法执行结束，返回:&quot; + i);</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;sub方法开始执行，入参:&quot; + a + &quot;,&quot; + b);</span></span><br><span class="line">        begin(<span class="string">&quot;sub&quot;</span>,a,b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a - b;</span><br><span class="line">        end(<span class="string">&quot;sub&quot;</span>,i);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;sub方法执行结束，返回:&quot; + i);</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;mul方法开始执行，入参:&quot; + a + &quot;,&quot; + b);</span></span><br><span class="line">        begin(<span class="string">&quot;mul&quot;</span>,a,b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a * b;</span><br><span class="line">        end(<span class="string">&quot;mul&quot;</span>,i);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;mul方法执行结束，返回:&quot; + i);</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;div方法开始执行，入参:&quot; + a + &quot;,&quot; + b);</span></span><br><span class="line">        begin(<span class="string">&quot;div&quot;</span>,a,b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a / b;</span><br><span class="line">        end(<span class="string">&quot;div&quot;</span>,i);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;div方法执行结束，返回:&quot; + i);</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="例D：-1"><a href="#例D：-1" class="headerlink" title="例D："></a>例D：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 需求:制作一个能加减乘除的类</span></span><br><span class="line"><span class="comment"> * 针对C例中的问题，我们来使用动态代理(jdk代理)</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 动态代理完美解决以问题：</span></span><br><span class="line"><span class="comment"> * 1.代码极具膨胀，核心代码和非核心代码耦合在一起</span></span><br><span class="line"><span class="comment"> * 2.如果需求改变，要求加入求余，立方等等？</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(method.getName() + <span class="string">&quot;方法开始执行,入参:&quot;</span> + Arrays.asList(args).toString());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(method.getName() + <span class="string">&quot;方法执行结束,返回:&quot;</span> + invoke + <span class="string">&quot;,结果类型:&quot;</span> + invoke.getClass().getSimpleName());</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyDTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalcImpl</span>();</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">calc</span> <span class="operator">=</span> (ICalc) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;ICalc.class&#125;, <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>(c));</span><br><span class="line">        calc.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        calc.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        calc.mul(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        calc.div(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        calc.square(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//平方</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalcImpl</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">(String methodName, Object... parm)</span> &#123;</span><br><span class="line">        System.out.println(methodName + <span class="string">&quot;方法开始执行，入参:&quot;</span> + Arrays.asList(parm).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">(String methodName, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(methodName + <span class="string">&quot;方法执行结束，返回:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;add方法开始执行，入参:&quot; + a + &quot;,&quot; + b);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a + b;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;add方法执行结束，返回:&quot; + i);</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;sub方法开始执行，入参:&quot; + a + &quot;,&quot; + b);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a - b;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;sub方法执行结束，返回:&quot; + i);</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;mul方法开始执行，入参:&quot; + a + &quot;,&quot; + b);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a * b;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;mul方法执行结束，返回:&quot; + i);</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;div方法开始执行，入参:&quot; + a + &quot;,&quot; + b);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a / b;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;div方法执行结束，返回:&quot; + i);</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">i</span> <span class="operator">=</span> Math.pow(a, b);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuilderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//游戏电脑</span></span><br><span class="line">        <span class="type">ComputerBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GameComputer</span>();</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>();</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">build</span> <span class="operator">=</span> director.build(builder);</span><br><span class="line">        System.out.println(build);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=========================================================</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String gpu;</span><br><span class="line">    <span class="keyword">private</span> String hd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ComputerBuilder</span>&#123;</span><br><span class="line">         <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">()</span>;</span><br><span class="line">         <span class="keyword">void</span> <span class="title function_">setGpu</span><span class="params">()</span>;</span><br><span class="line">         <span class="keyword">void</span> <span class="title function_">setHd</span><span class="params">()</span>;</span><br><span class="line">         Computer <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameComputer</span> <span class="keyword">implements</span> <span class="title class_">ComputerBuilder</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setCpu(<span class="string">&quot;I7&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGpu</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setGpu(<span class="string">&quot;GTX2080ti&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHd</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setHd(<span class="string">&quot;16G&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">(ComputerBuilder computerBuilder)</span> &#123;</span><br><span class="line">        computerBuilder.setCpu();</span><br><span class="line">        computerBuilder.setGpu();</span><br><span class="line">        computerBuilder.setHd();</span><br><span class="line">        <span class="keyword">return</span> computerBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-建造者模式"><a href="#5-建造者模式" class="headerlink" title="5.建造者模式"></a>5.建造者模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/9/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuilderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//游戏电脑</span></span><br><span class="line">        <span class="type">ComputerBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GameComputer</span>();</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>();</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">build</span> <span class="operator">=</span> director.build(builder);</span><br><span class="line">        System.out.println(build);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=========================================================</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String gpu;</span><br><span class="line">    <span class="keyword">private</span> String hd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ComputerBuilder</span>&#123;</span><br><span class="line">         <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">()</span>;</span><br><span class="line">         <span class="keyword">void</span> <span class="title function_">setGpu</span><span class="params">()</span>;</span><br><span class="line">         <span class="keyword">void</span> <span class="title function_">setHd</span><span class="params">()</span>;</span><br><span class="line">         Computer <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameComputer</span> <span class="keyword">implements</span> <span class="title class_">ComputerBuilder</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setCpu(<span class="string">&quot;I7&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGpu</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setGpu(<span class="string">&quot;GTX2080ti&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHd</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setHd(<span class="string">&quot;16G&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">(ComputerBuilder computerBuilder)</span> &#123;</span><br><span class="line">        computerBuilder.setCpu();</span><br><span class="line">        computerBuilder.setGpu();</span><br><span class="line">        computerBuilder.setHd();</span><br><span class="line">        <span class="keyword">return</span> computerBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/xmp-blog/2021/03/05/7%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20200925162032768.png" class="" title="image-20200925162032768">
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux SSH 远程登录错误解决办法 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</title>
    <url>/xmp-blog/2019/03/15/Linux-SSH-%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95-WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED/</url>
    <content><![CDATA[<p>最近在登录一台机器的时候，发现无法等入了，出现以下错误：</p>
<span id="more"></span>

<p>解决办法：</p>
<p>1、将known_hosts文件中的与登录错误的IP的公钥删除即可，下图就是我的218机子的公钥（实则是之前系统的公钥），然后将其删除，再ssh 登录 great 登录成功了。</p>
<p>2、将known_hosts文件中的内容清空即可，但不建议使用此方法，里面还保存有其他机子的公钥。</p>
<p>3、使用shh-keygen 命令（强烈建议使用此方法）</p>
<p>比如我们要将172.16.152.209的公钥信息清除，使用命令（请自己将172.16.152.209替换成自己的IP或域名）：</p>
<p>ssh-keygen -R 172.16.152.209<br>如下图：</p>
<p>完毕之后就可以了，再次登陆就后要求确认是否公钥：</p>
<p>至此ssh链接错误成功解决</p>
<p>原文链接<a href="https://blog.csdn.net/nahancy/article/details/51052127">https://blog.csdn.net/nahancy/article/details/51052127</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
        <tag>远程登录</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA8之函数式接口</title>
    <url>/xmp-blog/2021/03/05/JAVA8%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="JAVA8之函数式接口"><a href="#JAVA8之函数式接口" class="headerlink" title="JAVA8之函数式接口"></a>JAVA8之函数式接口</h1><h2 id="1-FunctionalInterface注解"><a href="#1-FunctionalInterface注解" class="headerlink" title="1.FunctionalInterface注解"></a>1.FunctionalInterface注解</h2><p>注解在Inteface上，且interface里只能有一个抽象方法，可以有default方法。从语义上来讲，一个函数式接口需要通过一个***逻辑上的***方法表达一个单一函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span><span class="comment">//No target method found</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">F</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>声明一个接口，没有定义方法，编译器会报错No target method found。如果添加一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，编译正常，一个函数式接口声明完成，如果再定义一个方法呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="comment">//Multiple non-overriding abstract methods found in interface xxx.F</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译报错，说明这个注解只允许接口定义一个抽象方法。如果换一种函数签名呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="comment">//No target method found</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>;</span><br><span class="line"><span class="comment">//    String toString();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>错误依旧，因为这个方法签名是Object类的public方法。而再改一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就OK了。一个抽象方法，一个Object的public方法，相安无事。Object还有其他方法，clone方法试试会怎么样？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="comment">//Multiple non-overriding abstract methods found in interface xxx.F</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    Object <span class="title function_">clone</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这又不行了，因为前面明确说了，要是Object的public方法，而clone是protected的。</p>
<p>所以总结一句话就是：</p>
<blockquote>
<p>函数式接口，有且仅有一个抽象方法，Object的public方法除外。</p>
</blockquote>
<p>因为Java本身支持多接口实现，你定义一个Class可以implements多个interface。所以这个限制也没什么影响，如果想约定一个函数式接口来统一，也可以做一些默认的实现来达到一个接口多个抽象方法的目的，比如下面这种做法：<br>一个普通接口NonFunc：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NonFunc</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">voo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数式接口Func：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Func</span> <span class="keyword">extends</span> <span class="title class_">NonFunc</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">voo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现的测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJ8FunctionalInterface</span> <span class="keyword">implements</span> <span class="title class_">Func</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Func</span> <span class="variable">func</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestJ8FunctionalInterface</span>();</span><br><span class="line">        func.run();</span><br><span class="line">        func.foo();</span><br><span class="line">        func.voo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">voo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;voo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数式接口的一大特性就是可以被lambda表达式和函数引用表达式代替。也就是说声明这样的接口，是可以灵活的以方法来传参。看个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestJ8FunctionalInterface2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestJ8FunctionalInterface2</span> <span class="variable">testJ8FunctionalInterface2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestJ8FunctionalInterface2</span>();</span><br><span class="line">        <span class="comment">// lambda</span></span><br><span class="line">        testJ8FunctionalInterface2.test(<span class="number">10</span>, () -&gt; System.out.println(<span class="string">&quot;A customed Func.&quot;</span>));</span><br><span class="line">        <span class="comment">// method reference</span></span><br><span class="line">        testJ8FunctionalInterface2.test(<span class="number">100</span>, testJ8FunctionalInterface2::customedFunc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customedFunc</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A customed method reference.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> x, Func func)</span> &#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        func.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面例子列举了一个lambda模式和一个方法引用模式，这样就可以利用函数式编程强大的能力，将方法作为参数了</p>
<p>另一个大的话题是针对上文的***逻辑上的方法***。所谓逻辑上，就是说当你出现函数式接口多重继承其他接口时，如果继承的多个接口有相同的方法签名，那么也是OK的。而这种相同签名的方法，也包括了泛型的情况，以下的声明中的Z接口，都是函数式接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">m</span><span class="params">(Iterable&lt;String&gt; arg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Y</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">m</span><span class="params">(Iterable&lt;String&gt; arg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Z</span> <span class="keyword">extends</span> <span class="title class_">X</span>, Y &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是要注意的是，这种泛型的支持，是因为函数式接口的官方声明规范里要求类型可替换和子签名，不是因为泛型擦除。<br>比如下面的例子就不是函数式接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">m</span><span class="params">(Iterable&lt;String&gt; arg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Y</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">m</span><span class="params">(Iterable&lt;Integer&gt; arg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#x27;m(Iterable&lt;Integer&gt;)&#x27; in &#x27;xxx.Y&#x27; clashes with &#x27;m(Iterable&lt;String&gt;)&#x27; in &#x27;xxx.X&#x27;; both methods have same erasure, yet neither overrides the other</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Z</span> <span class="keyword">extends</span> <span class="title class_">X</span>, Y &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">m</span><span class="params">(Iterable&lt;String&gt; arg, Class c)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Y</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">m</span><span class="params">(Iterable arg, Class&lt;?&gt; c)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#x27;m(Iterable, Class&lt;?&gt;)&#x27; in &#x27;xxx.Y&#x27; clashes with &#x27;m(Iterable&lt;String&gt;, Class)&#x27; in &#x27;xxx.X&#x27;; both methods have same erasure, yet neither overrides the other</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Z</span> <span class="keyword">extends</span> <span class="title class_">X</span>, Y &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">X</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(T arg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Y</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(T arg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#x27;m(T)&#x27; in &#x27;xx.Y&#x27; clashes with &#x27;m(T)&#x27; in &#x27;xx.X&#x27;; both methods have same erasure, yet neither overrides the other</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Z</span>&lt;A, B&gt; <span class="keyword">extends</span> <span class="title class_">X</span>&lt;A&gt;, Y&lt;B&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Function"><a href="#2-Function" class="headerlink" title="2.Function"></a>2.Function</h2><p>关于Function接口，其接口声明是一个函数式接口，其抽象表达函数为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterfacepublic</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; &#123;R <span class="title function_">apply</span><span class="params">(T t)</span>;...&#125;</span><br></pre></td></tr></table></figure>

<p>函数意为将参数T传递给一个函数，返回R。即<em><strong>R&#x3D;Function(T);(y&#x3D;f(x))</strong></em></p>
<p>其默认实现了3个default方法，分别是compose、andThen和identity，对应的函数表达为：compose对应，体现嵌套关系；andThen对应，转换了嵌套的顺序；还有identity对应了一个传递自身的函数调用对应。从这里看出来，compose和andThen对于两个函数f和g来说，<code>f.compose(g)</code>等价于<code>g.andThen(f)</code>。看个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fun</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Function&lt;Integer, Integer&gt; incr1 = x -&gt; x + <span class="number">1</span>;</span><br><span class="line">        Function&lt;Integer, Integer&gt; multiply = x -&gt; x * <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;f(x)=x+1,when x=&quot;</span> + x + <span class="string">&quot;, f(x)=&quot;</span> + incr1.apply(x));</span><br><span class="line">        System.out.println(<span class="string">&quot;f(x)=x+1,g(x)=2x, when x=&quot;</span> + x + <span class="string">&quot;, f(g(x))=&quot;</span> + incr1.compose(multiply).apply(x));</span><br><span class="line">        System.out.println(<span class="string">&quot;f(x)=x+1,g(x)=2x, when x=&quot;</span> + x + <span class="string">&quot;, g(f(x))=&quot;</span> + incr1.andThen(multiply).apply(x));</span><br><span class="line">        System.out.println(<span class="string">&quot;compose vs andThen:f(g(x))=&quot;</span> + incr1.compose(multiply).apply(x) + <span class="string">&quot;,&quot;</span> + multiply.andThen(incr1).apply(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-高阶函数"><a href="#3-高阶函数" class="headerlink" title="3.高阶函数"></a>3.高阶函数</h2><p>只是普通的lambda表达式，其能力有限。我们会希望引入更强大的函数能力——高阶函数，可以定义任意同类计算的函数。</p>
<ol>
<li><code>Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt; makeAdder = z -&gt; y -&gt; z + y;</code></li>
</ol>
<p>比如这个函数定义，参数是z，返回值是一个Function，这个Function本身又接受另一个参数y，返回z+y。于是我们可以根据这个函数，定义任意加法函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//high order function</span></span><br><span class="line">Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt; makeAdder = z -&gt; y -&gt; z + y;</span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//define add1</span></span><br><span class="line">Function&lt;Integer, Integer&gt; add1 = makeAdder.apply(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;f(x)=x+1,when x=&quot;</span> + x + <span class="string">&quot;, f(x)=&quot;</span> + add1.apply(x));</span><br><span class="line"><span class="comment">//define add5</span></span><br><span class="line">Function&lt;Integer, Integer&gt; add5 = makeAdder.apply(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;f(x)=x+5,when x=&quot;</span> + x + <span class="string">&quot;, f(x)=&quot;</span> + add5.apply(x));</span><br></pre></td></tr></table></figure>

<p>由于高阶函数接受一个函数作为参数，结果返回另一个函数，所以是典型的函数到函数的映射。</p>
<p>BiFunction提供了二元函数的一个接口声明，举例来说：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//binary function</span></span><br><span class="line">BiFunction&lt;Integer, Integer, Integer&gt; multiply = (a, b) -&gt; a * b;</span><br><span class="line">System.out.println(<span class="string">&quot;f(z)=x*y, when x=3,y=5, then f(z)=&quot;</span> + multiply.apply(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">//f(z)=x*y, when x=3,y=5, then f(z)=15</span></span><br></pre></td></tr></table></figure>

<p>二元函数没有compose能力，只是默认实现了andThen。</p>
<p>有了一元和二元函数，那么可以通过组合扩展出更多的函数可能。</p>
<p>Function接口相关的接口包括：<br>- BiFunction ：<code>R apply(T t, U u);</code>接受两个参数，返回一个值，代表一个二元函数；<br>- DoubleFunction ：<code>R apply(double value);</code>只处理double类型的一元函数；<br>- IntFunction ：<code>R apply(int value);</code>只处理int参数的一元函数；<br>- LongFunction ：<code>R apply(long value);</code>只处理long参数的一元函数；<br>- ToDoubleFunction：<code>double applyAsDouble(T value);</code>返回double的一元函数；<br>- ToDoubleBiFunction：<code>double applyAsDouble(T t, U u);</code>返回double的二元函数；<br>- ToIntFunction：<code>int applyAsInt(T value);</code>返回int的一元函数；<br>- ToIntBiFunction：<code>int applyAsInt(T t, U u);</code>返回int的二元函数；<br>- ToLongFunction：<code>long applyAsLong(T value);</code>返回long的一元函数；<br>- ToLongBiFunction：<code>long applyAsLong(T t, U u);</code>返回long的二元函数；<br>- DoubleToIntFunction：<code>int applyAsInt(double value);</code>接受double返回int的一元函数；<br>- DoubleToLongFunction：<code>long applyAsLong(double value);</code>接受double返回long的一元函数；<br>- IntToDoubleFunction：<code>double applyAsDouble(int value);</code>接受int返回double的一元函数；<br>- IntToLongFunction：<code>long applyAsLong(int value);</code>接受int返回long的一元函数；<br>- LongToDoubleFunction：<code>double applyAsDouble(long value);</code>接受long返回double的一元函数；<br>- LongToIntFunction：<code>int applyAsInt(long value);</code>接受long返回int的一元函数；</p>
<h2 id="4-Operator"><a href="#4-Operator" class="headerlink" title="4.Operator"></a>4.Operator</h2><p>Operator其实就是Function，函数有时候也叫作算子。算子在Java8中接口描述更像是函数的补充，和上面的很多类型映射型函数类似。</p>
<p>算子Operator包括：UnaryOperator和BinaryOperator。分别对应单元算子和二元算子。<br>算子的接口声明如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UnaryOperator</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Function</span>&lt;T, T&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; UnaryOperator&lt;T&gt; <span class="title function_">identity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>二元算子的声明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BinaryOperator</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BiFunction</span>&lt;T,T,T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> BinaryOperator&#125; which returns the lesser of two elements</span></span><br><span class="line"><span class="comment">     * according to the specified &#123;<span class="doctag">@code</span> Comparator&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of the input arguments of the comparator</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> comparator a &#123;<span class="doctag">@code</span> Comparator&#125; for comparing the two values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> BinaryOperator&#125; which returns the lesser of its operands,</span></span><br><span class="line"><span class="comment">     *         according to the supplied &#123;<span class="doctag">@code</span> Comparator&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the argument is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BinaryOperator&lt;T&gt; <span class="title function_">minBy</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> T&gt; comparator)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(comparator);</span><br><span class="line">        <span class="keyword">return</span> (a, b) -&gt; comparator.compare(a, b) &lt;= <span class="number">0</span> ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@link</span> BinaryOperator&#125; which returns the greater of two elements</span></span><br><span class="line"><span class="comment">     * according to the specified &#123;<span class="doctag">@code</span> Comparator&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of the input arguments of the comparator</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> comparator a &#123;<span class="doctag">@code</span> Comparator&#125; for comparing the two values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> BinaryOperator&#125; which returns the greater of its operands,</span></span><br><span class="line"><span class="comment">     *         according to the supplied &#123;<span class="doctag">@code</span> Comparator&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the argument is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BinaryOperator&lt;T&gt; <span class="title function_">maxBy</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> T&gt; comparator)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(comparator);</span><br><span class="line">        <span class="keyword">return</span> (a, b) -&gt; comparator.compare(a, b) &gt;= <span class="number">0</span> ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显，算子就是一个针对同类型输入输出的一个映射。在此接口下，只需声明一个泛型参数T即可。对应上面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">TestOperator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        UnaryOperator&lt;Integer&gt; add = x -&gt; x + <span class="number">1</span>;</span><br><span class="line">        System.out.println(add.apply(<span class="number">1</span>));</span><br><span class="line">        BinaryOperator&lt;Integer&gt; addxy = (x, y) -&gt; x + y;</span><br><span class="line">        System.out.println(addxy.apply(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line">        BinaryOperator&lt;Integer&gt; min = BinaryOperator.minBy((o1, o2) -&gt; o1 - o2);</span><br><span class="line">        System.out.println(min.apply(<span class="number">100</span>, <span class="number">200</span>));</span><br><span class="line">        BinaryOperator&lt;Integer&gt; max = BinaryOperator.maxBy((o1, o2) -&gt; o1 - o2);</span><br><span class="line">        System.out.println(max.apply(<span class="number">100</span>, <span class="number">200</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例子里补充一点的是，BinaryOperator提供了两个默认的static快捷实现，帮助实现二元函数min(x,y)和max(x,y)，使用时注意的是排序器可别传反了：）</p>
<p>其他的Operator接口：（不解释了）<br>- LongUnaryOperator：<code>long applyAsLong(long operand);</code><br>- IntUnaryOperator：<code>int applyAsInt(int operand);</code><br>- DoubleUnaryOperator：<code>double applyAsDouble(double operand);</code><br>- DoubleBinaryOperator：<code>double applyAsDouble(double left, double right);</code><br>- IntBinaryOperator：<code>int applyAsInt(int left, int right);</code><br>- LongBinaryOperator：<code>long applyAsLong(long left, long right);</code></p>
<h2 id="5-Predicate"><a href="#5-Predicate" class="headerlink" title="5.Predicate"></a>5.Predicate</h2><p>predicate是一个谓词函数，主要作为一个谓词演算推导真假值存在，其意义在于帮助开发一些返回bool值的Function。本质上也是一个单元函数接口，其抽象方法test接受一个泛型参数T，返回一个boolean值。等价于一个Function的boolean型返回值的子集。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Predicate</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其默认方法也封装了and、or和negate逻辑。写个小例子看看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestJ8Predicate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestJ8Predicate</span> <span class="variable">testJ8Predicate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestJ8Predicate</span>();</span><br><span class="line">        testJ8Predicate.printBigValue(<span class="number">10</span>, val -&gt; val &gt; <span class="number">5</span>);</span><br><span class="line">        testJ8Predicate.printBigValueAnd(<span class="number">10</span>, val -&gt; val &gt; <span class="number">5</span>);</span><br><span class="line">        testJ8Predicate.printBigValueAnd(<span class="number">6</span>, val -&gt; val &gt; <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//binary predicate</span></span><br><span class="line">        BiPredicate&lt;Integer, Long&gt; biPredicate = (x, y) -&gt; x &gt; <span class="number">9</span> &amp;&amp; y &lt; <span class="number">100</span>;</span><br><span class="line">        System.out.println(biPredicate.test(<span class="number">100</span>, <span class="number">50L</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printBigValue</span><span class="params">(<span class="type">int</span> value, Predicate&lt;Integer&gt; predicate)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(value)) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printBigValueAnd</span><span class="params">(<span class="type">int</span> value, Predicate&lt;Integer&gt; predicate)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.and(v -&gt; v &lt; <span class="number">8</span>).test(value)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;value &lt; 8 : &quot;</span> + value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;value should &lt; 8 at least.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Predicate在Stream中有应用，Stream的filter方法就是接受Predicate作为入参的。这个具体在后面使用Stream的时候再分析深入。</p>
<p>其他Predicate接口：<br>- BiPredicate：<code>boolean test(T t, U u);</code>接受两个参数的二元谓词<br>- DoublePredicate：<code>boolean test(double value);</code>入参为double的谓词函数<br>- IntPredicate：<code>boolean test(int value);</code>入参为int的谓词函数<br>- LongPredicate：<code>boolean test(long value);</code>入参为long的谓词函数</p>
<h2 id="6-Consumer"><a href="#6-Consumer" class="headerlink" title="6.Consumer"></a>6.Consumer</h2><p>看名字就可以想到，这像谓词函数接口一样，也是一个Function接口的特殊表达——接受一个泛型参数，不需要返回值的函数接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个接口声明太重要了，对于一些纯粹consume型的函数，没有Consumer的定义真无法被Function家族的函数接口表达。因为Function一定需要一个泛型参数作为返回值类型（当然不排除你使用Function来定义，但是一直返回一个无用的值）。比如下面的例子，如果没有Consumer，类似的行为使用Function表达就一定需要一个返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">TestJ8Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Consumer&lt;Integer&gt; consumer = System.out::println;</span><br><span class="line">        consumer.accept(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//use function, you always need one return value.</span></span><br><span class="line">        Function&lt;Integer, Integer&gt; function = x -&gt; &#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;;</span><br><span class="line">        function.apply(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他Consumer接口：<br>- BiConsumer：<code>void accept(T t, U u);</code>接受两个参数<br>- DoubleConsumer：<code>void accept(double value);</code>接受一个double参数<br>- IntConsumer：<code>void accept(int value);</code>接受一个int参数<br>- LongConsumer：<code>void accept(long value);</code>接受一个long参数<br>- ObjDoubleConsumer：<code>void accept(T t, double value);</code>接受一个泛型参数一个double参数<br>- ObjIntConsumer：<code>void accept(T t, int value);</code>接受一个泛型参数一个int参数<br>- ObjLongConsumer：<code>void accept(T t, long value);</code>接受一个泛型参数一个long参数</p>
<h2 id="7-Supplier"><a href="#7-Supplier" class="headerlink" title="7.Supplier"></a>7.Supplier</h2><p>最后说的是一个叫做Supplier的函数接口，其声明如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其简洁的声明，会让人以为不是函数。这个抽象方法的声明，同Consumer相反，是一个只声明了返回值，不需要参数的函数（这还叫函数？）。也就是说Supplier其实表达的不是从一个参数空间到结果空间的映射能力，而是表达一种生成能力，因为我们常见的场景中不止是要consume（Consumer）或者是简单的map（Function），还包括了new这个动作。而Supplier就表达了这种能力。</p>
<p>比如你要是返回一个常量，那可以使用类似的做法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt;Integer&gt; supplier = () -&gt; <span class="number">1</span>;</span><br><span class="line">System.out.println(supplier.get());</span><br></pre></td></tr></table></figure>

<p>这保证supplier对象输出的一直是1。<br>如果是要利用构造函数的能力呢？就可以这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestJ8Supplier</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Supplier&lt;TestJ8Supplier&gt; anotherSupplier;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            anotherSupplier = TestJ8Supplier::<span class="keyword">new</span>;</span><br><span class="line">            System.out.println(anotherSupplier.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的输出可以看到，全部的对象都是new出来的。</p>
<p>这样的场景在Stream计算中会经常用到，具体在分析Java 8中Stream的时候再深入。</p>
<p>其他Supplier接口：<br>- BooleanSupplier：<code>boolean getAsBoolean();</code>返回boolean<br>- DoubleSupplier：<code>double getAsDouble();</code>返回double<br>- IntSupplier：<code>int getAsInt();</code>返回int<br>- LongSupplier：<code>long getAsLong();</code>返回long</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个函数式接口的大概总结如下：</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">一元接口</th>
<th align="left">说明</th>
<th align="left">二元接口</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">一般函数</td>
<td align="left">Function</td>
<td align="left">一元函数，抽象apply方法</td>
<td align="left">BiFunction</td>
<td align="left">二元函数，抽象apply方法</td>
</tr>
<tr>
<td align="left">算子函数（输入输出同类型）</td>
<td align="left">UnaryOperator</td>
<td align="left">一元算子，抽象apply方法</td>
<td align="left">BinaryOperator</td>
<td align="left">二元算子，抽象apply方法</td>
</tr>
<tr>
<td align="left">谓词函数（输出boolean）</td>
<td align="left">Predicate</td>
<td align="left">一元谓词，抽象test方法</td>
<td align="left">BiPredicate</td>
<td align="left">二元谓词，抽象test方法</td>
</tr>
<tr>
<td align="left">消费者（无返回值）</td>
<td align="left">Consumer</td>
<td align="left">一元消费者函数，抽象accept方法</td>
<td align="left">BiConsumer</td>
<td align="left">二元消费者函数，抽象accept方法</td>
</tr>
<tr>
<td align="left">供应者（无参数，只有返回值）</td>
<td align="left">Supplier</td>
<td align="left">供应者函数，抽象get方法</td>
<td align="left">-</td>
<td align="left">-</td>
</tr>
</tbody></table>
<h1 id="JAVA8之Lambda表达式和方法引用"><a href="#JAVA8之Lambda表达式和方法引用" class="headerlink" title="JAVA8之Lambda表达式和方法引用"></a>JAVA8之Lambda表达式和方法引用</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Java 表达式有很多种，声明一个class是一个表达式，定义一个变量是一个表达式，写一个&#x3D;赋值逻辑是一个表达式……</p>
<p>Lambda表达式是这样一个表达式：</p>
<blockquote>
<p>lambdaParameters -&gt; lambdaBody</p>
</blockquote>
<p>在lambdaParameters传递参数，在lambdaBody中编写逻辑。lambda表达式生成的结果就是一个函数式接口（上文提到过的）。lambdaBody中的逻辑内容（各种表达式）不会在定义时执行，在实际函数式接口调用时才会执行。</p>
<p>举几个官方的例子看看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">() -&gt; &#123;&#125;                <span class="comment">// No parameters; result is void</span></span><br><span class="line">() -&gt; <span class="number">42</span>                <span class="comment">// No parameters, expression body</span></span><br><span class="line">() -&gt; <span class="literal">null</span>              <span class="comment">// No parameters, expression body</span></span><br><span class="line">() -&gt; &#123; <span class="keyword">return</span> <span class="number">42</span>; &#125;    <span class="comment">// No parameters, block body with return</span></span><br><span class="line">() -&gt; &#123; System.gc(); &#125;  <span class="comment">// No parameters, void block body</span></span><br><span class="line">() -&gt; &#123;                 <span class="comment">// Complex block body with returns</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">result *= i;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="type">int</span> x) -&gt; x+<span class="number">1</span>              <span class="comment">// Single declared-type parameter</span></span><br><span class="line">(<span class="type">int</span> x) -&gt; &#123; <span class="keyword">return</span> x+<span class="number">1</span>; &#125;  <span class="comment">// Single declared-type parameter</span></span><br><span class="line">(x) -&gt; x+<span class="number">1</span>                  <span class="comment">// Single inferred-type parameter</span></span><br><span class="line">x -&gt; x+<span class="number">1</span>                    <span class="comment">// Parentheses optional for</span></span><br><span class="line"><span class="comment">// single inferred-type parameter</span></span><br><span class="line">(String s) -&gt; s.length()      <span class="comment">// Single declared-type parameter</span></span><br><span class="line">(Thread t) -&gt; &#123; t.start(); &#125;  <span class="comment">// Single declared-type parameter</span></span><br><span class="line">s -&gt; s.length()               <span class="comment">// Single inferred-type parameter</span></span><br><span class="line">t -&gt; &#123; t.start(); &#125;           <span class="comment">// Single inferred-type parameter</span></span><br><span class="line">(<span class="type">int</span> x, <span class="type">int</span> y) -&gt; x+y  <span class="comment">// Multiple declared-type parameters</span></span><br><span class="line">(x, y) -&gt; x+y          <span class="comment">// Multiple inferred-type parameters</span></span><br><span class="line">(x, <span class="type">int</span> y) -&gt; x+y    <span class="comment">// Illegal: can&#x27;t mix inferred and declared types</span></span><br><span class="line">(x, <span class="keyword">final</span> y) -&gt; x+y  <span class="comment">// Illegal: no modifiers with inferred types</span></span><br></pre></td></tr></table></figure>

<h2 id="lambda表达式的参数部分"><a href="#lambda表达式的参数部分" class="headerlink" title="lambda表达式的参数部分"></a>lambda表达式的参数部分</h2><p>可以通过上面的例子看到，lambda的参数声明主要包含两大类，一类是声明类型的，一类是不声明类型的（依赖推断的）。其中声明类型的参数，与定义一个方法时声明参数是一样的。</p>
<p>几个注意的点：<br>\1. _不能作为lambda参数。<br>\2. int…与int[]是一致的。<br>\3. 当参数是推断类型时，注意推断类型的类型转换错误，类型是依据上下文变化的。</p>
<p>来个推断的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Function</span> <span class="variable">inferedFunc</span> <span class="operator">=</span> x -&gt; &#123;</span><br><span class="line">    System.out.println(x.getClass().getTypeName());</span><br><span class="line">    <span class="keyword">return</span> x.toString();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> inferedFunc.apply(<span class="number">10</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">b</span> <span class="operator">=</span> inferedFunc.apply(<span class="number">100D</span>);</span><br></pre></td></tr></table></figure>

<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>方法引用表达式是另一类执行函数式接口的模式，在Java 8之前是没有能力表达一个函数方法的，在Java 8引入函数式接口后，每个lambda表达式都代表了一个函数，可以指向性的将lambda表达式赋值给一个Function类的接口。另一个重要的方法就是直接使用函数方法引用。</p>
<p>方法引用是通过[对象名]::[方法名]这种模式来引用的，其中::两个冒号的操作符非常重要。具体的场景针对类、对象实例、数组、泛型等均有不同的支持，下面的例子看看各种方法引用的表达方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestJ8MethodReference</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// static method</span></span><br><span class="line">        Function&lt;Integer, Integer&gt; f1 = TestJ8MethodReference::add;</span><br><span class="line">        System.out.println(f1.apply(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// instance method</span></span><br><span class="line">        Function&lt;String, String&gt; f2 = String::trim;</span><br><span class="line">        System.out.println(f2.apply(<span class="string">&quot;   abd b&quot;</span>));</span><br><span class="line">        <span class="type">TestJ8MethodReference</span> <span class="variable">testJ8MethodReference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestJ8MethodReference</span>();</span><br><span class="line">        Function&lt;Integer, String&gt; f3 = testJ8MethodReference::getStr;</span><br><span class="line">        System.out.println(f3.apply(<span class="number">3</span>));</span><br><span class="line">        <span class="comment">// super</span></span><br><span class="line">        testJ8MethodReference.testSuper();</span><br><span class="line">        <span class="comment">// explicit type arguments for generic type</span></span><br><span class="line">        testJ8MethodReference.testExplicitType();</span><br><span class="line">        <span class="comment">// implicit type arguments for generic type</span></span><br><span class="line">        testJ8MethodReference.testImplicitType();</span><br><span class="line">        <span class="comment">// new</span></span><br><span class="line">        <span class="type">Supplier</span> <span class="variable">s1</span> <span class="operator">=</span> TestJ8MethodReference::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(s1.get());</span><br><span class="line">        <span class="comment">// type arguments inferred from context</span></span><br><span class="line">        Consumer&lt;<span class="type">int</span>[]&gt; c1 = Arrays::sort;</span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        c1.accept(array);</span><br><span class="line">        <span class="comment">// explicit type arguments</span></span><br><span class="line">        Consumer&lt;<span class="type">int</span>[]&gt; c2 = Arrays::&lt;<span class="type">int</span>[]&gt;sort;</span><br><span class="line">        c2.accept(array);</span><br><span class="line">        <span class="comment">// new array</span></span><br><span class="line">        Function&lt;Integer, <span class="type">int</span>[]&gt; f4 = (<span class="type">int</span>[]::<span class="keyword">new</span>);</span><br><span class="line">        <span class="type">int</span>[] a = f4.apply(<span class="number">10</span>);</span><br><span class="line">        System.out.println(a.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span> + x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSuper</span><span class="params">()</span> &#123;</span><br><span class="line">        Supplier&lt;String&gt; f = <span class="built_in">super</span>::toString;</span><br><span class="line">        System.out.println(f.get());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExplicitType</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Function&lt;String, Boolean&gt; func = list::add;</span><br><span class="line">        System.out.println(func.apply(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testImplicitType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        Function&lt;String, Boolean&gt; func = list::add;</span><br><span class="line">        System.out.println(func.apply(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中需要注意的是，数组的new方法引用等价于一个有入参的Function，因为new一个数组是需要指定size的。</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>无论lambda表达式还是方法引用表达式，所指向的都是一个方法或者是函数。而它们指向的内容能赋值的也一定是函数式接口。这两种指向也是实用场景各异，方法引用需要使用在已有方法上（显而易见），而lambda表达式是一种快速行内声明一个方法且指向一个函数式接口的方法。两者交互配合，基本可以覆盖各种函数式接口使用的场景。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>函数式接口</tag>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8新特性之集合流式编程</title>
    <url>/xmp-blog/2021/03/05/Java8%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E9%9B%86%E5%90%88%E6%B5%81%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="1-集合流的简介"><a href="#1-集合流的简介" class="headerlink" title="1.集合流的简介"></a>1.集合流的简介</h1><h2 id="1-1集合的流式编程简介"><a href="#1-1集合的流式编程简介" class="headerlink" title="1.1集合的流式编程简介"></a>1.1集合的流式编程简介</h2><p>​    Stream是JDK1.8之后出来的新特性，也是JDK1.8中最值得学习的两种新特性之一。(另外一个是lambda表达式)</p>
<p>​    Stream是对集合操作的增强，流不是集合元素，不是一种数据结构，不负责数据的存储。流更像是一种迭代器，可以单向的遍历一个集合中的每一个元素，并且不可循环。</p>
<span id="more"></span>
<h2 id="1-2-为什么要使用集合的流式编程"><a href="#1-2-为什么要使用集合的流式编程" class="headerlink" title="1.2 为什么要使用集合的流式编程"></a>1.2 为什么要使用集合的流式编程</h2><p>​     集合的流式编程可以大幅度简化代码数量，将数据源中的数据读取到一个流中，可以对流中的数据进行删除、过滤、映射等多种操作，每次操作返回的结果也是一个流对象，可以对这个流对象再次进行操作</p>
<h2 id="1-3-使用流式编程的步骤"><a href="#1-3-使用流式编程的步骤" class="headerlink" title="1.3 使用流式编程的步骤"></a>1.3 使用流式编程的步骤</h2><p>   通常情况，对集合中的数据使用流式编程需要以下三个步骤</p>
<ul>
<li>1、获取数据源，将数据源中的数据读取到流中</li>
<li>2、对流中的数据进行各种处理</li>
<li>3、对流中的数据整合处理</li>
</ul>
<blockquote>
<p>上述过程中，过程2中，可以有若干方法对流中的数据进行各种操作，并且返回流对象本身，这种操作，被称为中间操作。过程3中，有若干方法，可以对流中的数据进行各种处理，并且关闭流，这种操作，被称为最终操作</p>
</blockquote>
<h1 id="2-数据源的获取"><a href="#2-数据源的获取" class="headerlink" title="2.数据源的获取"></a>2.数据源的获取</h1><h2 id="2-1数据源的简介"><a href="#2-1数据源的简介" class="headerlink" title="2.1数据源的简介"></a>2.1数据源的简介</h2><p>数据源是流中的数据来源，是集合流式编程的第一步，将数据源中的数据读取到流中，进行处理。&#x3D;&#x3D;注意:将数据读取到流中进行处理的时候，与数据源中的数据没有关系。就是说，中间操作对对流中的数据进行处理、过滤、映射、排序等，此时都不会影响数据源中的数据&#x3D;&#x3D;</p>
<h2 id="2-2数据源的获取"><a href="#2-2数据源的获取" class="headerlink" title="2.2数据源的获取"></a>2.2数据源的获取</h2><p>将集合容器中的数据读取到一个流中，无论什么容器作为数据源，读取到流中返回的都是一个Stream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.通过Collection接口中的stream()方法获取数据源为Collection的流</span></span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line"><span class="comment">//2.通过Collection接口的parallelStream()方法获取数据源为Collection的流</span></span><br><span class="line">Stream&lt;Integer&gt; stream = list.parallelStream();</span><br><span class="line"><span class="comment">//3.通过Arrays工具类中的stream()方法获取数据源为数组的流</span></span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(array).collect(Collectors.toMap(e1 -&gt; e1, o -&gt; o * <span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>stream()和parallelStream的区别</p>
<p>stream()方法获取的数据源是串行的，parallelStream()获取的数据源是并行的。parallelStream()内部集成了多个线程对流中的数据进行操作，效率更高。</p>
</blockquote>
<h1 id="3-最终操作"><a href="#3-最终操作" class="headerlink" title="3.最终操作"></a>3.最终操作</h1><h2 id="3-1最终操作简介"><a href="#3-1最终操作简介" class="headerlink" title="3.1最终操作简介"></a>3.1最终操作简介</h2><p>将流中的数据整合到一起，存入一个集合，也可以直接对流中的数据进行遍历、数据统计等等，通过最终操作，需要掌握如何从流中提取我们想要的信息。</p>
<blockquote>
<p>注意事项:之所以叫最终操作，是因为，在最终操作执行结束后，会关闭这个流，流中所有数据都会销毁。如果使用一个已经关闭了的流，会出现异常</p>
</blockquote>
<h2 id="3-2-collect"><a href="#3-2-collect" class="headerlink" title="3.2 collect"></a>3.2 collect</h2><p>​	将流中的数据收集到一起，对数据进行处理。最常见的处理是将流中的数据存入一个集合，collect方法的参数是一个Collector接口，而且不是一个函数式接口，实现这个接口，可以自定义收集规则。绝大部分情况，不需要自定义规则，直接使用Collectors工具类提供的方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.1转成List</span></span><br><span class="line">List&lt;Integer&gt; result = list.stream().collect(Collectors.toList);</span><br><span class="line"><span class="comment">//1.2转成Set</span></span><br><span class="line">Set&lt;Integer&gt; result1 = list.stream().collect(Collectors.toSet);<span class="comment">//</span></span><br><span class="line"><span class="comment">//1.3转成Map,提供两个函数式接口实现，分别实现键的生产规则和值的生成规则</span></span><br><span class="line">Map&lt;Integer,Integer&gt; result2 = list.stream().collect(Collectors.toMap(o1 -&gt; o1, o2 -&gt; o2*<span class="number">10</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-3-reduce"><a href="#3-3-reduce" class="headerlink" title="3.3 reduce"></a>3.3 reduce</h2><p>​	将流中的数据按照一定的规则聚合起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将流中的元素，逐一带入这个方法进行运算</span></span><br><span class="line"><span class="comment">//最终运算结果是一个Optional类型，需要通过get方法获取里面的数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> list.stream().reduce(o1,o2-&gt;o1+o2).get();</span><br></pre></td></tr></table></figure>

<h2 id="3-4-count"><a href="#3-4-count" class="headerlink" title="3.4 count"></a>3.4 count</h2><p>​	统计流中元素的数量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> list.stream().count();</span><br></pre></td></tr></table></figure>

<h2 id="3-5-foreach"><a href="#3-5-foreach" class="headerlink" title="3.5 foreach"></a>3.5 foreach</h2><p>​	迭代，遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">integerList.stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="3-6-max-amp-min"><a href="#3-6-max-amp-min" class="headerlink" title="3.6 max &amp; min"></a>3.6 max &amp; min</h2><p>获取流中最大或者最小的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">integerList.stream().max(Integer::compareTo).get();</span><br></pre></td></tr></table></figure>

<h2 id="3-7-Matching"><a href="#3-7-Matching" class="headerlink" title="3.7 Matching"></a>3.7 Matching</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只有流中的所有元素都匹配指定的规则，才会返回true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> integerList.stream().allMatch(integer -&gt; integer &gt;= <span class="number">1</span>);</span><br><span class="line"><span class="comment">//只要流中的某个元素匹配指定的规则，就会返回true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> integerList.stream().anyMatch(integer -&gt; integer &gt;= <span class="number">4</span>);</span><br><span class="line"><span class="comment">//只有流中的所有元素都不匹配指定的规则，才会返回true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> integerList.stream().noneMatch(integer -&gt; integer &gt;= <span class="number">4</span>);</span><br><span class="line">System.out.println(b);<span class="comment">//true</span></span><br><span class="line">System.out.println(b1);<span class="comment">//false</span></span><br><span class="line">System.out.println(b2);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="3-8-find"><a href="#3-8-find" class="headerlink" title="3.8 find"></a>3.8 find</h2><p>​       </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(integerList, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//获取流中首元素</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> integerList.stream().findFirst().get();</span><br><span class="line"><span class="comment">//获取流中某个元素，一般情况获取首元素，多线程下返回不一定是首元素</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> integerList.stream().findAny().get();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer3</span> <span class="operator">=</span> integerList.parallelStream().findAny().get();</span><br><span class="line">System.out.println(integer);<span class="comment">//1</span></span><br><span class="line">System.out.println(integer2);<span class="comment">//1</span></span><br><span class="line">System.out.println(integer3);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h2 id="3-9-最终操作注意事项"><a href="#3-9-最终操作注意事项" class="headerlink" title="3.9 最终操作注意事项"></a>3.9 最终操作注意事项</h2><p>​	最终操作会关闭流，如果操作一个已经关闭了的流会报异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//会出现异常 Exception in thread &quot;main&quot; java.lang.IllegalStateException: stream has already been operated upon or closed</span></span><br><span class="line">List&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(integerList, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = integerList.stream();</span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stream.count();</span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> stream.max(Integer::compareTo).get();</span><br><span class="line">System.out.println(integer);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-0-InStream等基本数据类型的最终操作"><a href="#4-0-InStream等基本数据类型的最终操作" class="headerlink" title="4.0 InStream等基本数据类型的最终操作"></a>4.0 InStream等基本数据类型的最终操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> Arrays.stream(ints);</span><br><span class="line">        <span class="comment">//常见的最终操作</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;intStream.max() = &quot; + intStream.max().getAsInt());//获取最大值</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;intStream.min() = &quot; + intStream.min().getAsInt());//获取最小值</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;intStream.sum() = &quot; + intStream.sum());//求和</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;intStream.count() = &quot; + intStream.count());//元素数量</span></span><br><span class="line">        <span class="comment">//获取流的数据分析结果</span></span><br><span class="line">        <span class="type">IntSummaryStatistics</span> <span class="variable">intSummaryStatistics</span> <span class="operator">=</span> intStream.summaryStatistics();</span><br><span class="line">        System.out.println(intSummaryStatistics.getMax());</span><br><span class="line">        System.out.println(intSummaryStatistics.getMin());</span><br><span class="line">        System.out.println(intSummaryStatistics.getSum());</span><br><span class="line">        System.out.println(intSummaryStatistics.getCount());</span><br><span class="line">        System.out.println(intSummaryStatistics.getAverage());</span><br></pre></td></tr></table></figure>

<h1 id="4-中间操作"><a href="#4-中间操作" class="headerlink" title="4. 中间操作"></a>4. 中间操作</h1><p>​	对流中的数据进行各种操作、处理。中间操作可以是连续操作，每一次操作返回的都是一个Stream对象，可以继续进行其它操作，直到最终操作</p>
<h2 id="4-1-filter"><a href="#4-1-filter" class="headerlink" title="4.1 filter"></a>4.1 filter</h2><p>​	条件过滤，仅保留满足条件的数据，其它不满足条件的数据会被删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(integerList, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">integerList.stream().filter(integer -&gt; integer &gt; <span class="number">5</span>).forEach(System.out::println);<span class="comment">//6</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-distinct"><a href="#4-2-distinct" class="headerlink" title="4.2 distinct"></a>4.2 distinct</h2><p>​	去除集合中重复的元素，方法没有参数。去重规则和hashSet相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(students,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">16</span>,<span class="number">90</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">18</span>,<span class="number">70</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhaowu&quot;</span>,<span class="number">17</span>,<span class="number">98</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhaowu&quot;</span>,<span class="number">17</span>,<span class="number">98</span>)</span><br><span class="line">);</span><br><span class="line">    students.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="4-3-sorted"><a href="#4-3-sorted" class="headerlink" title="4.3 sorted"></a>4.3 sorted</h2><p>​	将流中的元素进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortedDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(students,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">16</span>, <span class="number">90</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">18</span>, <span class="number">70</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhaowu&quot;</span>, <span class="number">17</span>, <span class="number">98</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhaowu&quot;</span>, <span class="number">17</span>, <span class="number">98</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//Student实现了Comparable接口，对流中的数据进行排序</span></span><br><span class="line"><span class="comment">//        students.stream().distinct().sorted().forEach(System.out::println);</span></span><br><span class="line">        <span class="comment">//对流中的数据按照自定义规则排序</span></span><br><span class="line">        students.stream().distinct().sorted((o1, o2) -&gt; o1.score - o2.score).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> score)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="built_in">this</span>.score = score;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.age - o.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-4-limit-amp-skip"><a href="#4-4-limit-amp-skip" class="headerlink" title="4.4 limit &amp; skip"></a>4.4 limit &amp; skip</h2><p>​	limit: 限制,截取流中指定数量的元素</p>
<p>​	skip: 跳过，跳过流中指定数量的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//截取指定数量的元素</span></span><br><span class="line">list.stream().limit(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">//跳过开头指定数量的元素</span></span><br><span class="line">list.stream().skip(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">//配合使用，截取部分元素</span></span><br><span class="line">list.stream().skip(<span class="number">2</span>).limit(<span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="4-5-map-amp-flatMap"><a href="#4-5-map-amp-flatMap" class="headerlink" title="4.5 map &amp; flatMap"></a>4.5 map &amp; flatMap</h2><p>​	map: 对流中的数据进行映射，用新数据替换旧的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = students.stream().map(student -&gt; String.valueOf(student.getAge()) + <span class="string">&quot;岁&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;stream.collect(Collectors.toList()) = &quot;</span> + stream.collect(Collectors.toList()));</span><br></pre></td></tr></table></figure>

<p>​	flatMap是扁平化映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//flatMap扁平化映射，常用于map映射完成后，流中的数据是一个个容器，而我们需要对容器中的数据进行处理，可以使用扁平化映射，将容器中的元素直接存入流中</span></span><br><span class="line">students.stream().map(student -&gt; student.getName().split(<span class="string">&quot;&quot;</span>)).flatMap(Arrays::stream).distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="4-6-mapToInt-mapToLong等"><a href="#4-6-mapToInt-mapToLong等" class="headerlink" title="4.6 mapToInt,mapToLong等"></a>4.6 mapToInt,mapToLong等</h2><p>​	将流中的数据替换成Int类型，得到IntStream等对象，可以进行统计操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> students.stream().mapToInt(Student::getAge);</span><br><span class="line">System.out.println(<span class="string">&quot;intStream.summaryStatistics().getAverage() = &quot;</span> + intStream.summaryStatistics().getAverage());</span><br></pre></td></tr></table></figure>

<h1 id="5-Collectors工具类"><a href="#5-Collectors工具类" class="headerlink" title="5. Collectors工具类"></a>5. Collectors工具类</h1><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Collectors.toList()</td>
<td>将流中的数据聚合到一个List中</td>
</tr>
<tr>
<td>Collectors.toSet()</td>
<td>将流中的数据聚合到一个Set中</td>
</tr>
<tr>
<td>Collectors.toMap()</td>
<td>将流中的数据聚合到一个Map中</td>
</tr>
<tr>
<td>maxBy()</td>
<td>按照指定规则，找到流中最大元素，等同于max</td>
</tr>
<tr>
<td>minBy()</td>
<td>按照指定规则，找到流中最小元素，等同于min</td>
</tr>
<tr>
<td>joining()</td>
<td>将流中的数据拼接成一个字符串，注意:只能操作流中String的数据</td>
</tr>
<tr>
<td>summingInt()</td>
<td>将流中的数据，映射成int类型数据，并求和</td>
</tr>
<tr>
<td>averagingInt()</td>
<td>将流中的数据，映射成int类型数据，并求平均值</td>
</tr>
<tr>
<td>summarizingInt()</td>
<td>将流中的数据，映射成int类型数据，并获取描述信息</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按照指定规则，找到流中最大元素，等同max</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> students.stream().collect(Collectors.maxBy((o1, o2) -&gt; o1.getAge() - o2.getAge())).get();</span><br><span class="line">System.out.println(student);</span><br><span class="line"><span class="comment">//将流中的数据拼接成一个字符串，注意:只能操作流中String的数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">collect</span> <span class="operator">=</span> students.stream().map(Student::getName).collect(Collectors.joining());</span><br><span class="line">System.out.println(collect);</span><br><span class="line"><span class="comment">//将流中的数据，映射成int类型数据，并求和</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">collect1</span> <span class="operator">=</span> students.stream().collect(Collectors.summingInt(Student::getAge));</span><br><span class="line">System.out.println(collect1);</span><br><span class="line"><span class="comment">//将流中的数据，映射成int类型数据，并求平均值</span></span><br><span class="line"><span class="type">Double</span> <span class="variable">collect2</span> <span class="operator">=</span> students.stream().collect(Collectors.averagingInt(Student::getAge));</span><br><span class="line">System.out.println(collect2);</span><br><span class="line"><span class="comment">//将流中的数据，映射成int类型数据，并获取描述信息</span></span><br><span class="line"><span class="type">IntSummaryStatistics</span> <span class="variable">collect3</span> <span class="operator">=</span> students.stream().collect(Collectors.summarizingInt(Student::getAge));</span><br><span class="line">System.out.println(collect3.getMax());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>函数式接口</tag>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>SSR 一键安装脚本（四合一）</title>
    <url>/xmp-blog/2019/03/15/SSR-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88%E5%9B%9B%E5%90%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>本脚本适用环境<br>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>内存要求：≥128M</p>
<p>关于本脚本<br>1、一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；<br>2、各版本的启动脚本及配置文件名不再重合；<br>3、每次运行可安装一种版本；<br>4、支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；<br>5、若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；</p>
<p>友情提示：如果你有问题，请先阅读这篇《Shadowsocks Troubleshooting》之后再询问。</p>
<span id="more"></span>
<p>默认配置<br>服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）<br>密码：自己设定（如不设定，默认为 teddysun.com）<br>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）<br>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）<br>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）<br>备注：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</p>
<p>客户端下载<br>常规版 Windows 客户端<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>
<p>ShadowsocksR 版 Windows 客户端<br><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p>
<p>使用方法<br>使用root用户登录，运行以下命令：</p>
<p>wget –no-check-certificate -O shadowsocks-all.sh <a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</a><br>chmod +x shadowsocks-all.sh<br>.&#x2F;shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log<br>安装完成后，脚本提示如下<br>Congratulations, your_shadowsocks_version install completed!<br>Your Server IP        :your_server_ip<br>Your Server Port      :your_server_port<br>Your Password         :your_password<br>Your Encryption Method:your_encryption_method</p>
<p>Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)<br> ss:&#x2F;&#x2F;your_encryption_method:your_password@your_server_ip:your_server_port<br>Your QR Code has been saved as a PNG file path:<br> your_path.png</p>
<p>Welcome to visit:<a href="https://teddysun.com/486.html">https://teddysun.com/486.html</a><br>Enjoy it!<br>卸载方法<br>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p>
<p>使用root用户登录，运行以下命令：</p>
<p>.&#x2F;shadowsocks-all.sh uninstall<br>启动脚本<br>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p>
<p>Shadowsocks-Python 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-python start | stop | restart | status</p>
<p>ShadowsocksR 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-r start | stop | restart | status</p>
<p>Shadowsocks-Go 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-go start | stop | restart | status</p>
<p>Shadowsocks-libev 版：<br>&#x2F;etc&#x2F;init.d&#x2F;shadowsocks-libev start | stop | restart | status</p>
<p>各版本默认配置文件<br>Shadowsocks-Python 版：<br>&#x2F;etc&#x2F;shadowsocks-python&#x2F;config.json</p>
<p>ShadowsocksR 版：<br>&#x2F;etc&#x2F;shadowsocks-r&#x2F;config.json</p>
<p>Shadowsocks-Go 版：<br>&#x2F;etc&#x2F;shadowsocks-go&#x2F;config.json</p>
<p>Shadowsocks-libev 版：<br>&#x2F;etc&#x2F;shadowsocks-libev&#x2F;config.json</p>
<p>更新日志<br>2018 年 06 月 01 日：<br>1、修正：在启用了插件 simple-obfs 的情况下，libev 版启动失败的问题；<br>2、修正：在使用 &#x2F;etc&#x2F;init.d&#x2F;shadowsocks-libev restart 命令重启 libev 版服务端时，偶尔出现的 “bind: Address already in use” 问题；<br>3、修正：移除 libev 版配置文件中的 local_address 字段；<br>4、修改：不再默认使用 root 用户启动，改为使用 nobody 用户启动 libev 版服务端 ss-server；<br>5、升级：mbedtls 到版本 2.9.0；<br>6、修改：libev 版启动脚本中的 -u 参数（即同时启用 TCP 和 UDP 模式），改到配置文件里配置为 “mode”: “tcp_and_udp”；<br>7、修改：libev 版配置文件的内置 NameServers 为 8.8.8.8，默认是从 &#x2F;etc&#x2F;resolv.conf 中取得。</p>
<p>2018 年 02 月 07 日：<br>1、修改：将默认端口从 8989 改为从 9000-19999 之间随机生成。</p>
<p>2018 年 02 月 06 日：<br>1、修改：ShadowsocksR 版为 ShadowsocksRR 最新版；<br>2、新增：ShadowsocksR 版的协议（protocol）增加了 4 个，分别为：</p>
<p>auth_chain_c<br>auth_chain_d<br>auth_chain_e<br>auth_chain_f<br>2017 年 12 月 29 日：<br>1、升级：libsodium 到 1.0.16。</p>
<p>2017 年 11 月 25 日：<br>1、如果 Linux 内核版本大于 3.7.0，则配置文件默认支持 TCP fast open；<br>2、新增：libev 版启动时支持 verbose mode，也就是默认写 log 到 &#x2F;var&#x2F;log&#x2F;messages 方便查看。</p>
<p>2017 年 11 月 12 日：<br>1、新增生成 ss:&#x2F;&#x2F; 或 ssr:&#x2F;&#x2F; 链接，以及其二维码图片。<br>※ 脚本会根据当前安装的版本以及输入的各项配置，自动生成 ss:&#x2F;&#x2F; 或 ssr:&#x2F;&#x2F; 的链接并在安装成功后显示，直接复制即可被客户端识别。同时生成其二维码图片，并保存在当前目录下，下载后用看图软件打开，也能被客户端识别。</p>
<p>复制二维码链接后 Shadowsocks 客户端识别示例：</p>
<p>复制二维码链接后 ShadowsocksR 客户端识别示例：</p>
<p>二维码（QR Code）参考链接：<br><a href="https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients">https://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients</a><br><a href="https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme">https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme</a></p>
<p>2017 年 10 月 22 日：<br>1、升级：libsodium 到 1.0.15。</p>
<p>2017 年 10 月 14 日：<br>1、新增：在安装 Shadowsocks-libev 版时可选安装 simple-obfs 服务端。<br>※ 脚本通过判断 autoconf 版本是否大于或等于 2.67 来一键安装 simple-obfs 服务端。并且，支持在安装过程中选择 obfs 为 http 或 tls。<br>※ 使用方法参考：<a href="https://teddysun.com/511.html">https://teddysun.com/511.html</a></p>
<p>2017 年 09 月 16 日：<br>1、修正：Shadowsocks-libev 版 v3.1.0 使用 libc-ares 替换 libudns 依赖包，解决了依赖问题；<br>2、升级：mbedtls 到版本 2.6.0。</p>
<p>2017 年 07 月 27 日：<br>1、新增：ShadowsocksR 版可选协议（protocol）auth_chain_b 。使用该协议需更新到最新（4.7.0） ShadowsocksR 版客户端；<br>2、修改：更新 ShadowsocksR 源码下载地址。</p>
<p>2017 年 07 月 23 日：<br>1、修正：卸载时可自行选择某个版本卸载，若该版本不存在则报错退出。</p>
<p>2017 年 07 月 22 日：<br>1、修正：默认加密方式从 aes-256-cfb 改为 aes-256-gcm（Python 和 libev 版）；<br>2、新增：安装时可选 16 种加密方式的其中之一（Python 和 libev 版）。如下所示：</p>
<p>aes-256-gcm<br>aes-192-gcm<br>aes-128-gcm<br>aes-256-ctr<br>aes-192-ctr<br>aes-128-ctr<br>aes-256-cfb<br>aes-192-cfb<br>aes-128-cfb<br>camellia-128-cfb<br>camellia-192-cfb<br>camellia-256-cfb<br>chacha20-ietf-poly1305<br>chacha20-ietf<br>chacha20<br>rc4-md5<br>3、新增：安装时可选 9 种加密方式的其中之一（Go 版）。如下所示：</p>
<p>aes-256-cfb<br>aes-192-cfb<br>aes-128-cfb<br>aes-256-ctr<br>aes-192-ctr<br>aes-128-ctr<br>chacha20-ietf<br>chacha20<br>rc4-md5<br>4、新增：安装时可选 15 种加密方式的其中之一（none 是不加密，ShadowsocksR 版）。如下所示：</p>
<p>none<br>aes-256-cfb<br>aes-192-cfb<br>aes-128-cfb<br>aes-256-cfb8<br>aes-192-cfb8<br>aes-128-cfb8<br>aes-256-ctr<br>aes-192-ctr<br>aes-128-ctr<br>chacha20-ietf<br>chacha20<br>salsa20<br>xchacha20<br>xsalsa20<br>rc4-md5<br>5、新增：安装时可选 7 种协议（protocol）的其中之一（仅限 ShadowsocksR 版）。如下所示：</p>
<p>origin<br>verify_deflate<br>auth_sha1_v4<br>auth_sha1_v4_compatible<br>auth_aes128_md5<br>auth_aes128_sha1<br>auth_chain_a<br>auth_chain_b<br>6、新增：安装时可选 9 种混淆（obfs）的其中之一（仅限 ShadowsocksR 版）。如下所示：</p>
<p>plain<br>http_simple<br>http_simple_compatible<br>http_post<br>http_post_compatible<br>tls1.2_ticket_auth<br>tls1.2_ticket_auth_compatible<br>tls1.2_ticket_fastauth<br>tls1.2_ticket_fastauth_compatible<br>2017 年 02 月 24 日：<br>1、恢复： 通过 Github API 自动获取 Shadowsocks-libev 的最新 release 版本的功能（v3.0.3）。</p>
<p>2017 年 02 月 13 日：<br>1、升级： Shadowsocks-libev 版到版本 3.0.2；<br>2、升级： Shadowsocks-go 版到版本 1.2.1（基于 Github 最新代码，用 go 1.8 编译完成的 x86 和 x86_64 二进制文件）；<br>3、修复：在 Debian 7 下默认没有 libudns-dev 依赖包的问题。</p>
<p>2017 年 02 月 12 日：<br>1、升级： Shadowsocks-libev 版到版本 3.0.1。</p>
<p>2017 年 01 月 27 日：<br>1、升级： Shadowsocks-go 版到版本 1.2.1 （仅适用于 x86_64 系统）</p>
<p>更多单版本 Shadowsocks 服务端一键安装脚本<br>Shadowsocks Python 版一键安装脚本（CentOS，Debian，Ubuntu）<br>ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）<br>CentOS 下 Shadowsocks-libev 一键安装脚本<br>Debian 下 Shadowsocks-libev 一键安装脚本<br>Shadowsocks-go 一键安装脚本（CentOS，Debian，Ubuntu）</p>
<p>注意：以上单版本不可与该四合一版本混用。</p>
<p>非原创，原文链接：<a href="https://teddysun.com/486.html">https://teddysun.com/486.html</a></p>
]]></content>
      <categories>
        <category>vps</category>
      </categories>
      <tags>
        <tag>vps</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>gogs后台运行及重启</title>
    <url>/xmp-blog/2019/03/15/gogs%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E5%8F%8A%E9%87%8D%E5%90%AF/</url>
    <content><![CDATA[<p>Gogs是基于 Go 语言的自助 Git 服务，是一个轻量级的开源跨平台服务软件，轻松搭建自己的git服务。</p>
<span id="more"></span>
<p>搭建gogs有一段时间了，个人的服务主机，在稳定性有可能存在一些问题，平时使用一般使用github,gogs主要用来自动从github同步。</p>
<p>需要对gogs的模板修改，好像只能从启服务才能生效。用的putty对服务器进行维护，但是gogs运行需要进程保护，不然关掉putty后服务就自动停止了，gogs默认需要git用户启动服务，先新建git用户，然后切换用户</p>
<p>$su git</p>
<p>切换后启动服务（在gogs目录下操作）</p>
<p>$nohup .&#x2F;gogs web &amp;</p>
<p>然后就ok了，关闭putty不影响服务</p>
<p>关于重启，需要先结束gogs进程，gogs默认端口位3000，查询端口进程</p>
<p>$lsof -i:3000</p>
<p>然后杀死进程</p>
<p>$kill -9 pid</p>
<p>例如查询到的pid为20833，则执行</p>
<p>$kill -9 20833</p>
<p>然后就可以像上面的一样启动了。</p>
<p>原文链接:<a href="https://zycao.com/gogs%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E5%8F%8A%E9%87%8D%E5%90%AF.html">https://zycao.com/gogs%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E5%8F%8A%E9%87%8D%E5%90%AF.html</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Gogs</tag>
        <tag>代码托管</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github搭建博客</title>
    <url>/xmp-blog/2019/03/15/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="hexo-github搭建博客"><a href="#hexo-github搭建博客" class="headerlink" title="hexo+github搭建博客"></a>hexo+github搭建博客</h1><h2 id="1-搭建基本Hexo博客"><a href="#1-搭建基本Hexo博客" class="headerlink" title="1.搭建基本Hexo博客"></a>1.搭建基本Hexo博客</h2><p>前言：之前博客用的WordPress，插件特别多，结果注意力全在后台配置，浪费时间。使用hexo搭建静态博客，不需要自建服务器，只需要一个github账号，配合github page使用。下面介绍如何搭建。</p>
<span id="more"></span>
<h3 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1.搭建环境"></a>1.搭建环境</h3><p>1、安装 Node.js: <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p><code>windows</code>下点击链接，下载安装即可;<code>Linux</code>下更加简单，在终端下输入<code>sudo apt-get install nodejs</code>即可。</p>
<p>2、安装 Git: <a href="https://github.com/waylau/git-for-win">https://github.com/waylau/git-for-win</a></p>
<p>3、安装完成后，鼠标右键菜单打开“<code>Git Bash</code>”，设置名称和邮箱。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;your name&quot;</span>;</span><br><span class="line">git config --global user.email <span class="string">&quot;your email&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>4、安装<code>Hexo</code>。使用 <code>npm</code>安装<code>Hexo</code>，npm的安装请自行网上查找。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="2-配置github"><a href="#2-配置github" class="headerlink" title="2.配置github"></a>2.配置github</h3><p>首先注册、登录 <a href="https://github.com/">https://github.com/</a> ，其中自己的<code>Username</code>很重要（之后的创建仓库以及博客github.io域名会用到</p>
<p>在本地bash终端生成密钥文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;Github的注册邮箱地址&quot;</span></span><br></pre></td></tr></table></figure>

<p>生成后的<code>id_rsa</code>和<code>id_rsa.pub</code>默认在C:\Users\asus.ssh</p>
<img src="/xmp-blog/2019/03/15/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1552635041728.png" class="" width="1552635041728">

<p>用文本编辑器打开<code>id_rsa.pub</code>，复制全部内容，打开<a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a>点击<code>New SSH key</code>，将复制的内容粘贴到<code>Key</code>,Title任意，点击<code>Add SSH key</code>保存密钥</p>
<img src="/xmp-blog/2019/03/15/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1552635185966.png" class="" width="1552635185966">

<h3 id="3-初始化博客"><a href="#3-初始化博客" class="headerlink" title="3.初始化博客"></a>3.初始化博客</h3><p>在本地电脑任意文件夹新建<code>MyBlog</code>文件夹,进入文件夹，按住<code>Shift</code>打开命令提示符</p>
<img src="/xmp-blog/2019/03/15/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1552635922510.png" class="" width="1552635922510">

<p>输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>稍等片刻初始化完成,初始化完成后文件夹下会生成名字为<code>blog</code>的博客项目，通过任意开发工具(本人使用的<a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>)打开项目，会发现<code>source\_posts</code>目录下默认带有<code>hello world</code>文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate </span><br><span class="line"><span class="comment"># 启动本地服务器</span></span><br><span class="line">$ hexo server</span><br><span class="line"><span class="comment"># 在浏览器输入 http://localhost:4000/就可以看见网页和模板了</span></span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>本地启动成功，浏览器窗口打开<code>http://localhost:4000/</code>，可以看到网站的初始模样</p>
<h3 id="4-配置并初始化博客仓库"><a href="#4-配置并初始化博客仓库" class="headerlink" title="4.配置并初始化博客仓库"></a>4.配置并初始化博客仓库</h3><p>在自己的github里面新建博客仓库,输入仓库名称，例如:<code>xxx-blog</code></p>
<img src="/xmp-blog/2019/03/15/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1552636517975.png" class="" width="1552636517975">



<p>新建博客仓库后复制仓库地址</p>
<img src="/xmp-blog/2019/03/15/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1552636719877.png" class="" width="1552636719877">

<p>打开项目配置文件<code>_config.yml</code>，定位到<code>deploy</code>,将复制的仓库地址粘贴到<code>repo</code>,分支默认选择<code>master</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/xmp2008/xxx-blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>此外，可将<code>_config.yml</code>中的<code>repo</code>修改为如下标准格式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">repo:</span> <span class="string">https://用户名:密码@github.com/用户名/用户名.github.io.git</span></span><br></pre></td></tr></table></figure>
<p>这样做的好处就是每次<code>hexo deploy</code>提交时不需要输入账号密码。<br>定位到URL,修改如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://xxx.github.io/xxx-blog/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/xxx-blog/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure>

<p><code>url</code>里面<code>github</code>前面的<code>xxx</code>对应你的GitHub账号名称</p>
<p>在本地博客项目所在目录打开<code>bash</code>，部署项目到github</p>
<p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>执行<code>hexo d</code>命令后会提示输入github账户密码</p>
<p>注：<code>hexo g</code> &#x3D; <code>hexo generate</code> ，<code>hexo d</code> &#x3D;<code> hexo deploy</code></p>
<p>部署完成后打开博客仓库:</p>
<img src="/xmp-blog/2019/03/15/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1552638792425.png" class="" width="1552638792425">



<h3 id="5-配置Github-Pages"><a href="#5-配置Github-Pages" class="headerlink" title="5.配置Github Pages"></a>5.配置Github Pages</h3><p>打开<code>xxx-blog</code>博客仓库对应到的设置<code>Setting</code>页面</p>
<img src="/xmp-blog/2019/03/15/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1552637596620.png" class="" width="1552637596620">



<p>在GitHub Pages下选择默认的<code>master</code>分支，随后生成博客地址，打开博客地址看能否正常访问，至此博客部署完成</p>
<img src="/xmp-blog/2019/03/15/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1552638937445.png" class="" width="1552638937445">

<p><em>参考文献</em><br> <a href="http://wangwlj.com/2017/09/08/blog_setup/#more">Hexo+GitHub博客搭建实战</a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot+Elasticsearch整合实例</title>
    <url>/xmp-blog/2019/03/15/Springboot-Elasticsearch%E6%95%B4%E5%90%88%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="Springboot-Elasticsearch整合实例"><a href="#Springboot-Elasticsearch整合实例" class="headerlink" title="Springboot+Elasticsearch整合实例"></a>Springboot+Elasticsearch整合实例</h1><p>这篇文章主要介绍Springboot与Elasticsearch整合在一起的简单例子，作为自己学习的一个记录</p>
<h4 id="使用到的工具："><a href="#使用到的工具：" class="headerlink" title="使用到的工具："></a>使用到的工具：</h4><ol>
<li>Spring Boot 1.5.10.RELEASE</li>
<li>Spring Boot Starter Data Elasticsearch 1.5.10.RELEASE</li>
<li>Spring Data Elasticsearch 2.1.10.RELEASE</li>
<li>Elasticsearch 2.4.0</li>
<li>Maven</li>
<li>Java 8<span id="more"></span>
<code>注意 </code>：Spring Boot 1.5.10.RELEASE和Spring Data Elasticsearch 2.1.10.RELEASE只支持Elasticsearch 2.4.0，不支持最新的ElasticSearch 5.x版本<br>详见：<a href="https://github.com/spring-projects/spring-data-elasticsearch/wiki/Spring-Data-Elasticsearch---Spring-Boot---version-matrix">Spring Data Elasticsearch Spring Boot version matrix</a></li>
</ol>
<h2 id="1-项目依赖："><a href="#1-项目依赖：" class="headerlink" title="1.项目依赖："></a>1.项目依赖：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4.0.0</span><br><span class="line"></span><br><span class="line">com.xmp</span><br><span class="line">elasticsearch</span><br><span class="line">0.0.1-SNAPSHOT</span><br><span class="line">jar</span><br><span class="line"></span><br><span class="line">elasticsearch</span><br><span class="line">ElasticsearchDemo project for Spring Boot</span><br><span class="line"></span><br><span class="line">org.springframework.boot</span><br><span class="line">spring-boot-starter-parent</span><br><span class="line">1.5.10.RELEASE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UTF-8UTF-81.8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">org.springframework.boot</span><br><span class="line">spring-boot-starter-data-elasticsearch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">org.springframework.boot</span><br><span class="line">spring-boot-starter-web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">org.projectlombok</span><br><span class="line">lomboktrue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">org.springframework.boot</span><br><span class="line">spring-boot-starter-test</span><br><span class="line">test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">org.springframework.boot</span><br><span class="line">spring-boot-maven-plugin</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\springboot-learning\springboot-elasticsearch&gt;mvn dependency:tree</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Building elasticsearch 0.0.1-SNAPSHOT</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-dependency-plugin:2.10:tree (default-cli) @ elasticsearch ---</span><br><span class="line">[INFO] com.xmp:elasticsearch:jar:0.0.1-SNAPSHOT</span><br><span class="line">[INFO] +- org.springframework.boot:spring-boot-starter-data-elasticsearch:jar:1.5.10.RELEASE:compile</span><br><span class="line">[INFO] | +- org.springframework.boot:spring-boot-starter:jar:1.5.10.RELEASE:compile</span><br><span class="line">[INFO] | | +- org.springframework.boot:spring-boot:jar:1.5.10.RELEASE:compile</span><br><span class="line">[INFO] | | +- org.springframework.boot:spring-boot-autoconfigure:jar:1.5.10.RELEASE:compile</span><br><span class="line">[INFO] | | +- org.springframework.boot:spring-boot-starter-logging:jar:1.5.10.RELEASE:compile</span><br><span class="line">[INFO] | | | +- ch.qos.logback:logback-classic:jar:1.1.11:compile</span><br><span class="line">[INFO] | | | | \- ch.qos.logback:logback-core:jar:1.1.11:compile</span><br><span class="line">[INFO] | | | +- org.slf4j:jul-to-slf4j:jar:1.7.25:compile</span><br><span class="line">[INFO] | | | \- org.slf4j:log4j-over-slf4j:jar:1.7.25:compile</span><br><span class="line">[INFO] | | \- org.yaml:snakeyaml:jar:1.17:compile</span><br><span class="line">[INFO] | \- org.springframework.data:spring-data-elasticsearch:jar:2.1.10.RELEASE:compile</span><br><span class="line">[INFO] | +- org.springframework:spring-context:jar:4.3.14.RELEASE:compile</span><br><span class="line">[INFO] | +- org.springframework:spring-tx:jar:4.3.14.RELEASE:compile</span><br><span class="line">[INFO] | +- org.springframework.data:spring-data-commons:jar:1.13.10.RELEASE:compile</span><br><span class="line">[INFO] | +- commons-lang:commons-lang:jar:2.6:compile</span><br><span class="line">[INFO] | +- joda-time:joda-time:jar:2.9.9:compile</span><br><span class="line">[INFO] | +- org.elasticsearch:elasticsearch:jar:2.4.6:compile</span><br><span class="line">[INFO] | | +- org.apache.lucene:lucene-core:jar:5.5.4:compile</span><br><span class="line">[INFO] | | +- org.apache.lucene:lucene-backward-codecs:jar:5.5.4:compile</span><br><span class="line">[INFO] | | +- org.apache.lucene:lucene-analyzers-common:jar:5.5.4:compile</span><br><span class="line">[INFO] | | +- org.apache.lucene:lucene-queries:jar:5.5.4:compile</span><br><span class="line">[INFO] | | +- org.apache.lucene:lucene-memory:jar:5.5.4:compile</span><br><span class="line">[INFO] | | +- org.apache.lucene:lucene-highlighter:jar:5.5.4:compile</span><br><span class="line">[INFO] | | +- org.apache.lucene:lucene-queryparser:jar:5.5.4:compile</span><br><span class="line">[INFO] | | | \- org.apache.lucene:lucene-sandbox:jar:5.5.4:compile</span><br><span class="line">[INFO] | | +- org.apache.lucene:lucene-suggest:jar:5.5.4:compile</span><br><span class="line">[INFO] | | | \- org.apache.lucene:lucene-misc:jar:5.5.4:compile</span><br><span class="line">[INFO] | | +- org.apache.lucene:lucene-join:jar:5.5.4:compile</span><br><span class="line">[INFO] | | | \- org.apache.lucene:lucene-grouping:jar:5.5.4:compile</span><br><span class="line">[INFO] | | +- org.apache.lucene:lucene-spatial:jar:5.5.4:compile</span><br><span class="line">[INFO] | | | +- org.apache.lucene:lucene-spatial3d:jar:5.5.4:compile</span><br><span class="line">[INFO] | | | \- com.spatial4j:spatial4j:jar:0.5:compile</span><br><span class="line">[INFO] | | +- com.google.guava:guava:jar:18.0:compile</span><br><span class="line">[INFO] | | +- org.elasticsearch:securesm:jar:1.0:compile</span><br><span class="line">[INFO] | | +- com.carrotsearch:hppc:jar:0.7.1:compile</span><br><span class="line">[INFO] | | +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.8.10:compile</span><br><span class="line">[INFO] | | +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.8.10:compile</span><br><span class="line">[INFO] | | +- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.8.10:compile</span><br><span class="line">[INFO] | | +- io.netty:netty:jar:3.10.6.Final:compile</span><br><span class="line">[INFO] | | +- com.ning:compress-lzf:jar:1.0.2:compile</span><br><span class="line">[INFO] | | +- com.tdunning:t-digest:jar:3.0:compile</span><br><span class="line">[INFO] | | +- org.hdrhistogram:HdrHistogram:jar:2.1.6:compile</span><br><span class="line">[INFO] | | +- commons-cli:commons-cli:jar:1.3.1:compile</span><br><span class="line">[INFO] | | \- com.twitter:jsr166e:jar:1.1.0:compile</span><br><span class="line">[INFO] | +- com.fasterxml.jackson.core:jackson-core:jar:2.8.10:compile</span><br><span class="line">[INFO] | +- org.slf4j:slf4j-api:jar:1.7.25:compile</span><br><span class="line">[INFO] | \- org.slf4j:jcl-over-slf4j:jar:1.7.25:compile</span><br><span class="line">[INFO] +- org.springframework.boot:spring-boot-starter-web:jar:1.5.10.RELEASE:compile</span><br><span class="line">[INFO] | +- org.springframework.boot:spring-boot-starter-tomcat:jar:1.5.10.RELEASE:compile</span><br><span class="line">[INFO] | | +- org.apache.tomcat.embed:tomcat-embed-core:jar:8.5.27:compile</span><br><span class="line">[INFO] | | | \- org.apache.tomcat:tomcat-annotations-api:jar:8.5.27:compile</span><br><span class="line">[INFO] | | +- org.apache.tomcat.embed:tomcat-embed-el:jar:8.5.27:compile</span><br><span class="line">[INFO] | | \- org.apache.tomcat.embed:tomcat-embed-websocket:jar:8.5.27:compile</span><br><span class="line">[INFO] | +- org.hibernate:hibernate-validator:jar:5.3.6.Final:compile</span><br><span class="line">[INFO] | | +- javax.validation:validation-api:jar:1.1.0.Final:compile</span><br><span class="line">[INFO] | | +- org.jboss.logging:jboss-logging:jar:3.3.1.Final:compile</span><br><span class="line">[INFO] | | \- com.fasterxml:classmate:jar:1.3.4:compile</span><br><span class="line">[INFO] | +- com.fasterxml.jackson.core:jackson-databind:jar:2.8.10:compile</span><br><span class="line">[INFO] | | \- com.fasterxml.jackson.core:jackson-annotations:jar:2.8.0:compile</span><br><span class="line">[INFO] | +- org.springframework:spring-web:jar:4.3.14.RELEASE:compile</span><br><span class="line">[INFO] | | +- org.springframework:spring-aop:jar:4.3.14.RELEASE:compile</span><br><span class="line">[INFO] | | \- org.springframework:spring-beans:jar:4.3.14.RELEASE:compile</span><br><span class="line">[INFO] | \- org.springframework:spring-webmvc:jar:4.3.14.RELEASE:compile</span><br><span class="line">[INFO] | \- org.springframework:spring-expression:jar:4.3.14.RELEASE:compile</span><br><span class="line">[INFO] +- org.projectlombok:lombok:jar:1.16.20:compile</span><br><span class="line">[INFO] \- org.springframework.boot:spring-boot-starter-test:jar:1.5.10.RELEASE:test</span><br><span class="line">[INFO] +- org.springframework.boot:spring-boot-test:jar:1.5.10.RELEASE:test</span><br><span class="line">[INFO] +- org.springframework.boot:spring-boot-test-autoconfigure:jar:1.5.10.RELEASE:test</span><br><span class="line">[INFO] +- com.jayway.jsonpath:json-path:jar:2.2.0:test</span><br><span class="line">[INFO] | \- net.minidev:json-smart:jar:2.2.1:test</span><br><span class="line">[INFO] | \- net.minidev:accessors-smart:jar:1.1:test</span><br><span class="line">[INFO] | \- org.ow2.asm:asm:jar:5.0.3:test</span><br><span class="line">[INFO] +- junit:junit:jar:4.12:test</span><br><span class="line">[INFO] +- org.assertj:assertj-core:jar:2.6.0:test</span><br><span class="line">[INFO] +- org.mockito:mockito-core:jar:1.10.19:test</span><br><span class="line">[INFO] | \- org.objenesis:objenesis:jar:2.1:test</span><br><span class="line">[INFO] +- org.hamcrest:hamcrest-core:jar:1.3:test</span><br><span class="line">[INFO] +- org.hamcrest:hamcrest-library:jar:1.3:test</span><br><span class="line">[INFO] +- org.skyscreamer:jsonassert:jar:1.4.0:test</span><br><span class="line">[INFO] | \- com.vaadin.external.google:android-json:jar:0.0.20131108.vaadin1:test</span><br><span class="line">[INFO] +- org.springframework:spring-core:jar:4.3.14.RELEASE:compile</span><br><span class="line">[INFO] \- org.springframework:spring-test:jar:4.3.14.RELEASE:test</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 3.010 s</span><br><span class="line">[INFO] Finished at: 2018-03-01T10:12:42+08:00</span><br><span class="line">[INFO] Final Memory: 26M/228M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<h2 id="2-Spring-Data-ElasticSearch-Application"><a href="#2-Spring-Data-ElasticSearch-Application" class="headerlink" title="2. Spring Data ElasticSearch Application"></a>2. Spring Data ElasticSearch Application</h2><p>现在开始Spring Boot + Spring Data + Elasticsearch<br>2.1 编写我们的实体类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xmp.entity;</span><br><span class="line"></span><br><span class="line">import lombok.*;</span><br><span class="line">import org.springframework.data.annotation.Id;</span><br><span class="line">import org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">* @author xiemopeng</span><br><span class="line">* @since 2018/2/27</span><br><span class="line">*/</span><br><span class="line">@ToString</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@Document(indexName = &quot;xmp&quot;, type = &quot;news&quot;)</span><br><span class="line">public class Article implements Serializable &#123;</span><br><span class="line">@Id</span><br><span class="line">private Long id;</span><br><span class="line">/**</span><br><span class="line">* 标题</span><br><span class="line">*/</span><br><span class="line">private String title;</span><br><span class="line">/**</span><br><span class="line">* 摘要</span><br><span class="line">*/</span><br><span class="line">private String abstracts;</span><br><span class="line">/**</span><br><span class="line">* 内容</span><br><span class="line">*/</span><br><span class="line">private String content;</span><br><span class="line">/**</span><br><span class="line">* 发表时间</span><br><span class="line">*/</span><br><span class="line">private Date postTime;</span><br><span class="line">/**</span><br><span class="line">* 点击率</span><br><span class="line">*/</span><br><span class="line">private Long clickCount;</span><br><span class="line">/**</span><br><span class="line">* 作者</span><br><span class="line">*/</span><br><span class="line">private Author author;</span><br><span class="line">/**</span><br><span class="line">* 所属教程</span><br><span class="line">*/</span><br><span class="line">private Tutorial tutorial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xmp.entity;</span><br><span class="line"></span><br><span class="line">import lombok.*;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">* @author xiemopeng</span><br><span class="line">* @since 2018/2/27</span><br><span class="line">*/</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@ToString</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Author implements Serializable &#123;</span><br><span class="line">/**</span><br><span class="line">* 作者id</span><br><span class="line">*/</span><br><span class="line">private Long id;</span><br><span class="line">/**</span><br><span class="line">* 作者姓名</span><br><span class="line">*/</span><br><span class="line">private String name;</span><br><span class="line">/**</span><br><span class="line">* 作者简介</span><br><span class="line">*/</span><br><span class="line">private String remark;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xmp.entity;</span><br><span class="line"></span><br><span class="line">import lombok.*;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">* @author xiemopeng</span><br><span class="line">* @since 2018/2/27</span><br><span class="line">*/</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@ToString</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Tutorial implements Serializable &#123;</span><br><span class="line">private Long id;</span><br><span class="line">private String name;//教程名称</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.2 编写Elasticsearch Repository(dao)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xmp.repository;</span><br><span class="line"></span><br><span class="line">import com.xmp.entity.Article;</span><br><span class="line">import com.xmp.entity.Author;</span><br><span class="line">import org.springframework.data.domain.Page;</span><br><span class="line">import org.springframework.data.domain.Pageable;</span><br><span class="line">import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">* @author xiemopeng</span><br><span class="line">* @since 2018/2/27</span><br><span class="line">*/</span><br><span class="line">public interface ArticleRepository extends ElasticsearchRepository&lt;Article, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">Page</span><br><span class="line"></span><br><span class="line">findByAuthor(Author author, Pageable pageable);</span><br><span class="line">List</span><br><span class="line"></span><br><span class="line">findByTitle(String title);</span><br><span class="line">Page</span><br><span class="line"></span><br><span class="line">findByTitle(String title, Pageable pageable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.3 编写service</p>
<p>老套路，先写需要的接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xmp.service;</span><br><span class="line"></span><br><span class="line">import com.xmp.entity.Article;</span><br><span class="line">import com.xmp.entity.Author;</span><br><span class="line">import org.springframework.data.domain.Page;</span><br><span class="line">import org.springframework.data.domain.PageRequest;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">* @author xiemopeng</span><br><span class="line">* @since 2018/2/27</span><br><span class="line">*/</span><br><span class="line">public interface ArticleService &#123;</span><br><span class="line"></span><br><span class="line">Article save(Article article);</span><br><span class="line"></span><br><span class="line">void delete(Article article);</span><br><span class="line"></span><br><span class="line">Article findOne(Long id);</span><br><span class="line"></span><br><span class="line">Iterable</span><br><span class="line"></span><br><span class="line">findAll();</span><br><span class="line">Page</span><br><span class="line"></span><br><span class="line">findByAuthor(Author author, PageRequest pageRequest);</span><br><span class="line">Page</span><br><span class="line"></span><br><span class="line">findByTitle(String title, PageRequest pageRequest);</span><br><span class="line">List</span><br><span class="line"></span><br><span class="line">findByTitle(String title);</span><br><span class="line">Iterable</span><br><span class="line"></span><br><span class="line">search(String queryString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再写实现类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xmp.service;</span><br><span class="line"></span><br><span class="line">import com.xmp.entity.Article;</span><br><span class="line">import com.xmp.entity.Author;</span><br><span class="line">import com.xmp.repository.ArticleRepository;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.elasticsearch.index.query.QueryStringQueryBuilder;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.domain.Page;</span><br><span class="line">import org.springframework.data.domain.PageRequest;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">* @author xiemopeng</span><br><span class="line">* @since 2018/2/27</span><br><span class="line">*/</span><br><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class ArticleServiceImpl implements ArticleService &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private ArticleRepository articleRepository;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Article save(Article article) &#123;</span><br><span class="line">return articleRepository.save(article);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void delete(Article article) &#123;</span><br><span class="line">articleRepository.delete(article);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Article findOne(Long id) &#123;</span><br><span class="line">return articleRepository.findOne(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Iterable</span><br><span class="line"></span><br><span class="line">findAll() &#123;</span><br><span class="line">return articleRepository.findAll();</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public Page</span><br><span class="line"></span><br><span class="line">findByAuthor(Author author, PageRequest pageRequest) &#123;</span><br><span class="line">return articleRepository.findByAuthor(author, pageRequest);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public Page</span><br><span class="line"></span><br><span class="line">findByTitle(String title, PageRequest pageRequest) &#123;</span><br><span class="line">return articleRepository.findByTitle(title, pageRequest);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public List</span><br><span class="line"></span><br><span class="line">findByTitle(String title) &#123;</span><br><span class="line">return articleRepository.findByTitle(title);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public Iterable</span><br><span class="line"></span><br><span class="line">search(String queryString) &#123;</span><br><span class="line">QueryStringQueryBuilder builder = new QueryStringQueryBuilder(queryString);</span><br><span class="line">return articleRepository.search(builder);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.4 配置Elasticsearch<br><code>application.yml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">elasticsearch:</span><br><span class="line">clustername: xmp-cluster</span><br><span class="line">host: localhost</span><br><span class="line">port: 9300</span><br></pre></td></tr></table></figure>
<p>2.5 编写springboot配置，连接Elasticsearch集群</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xmp.config;</span><br><span class="line"></span><br><span class="line">import org.elasticsearch.client.Client;</span><br><span class="line">import org.elasticsearch.client.transport.TransportClient;</span><br><span class="line">import org.elasticsearch.common.settings.Settings;</span><br><span class="line">import org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.elasticsearch.core.ElasticsearchOperations;</span><br><span class="line">import org.springframework.data.elasticsearch.core.ElasticsearchTemplate;</span><br><span class="line">import org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;</span><br><span class="line"></span><br><span class="line">import java.net.InetAddress;</span><br><span class="line"></span><br><span class="line">//http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-nosql.html#boot-features-connecting-to-elasticsearch-spring-data</span><br><span class="line">//https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-data-elasticsearch/src/main/java/sample/data/elasticsearch</span><br><span class="line">//http://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#elasticsearch.repositories</span><br><span class="line">//http://geekabyte.blogspot.my/2015/08/embedding-elasticsearch-in-spring.html</span><br><span class="line">//https://github.com/spring-projects/spring-data-elasticsearch/wiki/Spring-Data-Elasticsearch---Spring-Boot---version-matrix</span><br><span class="line">@Configuration</span><br><span class="line">@EnableElasticsearchRepositories(basePackages = &quot;com.xmp.repository&quot;)</span><br><span class="line">public class EsConfig &#123;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;elasticsearch.host&#125;&quot;)</span><br><span class="line">private String EsHost;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;elasticsearch.port&#125;&quot;)</span><br><span class="line">private int EsPort;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;elasticsearch.clustername&#125;&quot;)</span><br><span class="line">private String EsClusterName;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public Client client() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">Settings esSettings = Settings.settingsBuilder()</span><br><span class="line">.put(&quot;cluster.name&quot;, EsClusterName)</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">//https://www.elastic.co/guide/en/elasticsearch/guide/current/_transport_client_versus_node_client.html</span><br><span class="line">return TransportClient.builder()</span><br><span class="line">.settings(esSettings)</span><br><span class="line">.build()</span><br><span class="line">.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(EsHost), EsPort));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public ElasticsearchOperations elasticsearchTemplate() throws Exception &#123;</span><br><span class="line">return new ElasticsearchTemplate(client());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Embedded Elasticsearch Server</span><br><span class="line">/*@Bean</span><br><span class="line">public ElasticsearchOperations elasticsearchTemplate() &#123;</span><br><span class="line">return new ElasticsearchTemplate(nodeBuilder().local(true).node().client());</span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-Run-Spring-Boot-Application"><a href="#3-Run-Spring-Boot-Application" class="headerlink" title="3. Run Spring Boot Application"></a>3. Run Spring Boot Application</h2><p>3.1 运行这个demo，需要按照以下几步<br>1: 安装 Java 设置 JAVA_HOME 和 PATH variables.<br>2: 安装 Maven.<br>3: 安装<a href="https://www.elastic.co/downloads/past-releases/elasticsearch-2-4-0">Elasticsearch2.4.0</a><br>配置 ELASTICSEARCH_HOME &#x3D; C:\elasticsearch-2.4.0<br>4:配置 ElasticSearch Cluster<br>打开 ${ELASTICSEARCH_HOME}\config\elasticsearch.yml 添加如下参数<br><code>cluster.name: xmp-cluster</code></p>
<h2 id="5-运行项目"><a href="#5-运行项目" class="headerlink" title="5: 运行项目"></a>5: 运行项目</h2><p>5.2 运行项目，会插入10条信息到elasticsearch服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.xmp;</span><br><span class="line"></span><br><span class="line">import com.xmp.entity.Article;</span><br><span class="line">import com.xmp.entity.Author;</span><br><span class="line">import com.xmp.entity.Tutorial;</span><br><span class="line">import com.xmp.service.ArticleService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.elasticsearch.client.Client;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.CommandLineRunner;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.data.domain.Page;</span><br><span class="line">import org.springframework.data.domain.PageRequest;</span><br><span class="line">import org.springframework.data.elasticsearch.core.ElasticsearchOperations;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ElasticsearchApplication implements CommandLineRunner &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private ElasticsearchOperations es;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private ArticleService articleService;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(ElasticsearchApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run(String... strings) throws Exception &#123;</span><br><span class="line">printElasticSearchInfo();</span><br><span class="line">//插入10条信息</span><br><span class="line">for (long i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">Author author = new Author(null, &quot;xmp&quot;, null);</span><br><span class="line">// System.out.println(author);</span><br><span class="line">Tutorial tutorial = new Tutorial(i, &quot;test&quot; + String.valueOf(i));</span><br><span class="line">Article article = new Article(i, &quot;title&quot;, &quot;abs&quot;, &quot;content&quot;, new Date(), i, author, tutorial);</span><br><span class="line">articleService.save(article);</span><br><span class="line">&#125;</span><br><span class="line">//fuzzey search</span><br><span class="line">Page</span><br><span class="line"></span><br><span class="line">articles = articleService.findByTitle(&quot;title&quot;, new PageRequest(0, 5));</span><br><span class="line">List</span><br><span class="line"></span><br><span class="line">articleList = articleService.findByTitle(&quot;title&quot;);</span><br><span class="line">// articles.forEach(x -&gt; System.out.println(x));</span><br><span class="line">// articleList.forEach(article -&gt; &#123;</span><br><span class="line">// System.out.println(article);</span><br><span class="line">// &#125;);</span><br><span class="line"></span><br><span class="line">String queryString = &quot;test1&quot;;//搜索关键字</span><br><span class="line">Iterable</span><br><span class="line"></span><br><span class="line">searchResult = articleService.search(queryString);</span><br><span class="line">Iterator</span><br><span class="line">iterator = searchResult.iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">private void printElasticSearchInfo() &#123;</span><br><span class="line">log.info(&quot;--ElasticSearch--&gt;&quot;);</span><br><span class="line">Client client = es.getClient();</span><br><span class="line">Map&lt;String, String&gt; asMap = client.settings().getAsMap();</span><br><span class="line">asMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">log.info(k + &quot;=&quot; + v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk1.8.0_121\bin\java&quot; -Dspring.output.ansi.enabled=always -Didea.launcher.port=7537 &quot;-Didea.launcher.bin.path=C:\Program Files (x86)\JetBrains\IntelliJ IDEA 2016.3.5\bin&quot; -Dfile.encoding=UTF-8 -classpath &quot;C:\Program Files\Java\jdk1.8.0_121\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_121\jre\lib\rt.jar;D:\springboot-learning\springboot-elasticsearch\target\classes;D:\repository\org\springframework\boot\spring-boot-starter-data-elasticsearch\1.5.10.RELEASE\spring-boot-starter-data-elasticsearch-1.5.10.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot-starter\1.5.10.RELEASE\spring-boot-starter-1.5.10.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot\1.5.10.RELEASE\spring-boot-1.5.10.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot-autoconfigure\1.5.10.RELEASE\spring-boot-autoconfigure-1.5.10.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot-starter-logging\1.5.10.RELEASE\spring-boot-starter-logging-1.5.10.RELEASE.jar;D:\repository\ch\qos\logback\logback-classic\1.1.11\logback-classic-1.1.11.jar;D:\repository\ch\qos\logback\logback-core\1.1.11\logback-core-1.1.11.jar;D:\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;D:\repository\org\slf4j\log4j-over-slf4j\1.7.25\log4j-over-slf4j-1.7.25.jar;D:\repository\org\yaml\snakeyaml\1.17\snakeyaml-1.17.jar;D:\repository\org\springframework\data\spring-data-elasticsearch\2.1.10.RELEASE\spring-data-elasticsearch-2.1.10.RELEASE.jar;D:\repository\org\springframework\spring-context\4.3.14.RELEASE\spring-context-4.3.14.RELEASE.jar;D:\repository\org\springframework\spring-tx\4.3.14.RELEASE\spring-tx-4.3.14.RELEASE.jar;D:\repository\org\springframework\data\spring-data-commons\1.13.10.RELEASE\spring-data-commons-1.13.10.RELEASE.jar;D:\repository\commons-lang\commons-lang\2.6\commons-lang-2.6.jar;D:\repository\joda-time\joda-time\2.9.9\joda-time-2.9.9.jar;D:\repository\org\elasticsearch\elasticsearch\2.4.6\elasticsearch-2.4.6.jar;D:\repository\org\apache\lucene\lucene-core\5.5.4\lucene-core-5.5.4.jar;D:\repository\org\apache\lucene\lucene-backward-codecs\5.5.4\lucene-backward-codecs-5.5.4.jar;D:\repository\org\apache\lucene\lucene-analyzers-common\5.5.4\lucene-analyzers-common-5.5.4.jar;D:\repository\org\apache\lucene\lucene-queries\5.5.4\lucene-queries-5.5.4.jar;D:\repository\org\apache\lucene\lucene-memory\5.5.4\lucene-memory-5.5.4.jar;D:\repository\org\apache\lucene\lucene-highlighter\5.5.4\lucene-highlighter-5.5.4.jar;D:\repository\org\apache\lucene\lucene-queryparser\5.5.4\lucene-queryparser-5.5.4.jar;D:\repository\org\apache\lucene\lucene-sandbox\5.5.4\lucene-sandbox-5.5.4.jar;D:\repository\org\apache\lucene\lucene-suggest\5.5.4\lucene-suggest-5.5.4.jar;D:\repository\org\apache\lucene\lucene-misc\5.5.4\lucene-misc-5.5.4.jar;D:\repository\org\apache\lucene\lucene-join\5.5.4\lucene-join-5.5.4.jar;D:\repository\org\apache\lucene\lucene-grouping\5.5.4\lucene-grouping-5.5.4.jar;D:\repository\org\apache\lucene\lucene-spatial\5.5.4\lucene-spatial-5.5.4.jar;D:\repository\org\apache\lucene\lucene-spatial3d\5.5.4\lucene-spatial3d-5.5.4.jar;D:\repository\com\spatial4j\spatial4j\0.5\spatial4j-0.5.jar;D:\repository\com\google\guava\guava\18.0\guava-18.0.jar;D:\repository\org\elasticsearch\securesm\1.0\securesm-1.0.jar;D:\repository\com\carrotsearch\hppc\0.7.1\hppc-0.7.1.jar;D:\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-smile\2.8.10\jackson-dataformat-smile-2.8.10.jar;D:\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.8.10\jackson-dataformat-yaml-2.8.10.jar;D:\repository\com\fasterxml\jackson\dataformat\jackson-dataformat-cbor\2.8.10\jackson-dataformat-cbor-2.8.10.jar;D:\repository\io\netty\netty\3.10.6.Final\netty-3.10.6.Final.jar;D:\repository\com\ning\compress-lzf\1.0.2\compress-lzf-1.0.2.jar;D:\repository\com\tdunning\t-digest\3.0\t-digest-3.0.jar;D:\repository\org\hdrhistogram\HdrHistogram\2.1.6\HdrHistogram-2.1.6.jar;D:\repository\commons-cli\commons-cli\1.3.1\commons-cli-1.3.1.jar;D:\repository\com\twitter\jsr166e\1.1.0\jsr166e-1.1.0.jar;D:\repository\com\fasterxml\jackson\core\jackson-core\2.8.10\jackson-core-2.8.10.jar;D:\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;D:\repository\org\slf4j\jcl-over-slf4j\1.7.25\jcl-over-slf4j-1.7.25.jar;D:\repository\org\springframework\boot\spring-boot-starter-web\1.5.10.RELEASE\spring-boot-starter-web-1.5.10.RELEASE.jar;D:\repository\org\springframework\boot\spring-boot-starter-tomcat\1.5.10.RELEASE\spring-boot-starter-tomcat-1.5.10.RELEASE.jar;D:\repository\org\apache\tomcat\embed\tomcat-embed-core\8.5.27\tomcat-embed-core-8.5.27.jar;D:\repository\org\apache\tomcat\tomcat-annotations-api\8.5.27\tomcat-annotations-api-8.5.27.jar;D:\repository\org\apache\tomcat\embed\tomcat-embed-el\8.5.27\tomcat-embed-el-8.5.27.jar;D:\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.5.27\tomcat-embed-websocket-8.5.27.jar;D:\repository\org\hibernate\hibernate-validator\5.3.6.Final\hibernate-validator-5.3.6.Final.jar;D:\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;D:\repository\org\jboss\logging\jboss-logging\3.3.1.Final\jboss-logging-3.3.1.Final.jar;D:\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;D:\repository\com\fasterxml\jackson\core\jackson-databind\2.8.10\jackson-databind-2.8.10.jar;D:\repository\com\fasterxml\jackson\core\jackson-annotations\2.8.0\jackson-annotations-2.8.0.jar;D:\repository\org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar;D:\repository\org\springframework\spring-aop\4.3.14.RELEASE\spring-aop-4.3.14.RELEASE.jar;D:\repository\org\springframework\spring-beans\4.3.14.RELEASE\spring-beans-4.3.14.RELEASE.jar;D:\repository\org\springframework\spring-webmvc\4.3.14.RELEASE\spring-webmvc-4.3.14.RELEASE.jar;D:\repository\org\springframework\spring-expression\4.3.14.RELEASE\spring-expression-4.3.14.RELEASE.jar;D:\repository\org\projectlombok\lombok\1.16.20\lombok-1.16.20.jar;D:\repository\org\springframework\spring-core\4.3.14.RELEASE\spring-core-4.3.14.RELEASE.jar;C:\Program Files (x86)\JetBrains\IntelliJ IDEA 2016.3.5\lib\idea_rt.jar&quot; com.intellij.rt.execution.application.AppMain com.xmp.ElasticsearchApplication</span><br><span class="line"></span><br><span class="line">. ____ _ __ _ _</span><br><span class="line">/\\ / ___&#x27;_ __ _ _(_)_ __ __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line">\\/ ___)| |_)| | | | | || (_| | ) ) ) )</span><br><span class="line">&#x27; |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line">=========|_|==============|___/=/_/_/_/</span><br><span class="line">:: Spring Boot :: (v1.5.10.RELEASE)</span><br><span class="line"></span><br><span class="line">2018-03-01 11:31:42.443 INFO 19000 --- [ main] com.xmp.ElasticsearchApplication : Starting ElasticsearchApplication on DESKTOP-AC6RJ04 with PID 19000 (D:\springboot-learning\springboot-elasticsearch\target\classes started by asus in D:\springboot-learning\springboot-elasticsearch)</span><br><span class="line">2018-03-01 11:31:42.448 INFO 19000 --- [ main] com.xmp.ElasticsearchApplication : The following profiles are active: local</span><br><span class="line">2018-03-01 11:31:42.580 INFO 19000 --- [ main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@7f552bd3: startup date [Thu Mar 01 11:31:42 CST 2018]; root of context hierarchy</span><br><span class="line">2018-03-01 11:31:44.167 INFO 19000 --- [ main] o.s.b.f.s.DefaultListableBeanFactory : Overriding bean definition for bean &#x27;elasticsearchTemplate&#x27; with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=esConfig; factoryMethodName=elasticsearchTemplate; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [com/xmp/config/EsConfig.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration; factoryMethodName=elasticsearchTemplate; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchDataAutoConfiguration.class]]</span><br><span class="line">2018-03-01 11:31:47.184 INFO 19000 --- [ main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2018-03-01 11:31:47.211 INFO 19000 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat]</span><br><span class="line">2018-03-01 11:31:47.213 INFO 19000 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet Engine: Apache Tomcat/8.5.27</span><br><span class="line">2018-03-01 11:31:47.460 INFO 19000 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2018-03-01 11:31:47.461 INFO 19000 --- [ost-startStop-1] o.s.web.context.ContextLoader : Root WebApplicationContext: initialization completed in 4901 ms</span><br><span class="line">2018-03-01 11:31:47.721 INFO 19000 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean : Mapping servlet: &#x27;dispatcherServlet&#x27; to [/]</span><br><span class="line">2018-03-01 11:31:47.729 INFO 19000 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: &#x27;characterEncodingFilter&#x27; to: [/*]</span><br><span class="line">2018-03-01 11:31:47.729 INFO 19000 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: &#x27;hiddenHttpMethodFilter&#x27; to: [/*]</span><br><span class="line">2018-03-01 11:31:47.729 INFO 19000 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: &#x27;httpPutFormContentFilter&#x27; to: [/*]</span><br><span class="line">2018-03-01 11:31:47.729 INFO 19000 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean : Mapping filter: &#x27;requestContextFilter&#x27; to: [/*]</span><br><span class="line">2018-03-01 11:31:48.334 INFO 19000 --- [ main] org.elasticsearch.plugins : [Death&#x27;s Head II] modules [], plugins [], sites []</span><br><span class="line">2018-03-01 11:31:50.385 INFO 19000 --- [ main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@7f552bd3: startup date [Thu Mar 01 11:31:42 CST 2018]; root of context hierarchy</span><br><span class="line">2018-03-01 11:31:50.498 INFO 19000 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error]&#125;&quot; onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)</span><br><span class="line">2018-03-01 11:31:50.501 INFO 19000 --- [ main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error],produces=[text/html]&#125;&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</span><br><span class="line">2018-03-01 11:31:50.548 INFO 19000 --- [ main] o.s.w.s.handler.SimpleUrlHandlerMapping : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2018-03-01 11:31:50.549 INFO 19000 --- [ main] o.s.w.s.handler.SimpleUrlHandlerMapping : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2018-03-01 11:31:50.629 INFO 19000 --- [ main] o.s.w.s.handler.SimpleUrlHandlerMapping : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2018-03-01 11:31:50.982 INFO 19000 --- [ main] o.s.j.e.a.AnnotationMBeanExporter : Registering beans for JMX exposure on startup</span><br><span class="line">2018-03-01 11:31:51.074 INFO 19000 --- [ main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</span><br><span class="line">2018-03-01 11:31:51.080 INFO 19000 --- [ main] com.xmp.ElasticsearchApplication : --ElasticSearch--&gt;</span><br><span class="line">2018-03-01 11:31:51.080 INFO 19000 --- [ main] com.xmp.ElasticsearchApplication : client.type=transport</span><br><span class="line">2018-03-01 11:31:51.081 INFO 19000 --- [ main] com.xmp.ElasticsearchApplication : cluster.name=xmp-cluster</span><br><span class="line">2018-03-01 11:31:51.081 INFO 19000 --- [ main] com.xmp.ElasticsearchApplication : name=Death&#x27;s Head II</span><br><span class="line">2018-03-01 11:31:51.081 INFO 19000 --- [ main] com.xmp.ElasticsearchApplication : network.server=false</span><br><span class="line">2018-03-01 11:31:51.081 INFO 19000 --- [ main] com.xmp.ElasticsearchApplication : node.client=true</span><br><span class="line">2018-03-01 11:31:51.081 INFO 19000 --- [ main] com.xmp.ElasticsearchApplication : transport.ping_schedule=5s</span><br><span class="line">Article(id=0, title=title, abstracts=abs, content=content, postTime=Thu Mar 01 11:31:51 CST 2018, clickCount=0, author=Author(id=null, name=xmp, remark=null), tutorial=Tutorial(id=0, name=test0))</span><br><span class="line">Article(id=5, title=title, abstracts=abs, content=content, postTime=Thu Mar 01 11:31:52 CST 2018, clickCount=5, author=Author(id=null, name=xmp, remark=null), tutorial=Tutorial(id=5, name=test5))</span><br><span class="line">Article(id=8, title=title, abstracts=abs, content=content, postTime=Thu Mar 01 11:31:52 CST 2018, clickCount=8, author=Author(id=null, name=xmp, remark=null), tutorial=Tutorial(id=8, name=test8))</span><br><span class="line">Article(id=9, title=title, abstracts=abs, content=content, postTime=Thu Mar 01 11:31:53 CST 2018, clickCount=9, author=Author(id=null, name=xmp, remark=null), tutorial=Tutorial(id=9, name=test9))</span><br><span class="line">Article(id=2, title=title, abstracts=abs, content=content, postTime=Thu Mar 01 11:31:52 CST 2018, clickCount=2, author=Author(id=null, name=xmp, remark=null), tutorial=Tutorial(id=2, name=test2))</span><br><span class="line">Article(id=4, title=title, abstracts=abs, content=content, postTime=Thu Mar 01 11:31:52 CST 2018, clickCount=4, author=Author(id=null, name=xmp, remark=null), tutorial=Tutorial(id=4, name=test4))</span><br><span class="line">Article(id=6, title=title, abstracts=abs, content=content, postTime=Thu Mar 01 11:31:52 CST 2018, clickCount=6, author=Author(id=null, name=xmp, remark=null), tutorial=Tutorial(id=6, name=test6))</span><br><span class="line">Article(id=1, title=title, abstracts=abs, content=content, postTime=Thu Mar 01 11:31:51 CST 2018, clickCount=1, author=Author(id=null, name=xmp, remark=null), tutorial=Tutorial(id=1, name=test1))</span><br><span class="line">Article(id=7, title=title, abstracts=abs, content=content, postTime=Thu Mar 01 11:31:52 CST 2018, clickCount=7, author=Author(id=null, name=xmp, remark=null), tutorial=Tutorial(id=7, name=test7))</span><br><span class="line">Article(id=3, title=title, abstracts=abs, content=content, postTime=Thu Mar 01 11:31:52 CST 2018, clickCount=3, author=Author(id=null, name=xmp, remark=null), tutorial=Tutorial(id=3, name=test3))</span><br><span class="line">2018-03-01 11:31:53.335 INFO 19000 --- [ main] com.xmp.ElasticsearchApplication : Started ElasticsearchApplication in 12.028 seconds (JVM running for 13.188)</span><br></pre></td></tr></table></figure>
<p>When we run the application, our data is stored at ${ELASTICSEARCH_HOME}\data\mkyong-cluster.<br>5.3 Maven package and run it.<br><code> $ mvn clean package</code><br><code>$ java -jar target/elasticsearch-0.0.1-SNAPSHOT.jar </code></p>
<p>5.4 Test with cURL tool.<br>Terminal:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl &quot;http://localhost:9200/xmp/news/_search?pretty=true&quot;</span><br><span class="line">% Total % Received % Xferd Average Speed Time Time Time Current</span><br><span class="line">Dload Upload Total Spent Left Speed</span><br><span class="line">0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0&#123;</span><br><span class="line">&quot;took&quot; : 5,</span><br><span class="line">&quot;timed_out&quot; : false,</span><br><span class="line">&quot;_shards&quot; : &#123;</span><br><span class="line">&quot;total&quot; : 5,</span><br><span class="line">&quot;successful&quot; : 5,</span><br><span class="line">&quot;failed&quot; : 0</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hits&quot; : &#123;</span><br><span class="line">&quot;total&quot; : 10,</span><br><span class="line">&quot;max_score&quot; : 1.0,</span><br><span class="line">&quot;hits&quot; : [ &#123;</span><br><span class="line">&quot;_index&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;_type&quot; : &quot;news&quot;,</span><br><span class="line">&quot;_id&quot; : &quot;0&quot;,</span><br><span class="line">&quot;_score&quot; : 1.0,</span><br><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 0,</span><br><span class="line">&quot;title&quot; : &quot;title&quot;,</span><br><span class="line">&quot;abstracts&quot; : &quot;abs&quot;,</span><br><span class="line">&quot;content&quot; : &quot;content&quot;,</span><br><span class="line">&quot;postTime&quot; : 1519875605867,</span><br><span class="line">&quot;clickCount&quot; : 0,</span><br><span class="line">&quot;author&quot; : &#123;</span><br><span class="line">&quot;id&quot; : null,</span><br><span class="line">&quot;name&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;remark&quot; : null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tutorial&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 0,</span><br><span class="line">&quot;name&quot; : &quot;test0&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;_index&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;_type&quot; : &quot;news&quot;,</span><br><span class="line">&quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">&quot;_score&quot; : 1.0,</span><br><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 5,</span><br><span class="line">&quot;title&quot; : &quot;title&quot;,</span><br><span class="line">&quot;abstracts&quot; : &quot;abs&quot;,</span><br><span class="line">&quot;content&quot; : &quot;content&quot;,</span><br><span class="line">&quot;postTime&quot; : 1519875607354,</span><br><span class="line">&quot;clickCount&quot; : 5,</span><br><span class="line">&quot;author&quot; : &#123;</span><br><span class="line">&quot;id&quot; : null,</span><br><span class="line">&quot;name&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;remark&quot; : null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tutorial&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 5,</span><br><span class="line">&quot;name&quot; : &quot;test5&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;_index&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;_type&quot; : &quot;news&quot;,</span><br><span class="line">&quot;_id&quot; : &quot;8&quot;,</span><br><span class="line">&quot;_score&quot; : 1.0,</span><br><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 8,</span><br><span class="line">&quot;title&quot; : &quot;title&quot;,</span><br><span class="line">&quot;abstracts&quot; : &quot;abs&quot;,</span><br><span class="line">&quot;content&quot; : &quot;content&quot;,</span><br><span class="line">&quot;postTime&quot; : 1519875608116,</span><br><span class="line">&quot;clickCount&quot; : 8,</span><br><span class="line">&quot;author&quot; : &#123;</span><br><span class="line">&quot;id&quot; : null,</span><br><span class="line">&quot;name&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;remark&quot; : null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tutorial&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 8,</span><br><span class="line">&quot;name&quot; : &quot;test8&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;_index&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;_type&quot; : &quot;news&quot;,</span><br><span class="line">&quot;_id&quot; : &quot;9&quot;,</span><br><span class="line">&quot;_score&quot; : 1.0,</span><br><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 9,</span><br><span class="line">&quot;title&quot; : &quot;title&quot;,</span><br><span class="line">&quot;abstracts&quot; : &quot;abs&quot;,</span><br><span class="line">&quot;content&quot; : &quot;content&quot;,</span><br><span class="line">&quot;postTime&quot; : 1519875608240,</span><br><span class="line">&quot;clickCount&quot; : 9,</span><br><span class="line">&quot;author&quot; : &#123;</span><br><span class="line">&quot;id&quot; : null,</span><br><span class="line">&quot;name&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;remark&quot; : null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tutorial&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 9,</span><br><span class="line">&quot;name&quot; : &quot;test9&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;_index&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;_type&quot; : &quot;news&quot;,</span><br><span class="line">&quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">&quot;_score&quot; : 1.0,</span><br><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 2,</span><br><span class="line">&quot;title&quot; : &quot;title&quot;,</span><br><span class="line">&quot;abstracts&quot; : &quot;abs&quot;,</span><br><span class="line">&quot;content&quot; : &quot;content&quot;,</span><br><span class="line">&quot;postTime&quot; : 1519875606420,</span><br><span class="line">&quot;clickCount&quot; : 2,</span><br><span class="line">&quot;author&quot; : &#123;</span><br><span class="line">&quot;id&quot; : null,</span><br><span class="line">&quot;name&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;remark&quot; : null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tutorial&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 2,</span><br><span class="line">&quot;name&quot; : &quot;test2&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;_index&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;_type&quot; : &quot;news&quot;,</span><br><span class="line">&quot;_id&quot; : &quot;4&quot;,</span><br><span class="line">&quot;_score&quot; : 1.0,</span><br><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 4,</span><br><span class="line">&quot;title&quot; : &quot;title&quot;,</span><br><span class="line">&quot;abstracts&quot; : &quot;abs&quot;,</span><br><span class="line">&quot;content&quot; : &quot;content&quot;,</span><br><span class="line">&quot;postTime&quot; : 1519875606995,</span><br><span class="line">&quot;clickCount&quot; : 4,</span><br><span class="line">&quot;author&quot; : &#123;</span><br><span class="line">&quot;id&quot; : null,</span><br><span class="line">&quot;name&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;remark&quot; : null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tutorial&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 4,</span><br><span class="line">&quot;name&quot; : &quot;test4&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;_index&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;_type&quot; : &quot;news&quot;,</span><br><span class="line">&quot;_id&quot; : &quot;6&quot;,</span><br><span class="line">&quot;_score&quot; : 1.0,</span><br><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 6,</span><br><span class="line">&quot;title&quot; : &quot;title&quot;,</span><br><span class="line">&quot;abstracts&quot; : &quot;abs&quot;,</span><br><span class="line">&quot;content&quot; : &quot;content&quot;,</span><br><span class="line">&quot;postTime&quot; : 1519875607634,</span><br><span class="line">&quot;clickCount&quot; : 6,</span><br><span class="line">&quot;author&quot; : &#123;</span><br><span class="line">&quot;id&quot; : null,</span><br><span class="line">&quot;name&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;remark&quot; : null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tutorial&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 6,</span><br><span class="line">&quot;name&quot; : &quot;test6&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;_index&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;_type&quot; : &quot;news&quot;,</span><br><span class="line">&quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">&quot;_score&quot; : 1.0,</span><br><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 1,</span><br><span class="line">&quot;title&quot; : &quot;title&quot;,</span><br><span class="line">&quot;abstracts&quot; : &quot;abs&quot;,</span><br><span class="line">&quot;content&quot; : &quot;content&quot;,</span><br><span class="line">&quot;postTime&quot; : 1519875606181,</span><br><span class="line">&quot;clickCount&quot; : 1,</span><br><span class="line">&quot;author&quot; : &#123;</span><br><span class="line">&quot;id&quot; : null,</span><br><span class="line">&quot;name&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;remark&quot; : null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tutorial&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 1,</span><br><span class="line">&quot;name&quot; : &quot;test1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;_index&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;_type&quot; : &quot;news&quot;,</span><br><span class="line">&quot;_id&quot; : &quot;7&quot;,</span><br><span class="line">100 4992 100 4992 0 0 325k 0 --:--:-- --:--:-- --:--:-- 4875k &quot;_score&quot; : 1.0,</span><br><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 7,</span><br><span class="line">&quot;title&quot; : &quot;title&quot;,</span><br><span class="line">&quot;abstracts&quot; : &quot;abs&quot;,</span><br><span class="line">&quot;content&quot; : &quot;content&quot;,</span><br><span class="line">&quot;postTime&quot; : 1519875607923,</span><br><span class="line">&quot;clickCount&quot; : 7,</span><br><span class="line">&quot;author&quot; : &#123;</span><br><span class="line">&quot;id&quot; : null,</span><br><span class="line">&quot;name&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;remark&quot; : null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tutorial&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 7,</span><br><span class="line">&quot;name&quot; : &quot;test7&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;_index&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;_type&quot; : &quot;news&quot;,</span><br><span class="line">&quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">&quot;_score&quot; : 1.0,</span><br><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 3,</span><br><span class="line">&quot;title&quot; : &quot;title&quot;,</span><br><span class="line">&quot;abstracts&quot; : &quot;abs&quot;,</span><br><span class="line">&quot;content&quot; : &quot;content&quot;,</span><br><span class="line">&quot;postTime&quot; : 1519875606716,</span><br><span class="line">&quot;clickCount&quot; : 3,</span><br><span class="line">&quot;author&quot; : &#123;</span><br><span class="line">&quot;id&quot; : null,</span><br><span class="line">&quot;name&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;remark&quot; : null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tutorial&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 3,</span><br><span class="line">&quot;name&quot; : &quot;test3&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Terminal:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl &quot;http://localhost:9200/xmp/news/_search?q=_id:3&amp;pretty=true&quot;</span><br><span class="line">% Total % Received % Xferd Average Speed Time Time Time Current</span><br><span class="line">Dload Upload Total Spent Left Speed</span><br><span class="line">100 672 100 672 0 0 10666 0 --:--:-- --:--:-- --:--:-- 14297&#123;</span><br><span class="line">&quot;took&quot; : 22,</span><br><span class="line">&quot;timed_out&quot; : false,</span><br><span class="line">&quot;_shards&quot; : &#123;</span><br><span class="line">&quot;total&quot; : 5,</span><br><span class="line">&quot;successful&quot; : 5,</span><br><span class="line">&quot;failed&quot; : 0</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hits&quot; : &#123;</span><br><span class="line">&quot;total&quot; : 1,</span><br><span class="line">&quot;max_score&quot; : 1.0,</span><br><span class="line">&quot;hits&quot; : [ &#123;</span><br><span class="line">&quot;_index&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;_type&quot; : &quot;news&quot;,</span><br><span class="line">&quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">&quot;_score&quot; : 1.0,</span><br><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 3,</span><br><span class="line">&quot;title&quot; : &quot;title&quot;,</span><br><span class="line">&quot;abstracts&quot; : &quot;abs&quot;,</span><br><span class="line">&quot;content&quot; : &quot;content&quot;,</span><br><span class="line">&quot;postTime&quot; : 1519875606716,</span><br><span class="line">&quot;clickCount&quot; : 3,</span><br><span class="line">&quot;author&quot; : &#123;</span><br><span class="line">&quot;id&quot; : null,</span><br><span class="line">&quot;name&quot; : &quot;xmp&quot;,</span><br><span class="line">&quot;remark&quot; : null</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tutorial&quot; : &#123;</span><br><span class="line">&quot;id&quot; : 3,</span><br><span class="line">&quot;name&quot; : &quot;test3&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.mkyong.com/spring-boot/spring-boot-spring-data-elasticsearch-example/">参考文章</a></p>
]]></content>
      <categories>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 设置阅读全文</title>
    <url>/xmp-blog/2019/03/15/hexo-%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/</url>
    <content><![CDATA[<ol>
<li>在文章中使用&lt; !–more–&gt; 手动进行截断</li>
<li>在文章中的front-matter中添加description，并提供文章摘录<br>这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。</li>
<li>自动形成摘要，在主题配置文件中添加<br>默认截取的长度为 150 字符，可以根据需要自行设定 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客优化</title>
    <url>/xmp-blog/2019/03/15/hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>本文目录<br>更换Hexo主题<br>设置Hexo主题模式<br>设置预览摘要<br>添加评论功能<br>设置侧边栏显示效果<br>添加菜单选项<br>添加阅读次数统计<br>添加社交链接<br>添加友情链接功能<br>设置博文内链接为蓝色<br>设置文章末尾”本文结束”标记<br>显示每篇文章字数<br>显示站点文章总字数<br>文章末尾添加版权说明<br>设置个人头像<br>设置头像动态特效<br>设置网站图标<br>添加留言版块<br>项目主页添加README<br>实现fork me on github<br>实现点击出现桃心效果<br>修改文章底部的#号标签<br>添加动态背景<br>代码块样式自定义<br>文章加密访问<br>添加jiathis分享<br>自定义鼠标样式<br>支持mathjax公式<br>修改字体颜色&#x2F;大小&#x2F;背景色<br>实现首行缩进<br>插入表格<br>添加RSS<br>添加搜索功能<br>Hexo博客提交百度和Google收录<br>添加打赏功能<br>博文置顶<br>参考文献</p>
<p>待续。。。。。。。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据结构和算法</title>
    <url>/xmp-blog/2021/03/05/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="java数据结构和算法"><a href="#java数据结构和算法" class="headerlink" title="java数据结构和算法"></a>java数据结构和算法</h1><h2 id="1-队列、堆栈与数组、链表的关系与区分"><a href="#1-队列、堆栈与数组、链表的关系与区分" class="headerlink" title="1 队列、堆栈与数组、链表的关系与区分"></a>1 队列、堆栈与数组、链表的关系与区分</h2><span id="more"></span>
<p>首先，明确两个概念：数据结构与数据存储结构！</p>
<p><strong>数据结构：</strong>是指相互之间存在一种或多种特定关系的<a href="http://baike.baidu.com/view/38785.htm">数据元素</a>的 集合。听起来是不是很抽象，简单理解：数据结构就是描述对象间逻辑关系的学科。比如：队列就是一种先进先出的逻辑结构，栈是一种先进后出的逻辑结构，家谱 是一种树形的逻辑结构！（初学数据结构的时候很不理解为什么有“栈”这个东西；队列很容易理解—无论购物就餐都需要排队；栈可以认为就是个栈道— 只允许一个人通过的小道，而且只能从一端进入，然后再从这端返回，比如你推了个箱子进去啦，第二个人也推个箱子进去，此时只能等后进来的这个人拉着箱子出 去后，你才能退出。）</p>
<p><strong>数据存储结构：</strong>它是计算机的一个概念，简单讲，就是描述数据在计算机中存储方式的学科；常用的数据存储 方式就两种：顺序存储，非顺序存储！顺序存储就是把数据存储在一块连续的存储介质（比如硬盘或内存）上—-举个例子：从内存中拿出第100个字节到 1000个字节间的连续位置，存储数据；数组就是典型的顺序存储！非顺序存储就是各个数据不一定存在一个连续的位置上，只要每个数据知道它前面的数据和后 面的数据，就能把所有数据连续起来啦；链表就是典型的非顺序存储啦！</p>
<p>  至此，基本就应该明白它们之间的区别了吧！</p>
<p>  队列、栈是线性数据结构的典型代表，而数组、链表是常用的两种数据存储结构；队列和栈均可以用数组或链表的存储方式实现它的功能！</p>
<p>&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;简单分析&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>  数 组属于顺序存储中，由于每个元素的存储位置都可以通过简单计算得到，所以访问元素的时间都相同（直接访问数组下标）；链表属于数据的链接存储，由于每个元 素的存储位置是保存在它的前驱或后继结点中的，所以只有当访问到其前驱结点或后继结点后才能够按指针访问到自己，访问任一元素的时间与该元素结点在链接存 储中的位置有关。</p>
<p>  链表和数组是常用的两种数据存储结构，都能用来保存特定类型的数据。两者存在着一些差异：</p>
<p>1.占用的内存空间</p>
<p>  链表存放的内存空间可以是连续的，也可以是不连续的，数组则是连续的一段内存空间。一般情况下存放相同多的数据数组占用较小的内存，而链表还需要存放其前驱和后继的空间。</p>
<p>2.长度的可变性</p>
<p>  链表的长度是按实际需要可以伸缩的，而数组的长度是在定义时要给定的，如果存放的数据个数超过了数组的初始大小，则会出现溢出现象。</p>
<p>3.对数据的访问</p>
<p>  链表方便数据的移动而访问数据比较麻烦；数组访问数据很快捷而移动数据比较麻烦。</p>
<p>  链表和数组的差异决定了它们的不同使用场景，如果需要很多对数据的访问，则适合使用数组；如果需要对数据进行很多移位操作，则设和使用链表。</p>
<p><strong>上面提到的都是栈，而不是堆栈，那堆栈是什么呢？</strong></p>
<p>首先，堆栈是计算机语言中常用术语，堆栈是栈的俗称！</p>
<p>  比如在Java中我们常常说堆栈什么什么的，其实就是说栈内信息！此时有人就问：Java中明明有堆和栈两个概念呀？！不错，堆和栈的确是两种不同的内存操作单元，它们用途不同，但堆栈就是栈的俗称，你可以理解它其实就是栈！</p>
<p>堆和栈有什么区别：</p>
<p>\1. 栈具有数据结构中栈的特点，后进先出，所有存放在它里面的数据都是生命周期很明确（当然要求它不能存放太久，占有的空间确定而且占用空间小），能够快速反应的！所有在Java中它存放的是8个基本数据类型和引用变量的，用完就马上销毁</p>
<p>\2. 堆可以理解它就是个一个可大可小，任你分配的听话的内存操作单元;因此它的特点就是动态的分配内存，适合存放大的数据量!比如一个对象的所有信息，虽然它的引用指向栈中的某个引用变量；所有Java中堆是存放new出来的对象的。</p>
<p>  堆和栈因为不同的特性，所有在计算机中应用甚广！</p>
<h2 id="2-稀疏数组"><a href="#2-稀疏数组" class="headerlink" title="2.稀疏数组"></a>2.稀疏数组</h2><h3 id="1-1、实际需求"><a href="#1-1、实际需求" class="headerlink" title="1.1、实际需求"></a>1.1、实际需求</h3><ul>
<li>编写的五子棋程序中，有存盘退出和续上盘的功能</li>
<li>因为该二维数组的很多值是默认值 0 ，因此<strong>记录了很多没有意义的数据</strong>，我们将其转为<strong>稀疏数组</strong>进行存储</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hleWdvLm9zcy1jbi1zaGFuZ2hhaS5hbGl5dW5jcy5jb20vaW1hZ2VzL2ltYWdlLTIwMjAwNzI1MjAzMzE4MjQ2LnBuZw?x-oss-process=image/format,png" alt="image-20200725203318246"></p>
<h3 id="1-2、稀疏数组应用"><a href="#1-2、稀疏数组应用" class="headerlink" title="1.2、稀疏数组应用"></a>1.2、稀疏数组应用</h3><h4 id="1-2-1、稀疏数组处理方法"><a href="#1-2-1、稀疏数组处理方法" class="headerlink" title="1.2.1、稀疏数组处理方法"></a>1.2.1、稀疏数组处理方法</h4><ul>
<li><p>稀疏数组把具有不同值的元素的<strong>行列</strong>及值记录在一个小规模的数组中，从而缩小程序的规模</p>
</li>
<li><p>稀疏数组也是二维数组，行数由原数组的数据决定，列数一般为 3 列</p>
</li>
<li><p>稀疏数组的</p>
<p>第一行</p>
<p>记录原数组一共有几行几列，有多少个不为零的值</p>
<ul>
<li>第一列：原数组的行数</li>
<li>第二列：原数组的列数</li>
<li>第三列：原数组有多少个不为零的值</li>
</ul>
</li>
<li><p>之后的行记录原数组中</p>
<p>不为零（x）的值</p>
<p>所在的行数、列数以及 x 的值</p>
<ul>
<li>第一列：x 在原数组中的行数</li>
<li>第二列：x 在原数组中的列数</li>
<li>第三列：x 的值</li>
</ul>
</li>
</ul>
<h4 id="1-2-2、举例说明"><a href="#1-2-2、举例说明" class="headerlink" title="1.2.2、举例说明"></a>1.2.2、举例说明</h4><ul>
<li>原始二维数组较大，压缩后占用空间减少</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hleWdvLm9zcy1jbi1zaGFuZ2hhaS5hbGl5dW5jcy5jb20vaW1hZ2VzL2ltYWdlLTIwMjAwNzI1MjAzNjM1NjE2LnBuZw?x-oss-process=image/format,png" alt="image-20200725203635616"></p>
<h3 id="1-3、应用实例"><a href="#1-3、应用实例" class="headerlink" title="1.3、应用实例"></a>1.3、应用实例</h3><h4 id="1-3-1、思路分析"><a href="#1-3-1、思路分析" class="headerlink" title="1.3.1、思路分析"></a>1.3.1、思路分析</h4><ul>
<li>使用稀疏数组， 来保留类似前面的二维数组(棋盘、 地图等等)</li>
<li>把稀疏数组存盘， 并且可以从新恢复原来的二维数组数</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hleWdvLm9zcy1jbi1zaGFuZ2hhaS5hbGl5dW5jcy5jb20vaW1hZ2VzL2ltYWdlLTIwMjAwNzI1MjExMzE2NzQ4LnBuZw?x-oss-process=image/format,png" alt="image-20200725211316748"></p>
<h4 id="1-3-2、代码实现"><a href="#1-3-2、代码实现" class="headerlink" title="1.3.2、代码实现"></a>1.3.2、代码实现</h4><ul>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SparseArray</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 创建一个原始的二维数组 11 * 11</span></span><br><span class="line">		<span class="comment">// 0: 表示没有棋子， 1 表示 黑子 2 表蓝子</span></span><br><span class="line">		<span class="type">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">		chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">		chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">		chessArr1[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">		<span class="comment">// 输出原始的二维数组</span></span><br><span class="line">		System.out.println(<span class="string">&quot;原始的二维数组~~&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span>[] row : chessArr1) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">				System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将二维数组 转 稀疏数组的思</span></span><br><span class="line">		<span class="comment">// 1. 先遍历二维数组 得到非0数据的个数</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chessArr1.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; chessArr1[i].length; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">					sum++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 2. 创建对应的稀疏数组</span></span><br><span class="line">		<span class="type">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">		<span class="comment">// 给稀疏数组赋值</span></span><br><span class="line">		sparseArr[<span class="number">0</span>][<span class="number">0</span>] = chessArr1.length;</span><br><span class="line">		sparseArr[<span class="number">0</span>][<span class="number">1</span>] = chessArr1[<span class="number">0</span>].length;</span><br><span class="line">		sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 遍历二维数组，将非0的值存放到 sparseArr中</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// count 用于记录是第几个非0数据</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chessArr1.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; chessArr1[i].length; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">					count++;</span><br><span class="line">					sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">					sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">					sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 输出稀疏数组的形式</span></span><br><span class="line">		System.out.println();</span><br><span class="line">		System.out.println(<span class="string">&quot;得到稀疏数组为~~~~&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">			System.out.printf(<span class="string">&quot;%d\t%d\t%d\n&quot;</span>, sparseArr[i][<span class="number">0</span>], sparseArr[i][<span class="number">1</span>], sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将稀疏数组 --》 恢复成 原始的二维数组</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 1. 先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，比如上面的 chessArr2 = int [11][11] 2.</span></span><br><span class="line"><span class="comment">		 * 在读取稀疏数组后几行的数据，并赋给 原始的二维数组 即可.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 1. 先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组</span></span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 2. 在读取稀疏数组后几行的数据(从第二行开始)，并赋给 原始的二维数组 即可</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">			chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 输出恢复后的二维数组</span></span><br><span class="line">		System.out.println();</span><br><span class="line">		System.out.println(<span class="string">&quot;恢复后的二维数组&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span>[] row : chessArr2) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">				System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687</span></span><br></pre></td></tr></table></figure>

<ul>
<li>程序运行结果</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原始的二维数组~~</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	1	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	2	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	2	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line"></span><br><span class="line">得到稀疏数组为~~~~</span><br><span class="line">11	11	3</span><br><span class="line">1	2	1</span><br><span class="line">2	3	2</span><br><span class="line">4	5	2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">恢复后的二维数组</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	1	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	2	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	2	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">0	0	0	0	0	0	0	0	0	0	0	</span><br><span class="line">1234567891011121314151617181920212223242526272829303132</span><br></pre></td></tr></table></figure>

<h3 id="1-4、课后练习"><a href="#1-4、课后练习" class="headerlink" title="1.4、课后练习"></a>1.4、课后练习</h3><ul>
<li>在前面的基础上， 将稀疏数组保存到磁盘上， 比如 map.data</li>
<li>恢复原来的数组时， 读取 map.data 进行恢复</li>
</ul>
<h2 id="2、队列"><a href="#2、队列" class="headerlink" title="2、队列"></a>2、队列</h2><h3 id="2-1、队列使用场景"><a href="#2-1、队列使用场景" class="headerlink" title="2.1、队列使用场景"></a>2.1、队列使用场景</h3><ul>
<li>银行排队的案例：</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hleWdvLm9zcy1jbi1zaGFuZ2hhaS5hbGl5dW5jcy5jb20vaW1hZ2VzL2ltYWdlLTIwMjAwNzI1MjAzOTA2MDc1LnBuZw?x-oss-process=image/format,png" alt="image-20200725203906075"></p>
<h3 id="2-2、队列介绍"><a href="#2-2、队列介绍" class="headerlink" title="2.2、队列介绍"></a>2.2、队列介绍</h3><ul>
<li>队列是一个有序列表， 可以用数组或是链表来实现。</li>
<li>遵循<strong>先入先出</strong>的原则， 即： 先存入队列的数据， 要先取出，后存入的要后取出</li>
<li>示意图： (使用数组模拟队列示意图)</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hleWdvLm9zcy1jbi1zaGFuZ2hhaS5hbGl5dW5jcy5jb20vaW1hZ2VzL2ltYWdlLTIwMjAwNzEzMTMzNDI3ODc2LnBuZw?x-oss-process=image/format,png" alt="image-20200713133427876"></p>
<h3 id="2-3、数组模拟队列"><a href="#2-3、数组模拟队列" class="headerlink" title="2.3、数组模拟队列"></a>2.3、数组模拟队列</h3><h4 id="2-3-1、思路分析"><a href="#2-3-1、思路分析" class="headerlink" title="2.3.1、思路分析"></a>2.3.1、思路分析</h4><ul>
<li>maxSize ：队列容量（数组的长度）</li>
<li>arr ：模拟队列的数组</li>
<li>front ：指向队列头部元素的前一个元素，初始值为 -1</li>
<li>rear ：指向队列尾部元素，初始值为 -1</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hleWdvLm9zcy1jbi1zaGFuZ2hhaS5hbGl5dW5jcy5jb20vaW1hZ2VzL2ltYWdlLTIwMjAwNzEzMTMzNTAyMzE1LnBuZw?x-oss-process=image/format,png" alt="image-20200713133502315"></p>
<ul>
<li>基本操作<ul>
<li>队列判空：<strong>front &#x3D;&#x3D; rear</strong></li>
<li>队列判满：<strong>rear &#x3D;&#x3D; (maxSize - 1)</strong> ，即 rear 是否已经指向了数组的最后一个位置</li>
<li>队列元素个数：rear - front</li>
<li>队列入队：队列不满才能入队，arr[++rear] &#x3D; value</li>
<li>队列出队：队列不空才能出队，return arr[front++]</li>
</ul>
</li>
</ul>
<h4 id="2-3-2、代码实现"><a href="#2-3-2、代码实现" class="headerlink" title="2.3.2、代码实现"></a>2.3.2、代码实现</h4><ul>
<li>队列的定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用数组模拟队列-编写一个ArrayQueue类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayQueue</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> maxSize; <span class="comment">// 表示数组的最大容量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> front; <span class="comment">// 队列头</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> rear; <span class="comment">// 队列尾</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[] arr; <span class="comment">// 该数据用于存放数据, 模拟队列</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建队列的构造器</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ArrayQueue</span><span class="params">(<span class="type">int</span> arrMaxSize)</span> &#123;</span><br><span class="line">		maxSize = arrMaxSize;</span><br><span class="line">		arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">		front = -<span class="number">1</span>; <span class="comment">// 指向队列头部，分析出front是指向队列头的前一个位置.</span></span><br><span class="line">		rear = -<span class="number">1</span>; <span class="comment">// 指向队列尾，指向队列尾的数据(即就是队列最后一个数据)</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断队列是否满</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> rear == maxSize - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断队列是否为空</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> rear == front;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加数据到队列</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">		<span class="comment">// 判断队列是否满</span></span><br><span class="line">		<span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;队列满，不能加入数据~&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		rear++; <span class="comment">// 让 rear 后移</span></span><br><span class="line">		arr[rear] = n;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取队列的数据, 出队列</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 判断队列是否空</span></span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="comment">// 通过抛出异常</span></span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，不能取数据&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		front++; <span class="comment">// front后移</span></span><br><span class="line">		<span class="keyword">return</span> arr[front];</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示队列的所有数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 遍历</span></span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;队列空的，没有数据~~&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> front + <span class="number">1</span>; i &lt;= rear; i++) &#123;</span><br><span class="line">			<span class="comment">// Java 中也能用占位符诶</span></span><br><span class="line">			System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>, i, arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示队列的头数据， 注意不是取出数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">headQueue</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 判断</span></span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空的，没有数据~~&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> arr[front + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueueDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 测试一把</span></span><br><span class="line">		<span class="comment">// 创建一个队列</span></span><br><span class="line">		<span class="type">ArrayQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayQueue</span>(<span class="number">3</span>);</span><br><span class="line">		<span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>; <span class="comment">// 接收用户输入</span></span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//</span></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">// 输出一个菜单</span></span><br><span class="line">		<span class="keyword">while</span> (loop) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;s(show): 显示队列&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;e(exit): 退出程序&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;a(add): 添加数据到队列&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;g(get): 从队列取出数据&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;h(head): 查看队列头的数据&quot;</span>);</span><br><span class="line">			System.out.println();</span><br><span class="line">			key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">// 接收一个字符</span></span><br><span class="line">			<span class="keyword">switch</span> (key) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">				queue.showQueue();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;输出一个数&quot;</span>);</span><br><span class="line">				<span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">				queue.addQueue(value);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>: <span class="comment">// 取出数据</span></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> queue.getQueue();</span><br><span class="line">					System.out.printf(<span class="string">&quot;取出的数据是%d\n&quot;</span>, res);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					System.out.println(e.getMessage());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>: <span class="comment">// 查看队列头的数据</span></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> queue.headQueue();</span><br><span class="line">					System.out.printf(<span class="string">&quot;队列头的数据是%d\n&quot;</span>, res);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					System.out.println(e.getMessage());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: <span class="comment">// 退出</span></span><br><span class="line">				scanner.close();</span><br><span class="line">				loop = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;程序退出~~&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556</span></span><br></pre></td></tr></table></figure>

<ul>
<li>程序运行结果</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">s</span><br><span class="line">队列空的，没有数据~~</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">输出一个数</span><br><span class="line">1</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">输出一个数</span><br><span class="line">2</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">输出一个数</span><br><span class="line">3</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">s</span><br><span class="line">arr[0]=1</span><br><span class="line">arr[1]=2</span><br><span class="line">arr[2]=3</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">输出一个数</span><br><span class="line">4</span><br><span class="line">队列满，不能加入数据~</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">g</span><br><span class="line">取出的数据是1</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">g</span><br><span class="line">取出的数据是2</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">g</span><br><span class="line">取出的数据是3</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">g</span><br><span class="line">队列空，不能取数据</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192</span><br></pre></td></tr></table></figure>

<h3 id="2-4、数组模型环形队列"><a href="#2-4、数组模型环形队列" class="headerlink" title="2.4、数组模型环形队列"></a>2.4、数组模型环形队列</h3><h4 id="2-4-1、提出问题"><a href="#2-4-1、提出问题" class="headerlink" title="2.4.1、提出问题"></a>2.4.1、提出问题</h4><ul>
<li>目前数组<strong>使用一次就不能用</strong>， 没有达到复用的效果，造成<strong>内存空间的浪费</strong></li>
<li>将这个数组使用算法， 改进成一个<strong>环形</strong>的队列（**取模： %**）</li>
</ul>
<h4 id="2-4-2、思路分析"><a href="#2-4-2、思路分析" class="headerlink" title="2.4.2、思路分析"></a>2.4.2、思路分析</h4><ul>
<li>对前面的队列进行优化，改造为环形队列（通过<strong>取模</strong>实现）</li>
<li>maxSize ：队列容量（数组的长度）</li>
<li>arr ：模拟队列的数组</li>
<li>front ：指向队列头部元素，初始值为 0</li>
<li>rear ：指向队列尾部元素的后一个元素，初始值为 0</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hleWdvLm9zcy1jbi1zaGFuZ2hhaS5hbGl5dW5jcy5jb20vaW1hZ2VzL2ltYWdlLTIwMjAwNzI1MjExMzM1Njg5LnBuZw?x-oss-process=image/format,png" alt="image-20200725211335689"></p>
<ul>
<li>基本操作<ul>
<li>队列判空：<strong>front &#x3D;&#x3D; rear</strong></li>
<li>队列判满：<ul>
<li>为何要在 rear 之后，front 之前空出一个元素的空间？因为如果不空出一个元素，队列判空条件为：front &#x3D;&#x3D; rear ，队列判满的条件也是：front &#x3D;&#x3D; rear ，<strong>有歧义</strong>！</li>
<li>队列容量：因为空出了一个元素，所以队列容量就变成了 (maxSize - 1)</li>
<li>当空出一个元素的空间，如何判满？当还剩一个元素时，队列就已经满了，所以判断条件为 <strong>(rear + 1) % maxSize &#x3D;&#x3D; front</strong></li>
</ul>
</li>
<li>队列元数个数：<ul>
<li>计算公式：**(rear + maxSize - front) % maxSize** ，这样来思考：</li>
<li>当 rear 比 front 大时，即 (rear -front) &gt; 0 ，这时还没有形成环形结构，**(rear -front)** 即是队列元素个数</li>
<li>当 rear 比 front 小时，即 (rear -front) &lt; 0 ，这时已经形成了环形结构，**(rear -front)** 表示数组还差多少个元素存满（负数），**(rear + maxSize - front)** 即是队列元素个数</li>
<li>综上：**(rear + maxSize - front) % maxSize**</li>
</ul>
</li>
<li>队列入队：<ul>
<li>首先，队列不满才能入队</li>
<li>由于 rear 指向<strong>队列尾部元素的后一个元素</strong>，所以直接设置即可： arr[rear] &#x3D; value</li>
<li>接下来，rear 应该向后移动一个位置：<strong>rear &#x3D; (rear + 1) % maxSize</strong></li>
<li>取模是为了<strong>防止数组越界，让指针从新回到数组第一个元素</strong></li>
</ul>
</li>
<li>队列出队：<ul>
<li>首先，队列不空才能出队</li>
<li>由于 front 直接指向队列头部元素，所以直接返回该元素即可：int value &#x3D; arr[front ]</li>
<li>接下来，front 应该向后移动一个位置：<strong>front &#x3D; (front + 1) % maxSize</strong></li>
<li>取模是为了<strong>防止数组越界，让指针从新回到数组第一个元素</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-4-3、代码实现"><a href="#2-4-3、代码实现" class="headerlink" title="2.4.3、代码实现"></a>2.4.3、代码实现</h4><ul>
<li>环形队列的实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CircleArray</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> maxSize; <span class="comment">// 表示数组的最大容量</span></span><br><span class="line">	<span class="comment">// front 变量的含义做一个调整： front 就指向队列的第一个元素, 也就是说 arr[front] 就是队列的第一个元素</span></span><br><span class="line">	<span class="comment">// front 的初始值 = 0</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> front;</span><br><span class="line">	<span class="comment">// rear 变量的含义做一个调整：rear 指向队列的最后一个元素的后一个位置. 因为希望空出一个空间做为约定.</span></span><br><span class="line">	<span class="comment">// rear 的初始值 = 0</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> rear; <span class="comment">// 队列尾</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[] arr; <span class="comment">// 该数据用于存放数据, 模拟队列</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">CircleArray</span><span class="params">(<span class="type">int</span> arrMaxSize)</span> &#123;</span><br><span class="line">		maxSize = arrMaxSize;</span><br><span class="line">		arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断队列是否满</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (rear + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断队列是否为空</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> rear == front;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加数据到队列</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">		<span class="comment">// 判断队列是否满</span></span><br><span class="line">		<span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;队列满，不能加入数据~&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 直接将数据加入</span></span><br><span class="line">		arr[rear] = n;</span><br><span class="line">		<span class="comment">// 将 rear 后移, 这里必须考虑取模</span></span><br><span class="line">		rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取队列的数据, 出队列</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 判断队列是否空</span></span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="comment">// 通过抛出异常</span></span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，不能取数据&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 这里需要分析出 front是指向队列的第一个元素</span></span><br><span class="line">		<span class="comment">// 1. 先把 front 对应的值保留到一个临时变量</span></span><br><span class="line">		<span class="comment">// 2. 将 front 后移, 考虑取模</span></span><br><span class="line">		<span class="comment">// 3. 将临时保存的变量返回</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> arr[front];</span><br><span class="line">		front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示队列的所有数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 遍历</span></span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;队列空的，没有数据~~&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 思路：从front开始遍历，遍历多少个元素</span></span><br><span class="line">		<span class="comment">// 动脑筋</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> front; i &lt; front + size(); i++) &#123;</span><br><span class="line">			System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>, i % maxSize, arr[i % maxSize]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 求出当前队列有效数据的个数</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// rear = 2</span></span><br><span class="line">		<span class="comment">// front = 1</span></span><br><span class="line">		<span class="comment">// maxSize = 3</span></span><br><span class="line">		<span class="keyword">return</span> (rear + maxSize - front) % maxSize;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示队列的头数据， 注意不是取出数据</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">headQueue</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 判断</span></span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空的，没有数据~~&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> arr[front];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleArrayQueueDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 测试一把</span></span><br><span class="line">		System.out.println(<span class="string">&quot;测试数组模拟环形队列的案例~~~&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建一个环形队列</span></span><br><span class="line">		<span class="type">CircleArray</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleArray</span>(<span class="number">4</span>); <span class="comment">// 说明设置4, 其队列的有效数据最大是3</span></span><br><span class="line">		<span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>; <span class="comment">// 接收用户输入</span></span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//</span></span><br><span class="line">		<span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">// 输出一个菜单</span></span><br><span class="line">		<span class="keyword">while</span> (loop) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;s(show): 显示队列&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;e(exit): 退出程序&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;a(add): 添加数据到队列&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;g(get): 从队列取出数据&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;h(head): 查看队列头的数据&quot;</span>);</span><br><span class="line">			System.out.println();</span><br><span class="line">			key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">// 接收一个字符</span></span><br><span class="line">			<span class="keyword">switch</span> (key) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">				queue.showQueue();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;输出一个数&quot;</span>);</span><br><span class="line">				<span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">				queue.addQueue(value);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>: <span class="comment">// 取出数据</span></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> queue.getQueue();</span><br><span class="line">					System.out.printf(<span class="string">&quot;取出的数据是%d\n&quot;</span>, res);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">					System.out.println(e.getMessage());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>: <span class="comment">// 查看队列头的数据</span></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> queue.headQueue();</span><br><span class="line">					System.out.printf(<span class="string">&quot;队列头的数据是%d\n&quot;</span>, res);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">					System.out.println(e.getMessage());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: <span class="comment">// 退出</span></span><br><span class="line">				scanner.close();</span><br><span class="line">				loop = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;程序退出~~&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960</span></span><br></pre></td></tr></table></figure>

<ul>
<li>程序运行结果</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试数组模拟环形队列的案例~~~</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">输出一个数</span><br><span class="line">1</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">输出一个数</span><br><span class="line">2</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">输出一个数</span><br><span class="line">3</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">s</span><br><span class="line">arr[0]=1</span><br><span class="line">arr[1]=2</span><br><span class="line">arr[2]=3</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">输出一个数</span><br><span class="line">4</span><br><span class="line">队列满，不能加入数据~</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">g</span><br><span class="line">取出的数据是1</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">g</span><br><span class="line">取出的数据是2</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">s</span><br><span class="line">arr[2]=3</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">g</span><br><span class="line">取出的数据是3</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br><span class="line"></span><br><span class="line">g</span><br><span class="line">队列空，不能取数据</span><br><span class="line">s(show): 显示队列</span><br><span class="line">e(exit): 退出程序</span><br><span class="line">a(add): 添加数据到队列</span><br><span class="line">g(get): 从队列取出数据</span><br><span class="line">h(head): 查看队列头的数据</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot自定义配置、basic认证、jwt认证的简单应用</title>
    <url>/xmp-blog/2019/03/15/springboot%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E3%80%81basic%E8%AE%A4%E8%AF%81%E3%80%81jwt%E8%AE%A4%E8%AF%81%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="springboot实战整合"><a href="#springboot实战整合" class="headerlink" title="springboot实战整合"></a>springboot实战整合</h1><h2 id="1-自定义配置文件"><a href="#1-自定义配置文件" class="headerlink" title="1.自定义配置文件"></a>1.自定义配置文件</h2><h3 id="1-新建配置类Audience"><a href="#1-新建配置类Audience" class="headerlink" title="1.新建配置类Audience"></a>1.新建配置类Audience</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 2019/2/15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;audience&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Audience</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String clientId;</span><br><span class="line"><span class="keyword">private</span> String base64Secret;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> expiresSecond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-yaml文件添加配置信息"><a href="#2-yaml文件添加配置信息" class="headerlink" title="2.yaml文件添加配置信息"></a>2.yaml文件添加配置信息</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">audience:</span></span><br><span class="line"><span class="attr">clientId:</span> <span class="string">098f6bcd4621d373cade4e832627b4f6</span></span><br><span class="line"><span class="attr">base64Secret:</span> <span class="string">MDk4ZjZiY2Q0NjIxZDM3M2NhZGU0ZTgzMjYyN2I0ZjY=</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">restapiuser</span></span><br><span class="line"><span class="attr">expiresSecond:</span> <span class="number">172800</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="3-Controller注入配置"><a href="#3-Controller注入配置" class="headerlink" title="3.Controller注入配置"></a>3.Controller注入配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.config.Audience;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.enums.ReturnCodeEnum;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.model.response.BaseResponse;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.utils.BackResponseUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 前端控制器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 2019-01-28</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/app/appUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppUserController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Audience audience;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/getaudience&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getAudience</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">BaseResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>();</span><br><span class="line">response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1000.getCode());</span><br><span class="line">response.setDataInfo(audience);</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-PostMan测试"><a href="#4-PostMan测试" class="headerlink" title="4.PostMan测试"></a>4.PostMan测试</h3><p><code>http://localhost:8081/app/appUser/getaudience</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;returnCode&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;clientId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;098f6bcd4621d373cade4e832627b4f6&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;base64Secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MDk4ZjZiY2Q0NjIxZDM3M2NhZGU0ZTgzMjYyN2I0ZjY=&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;restapiuser&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;expiresSecond&quot;</span><span class="punctuation">:</span> <span class="number">172800</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-自定义map-数组-list对象类配置"><a href="#2-自定义map-数组-list对象类配置" class="headerlink" title="2.自定义map,数组,list对象类配置"></a>2.自定义map,数组,list对象类配置</h2><h3 id="1-新建配置类ConfigProperties"><a href="#1-新建配置类ConfigProperties" class="headerlink" title="1.新建配置类ConfigProperties"></a>1.新建配置类ConfigProperties</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 2019/1/9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;xx.test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String[] testArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Map&lt;String, String&gt;&gt; listMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List listStr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; map;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-添加yaml配置"><a href="#2-添加yaml配置" class="headerlink" title="2.添加yaml配置"></a>2.添加yaml配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">xx:</span></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">str:</span> <span class="string">strTest</span></span><br><span class="line"><span class="attr">testArray:</span> <span class="number">1</span><span class="string">,2,3,a</span> <span class="comment">#这种对象形式的，只能单独写一个对象去接收，所以无法使用@value注解获取</span></span><br><span class="line"><span class="attr">listMap:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">host:</span> <span class="string">weihu01</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">active:</span> <span class="number">9</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">host:</span> <span class="string">weihu02</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">11</span></span><br><span class="line"><span class="attr">active:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">listStr:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">name</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">value</span></span><br><span class="line"><span class="attr">map:</span></span><br><span class="line"><span class="attr">a:</span> <span class="string">a</span></span><br><span class="line"><span class="attr">b:</span> <span class="string">b</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Controller注入配置-1"><a href="#3-Controller注入配置-1" class="headerlink" title="3. Controller注入配置"></a>3. Controller注入配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.config.Audience;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.enums.ReturnCodeEnum;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.model.response.BaseResponse;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.utils.BackResponseUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 前端控制器</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 2019-01-28</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/app/appUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppUserController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConfigProperties config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/getConfig&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getConfig</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">BaseResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>();</span><br><span class="line">response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1000.getCode());</span><br><span class="line">response.setDataInfo(config);</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-测试接口"><a href="#4-测试接口" class="headerlink" title="4.测试接口"></a>4.测试接口</h3><p><code>http://localhost:8081/app/appUser/getConfig</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;returnCode&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dataInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;str&quot;</span><span class="punctuation">:</span> <span class="string">&quot;strTest&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;testArray&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;listMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weihu01&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;active&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weihu02&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;active&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;listStr&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;map&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Filter实现简单的Http-Basic认证"><a href="#3-Filter实现简单的Http-Basic认证" class="headerlink" title="3.Filter实现简单的Http Basic认证"></a>3.Filter实现简单的Http Basic认证</h2><h3 id="1-定义过滤器"><a href="#1-定义过滤器" class="headerlink" title="1.定义过滤器"></a>1.定义过滤器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.enums.ReturnCodeEnum;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.model.response.BaseResponse;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.utils.BackResponseUtil;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 2019/2/15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;restriction&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HTTPBasicAuthorizeAttribute</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">Name</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">Password</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="type">BaseResponse</span> <span class="variable">resultStatusCode</span> <span class="operator">=</span> checkHTTPBasicAuthorize(request);</span><br><span class="line"><span class="keyword">if</span> (resultStatusCode.getReturnCode() != ReturnCodeEnum.CODE_1000.getCode()) &#123;</span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line">httpResponse.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">httpResponse.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">httpResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">httpResponse.getWriter().write(mapper.writeValueAsString(resultStatusCode));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BaseResponse <span class="title function_">checkHTTPBasicAuthorize</span><span class="params">(ServletRequest request)</span> &#123;</span><br><span class="line"><span class="type">BaseResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">httpRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line"><span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> httpRequest.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ((auth != <span class="literal">null</span>) &amp;&amp; (auth.length() &gt; <span class="number">6</span>)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">HeadStr</span> <span class="operator">=</span> auth.substring(<span class="number">0</span>, <span class="number">5</span>).toLowerCase();</span><br><span class="line"><span class="keyword">if</span> (HeadStr.compareTo(<span class="string">&quot;basic&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">auth = auth.substring(<span class="number">6</span>, auth.length());</span><br><span class="line"><span class="type">String</span> <span class="variable">decodedAuth</span> <span class="operator">=</span> getFromBASE64(auth);</span><br><span class="line"><span class="keyword">if</span> (decodedAuth != <span class="literal">null</span>) &#123;</span><br><span class="line">String[] UserArray = decodedAuth.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (UserArray != <span class="literal">null</span> &amp;&amp; UserArray.length == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (UserArray[<span class="number">0</span>].compareTo(Name) == <span class="number">0</span></span><br><span class="line">&amp;&amp; UserArray[<span class="number">1</span>].compareTo(Password) == <span class="number">0</span>) &#123;</span><br><span class="line">response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1000.getCode());</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1001.getCode());</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1001.getCode());</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getFromBASE64</span><span class="params">(String s)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">BASE64Decoder</span> <span class="variable">decoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Decoder</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">byte</span>[] b = decoder.decodeBuffer(s);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(b);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新增HTTPBasicAuthorizeAttribute.java</p>
<p>如果请求的Header中存在Authorization: Basic 头信息，且用户名密码正确，则继续原来的请求，否则返回没有权限的错误信息</p>
<h3 id="2-注册过滤器"><a href="#2-注册过滤器" class="headerlink" title="2.注册过滤器"></a>2.注册过滤器</h3><p>在SpringRestApplication类中注册过滤器，给&#x2F;app&#x2F;appUser&#x2F;*都加上http basic认证过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.config.Audience;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.filter.HTTPBasicAuthorizeAttribute;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.filter.HTTPBearerAuthorizeAttribute;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.xmp.generator.demo.user.mapper*&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Audience.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(SaApplication.class, args);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">FilterRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"><span class="type">HTTPBasicAuthorizeAttribute</span> <span class="variable">httpBasicFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HTTPBasicAuthorizeAttribute</span>();</span><br><span class="line">registrationBean.setFilter(httpBasicFilter);</span><br><span class="line"><span class="type">List</span> <span class="variable">urlPatterns</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">urlPatterns.add(<span class="string">&quot;/app/appUser/*&quot;</span>);</span><br><span class="line">registrationBean.setUrlPatterns(urlPatterns);</span><br><span class="line"><span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-接口测试"><a href="#3-接口测试" class="headerlink" title="3.接口测试"></a>3.接口测试</h3><p>代码中固定用户名密码都为test(可以在yml配置)，所以对接口进行请求时，需要添加以下认证头信息</p>
<p>Authorization: Basic dGVzdDp0ZXN0</p>
<p>dGVzdDp0ZXN0 为 test:test 经过base64编码后的结果</p>
<p><code>http://localhost:8081/app/appUser/getConfig</code></p>
<p>未添加认证信息或者认证信息错误，返回没有权限的错误信息</p>
<p><a href="https://i.loli.net/2019/02/25/5c73887a1a9a2.png"><img src="https://i.loli.net/2019/02/25/5c73887a1a9a2.png"></a></p>
<p>正确添加认证信息</p>
<p><a href="https://i.loli.net/2019/02/25/5c7388a3f0d8f.png"><img src="https://i.loli.net/2019/02/25/5c7388a3f0d8f.png"></a></p>
<h2 id="4-Filter实现使用JWT进行接口认证"><a href="#4-Filter实现使用JWT进行接口认证" class="headerlink" title="4.Filter实现使用JWT进行接口认证"></a>4.Filter实现使用JWT进行接口认证</h2><h3 id="1-添加依赖库jjwt"><a href="#1-添加依赖库jjwt" class="headerlink" title="1.添加依赖库jjwt"></a>1.添加依赖库jjwt</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-添加登录request请求类"><a href="#2-添加登录request请求类" class="headerlink" title="2.添加登录request请求类"></a>2.添加登录request请求类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 2019/2/14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginPara</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-添加生产jwt的token和解析token的工具类"><a href="#3-添加生产jwt的token和解析token的工具类" class="headerlink" title="3.添加生产jwt的token和解析token的工具类"></a>3.添加生产jwt的token和解析token的工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user.jwt.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.DatatypeConverter;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 2019/2/14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtHelper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jsonWebToken, String base64Security)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">.setSigningKey(DatatypeConverter.parseBase64Binary(base64Security))</span><br><span class="line">.parseClaimsJws(jsonWebToken).getBody();</span><br><span class="line"><span class="keyword">return</span> claims;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String name, String userId,</span></span><br><span class="line"><span class="params">String audience, String issuer, <span class="type">long</span> TTLMillis, String base64Security)</span> &#123;</span><br><span class="line"><span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成签名密钥</span></span><br><span class="line"><span class="type">byte</span>[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(base64Security);</span><br><span class="line"><span class="type">Key</span> <span class="variable">signingKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(apiKeySecretBytes, signatureAlgorithm.getJcaName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加构成JWT的参数</span></span><br><span class="line"><span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder().setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">.claim(<span class="string">&quot;unique_name&quot;</span>, name)</span><br><span class="line">.claim(<span class="string">&quot;userid&quot;</span>, userId)</span><br><span class="line">.setIssuer(issuer)</span><br><span class="line">.setAudience(audience)</span><br><span class="line">.signWith(signatureAlgorithm, signingKey);</span><br><span class="line"><span class="comment">//添加Token过期时间</span></span><br><span class="line"><span class="keyword">if</span> (TTLMillis &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + TTLMillis;</span><br><span class="line"><span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">builder.setExpiration(exp).setNotBefore(now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成JWT</span></span><br><span class="line"><span class="keyword">return</span> builder.compact();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-获取jwt-token返回的封装类"><a href="#4-获取jwt-token返回的封装类" class="headerlink" title="4.获取jwt-token返回的封装类"></a>4.获取jwt-token返回的封装类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user.jwt.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 2019/2/14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessToken</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String access_token;</span><br><span class="line"><span class="keyword">private</span> String token_type;</span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> expires_in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-添加获取token的controller"><a href="#5-添加获取token的controller" class="headerlink" title="5.添加获取token的controller"></a>5.添加获取token的controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user.web;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 2019/2/14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.config.Audience;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.entity.AppUser;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.enums.ReturnCodeEnum;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.jwt.model.AccessToken;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.jwt.model.LoginPara;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.jwt.utils.JwtHelper;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.model.response.BaseResponse;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.service.IAppUserService;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.utils.BackResponseUtil;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.utils.MyUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonWebToken</span> &#123;</span><br><span class="line"><span class="keyword">private</span> IAppUserService appUserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Audience audienceEntity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/oauth/token&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getAccessToken</span><span class="params">(<span class="meta">@RequestBody</span> LoginPara loginPara)</span> &#123;</span><br><span class="line"><span class="type">BaseResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>();</span><br><span class="line">log.info(<span class="string">&quot;获取token入参&#123;&#125;&quot;</span>, loginPara);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//验证用户名密码</span></span><br><span class="line"><span class="type">AppUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppUser</span>();</span><br><span class="line">user.setName(loginPara.getUserName());</span><br><span class="line">user.setPassword(loginPara.getPassword());</span><br><span class="line">log.info(<span class="string">&quot;用户登录入参:&#123;&#125;&quot;</span>, user.toString());</span><br><span class="line"><span class="type">BaseResponse</span> <span class="variable">userResponse</span> <span class="operator">=</span> appUserService.login(user);</span><br><span class="line">log.info(<span class="string">&quot;用户登录返回:&#123;&#125;&quot;</span>, userResponse);</span><br><span class="line">user = (AppUser) userResponse.getDataInfo();</span><br><span class="line"><span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1002.getCode());</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拼装accessToken</span></span><br><span class="line"><span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> JwtHelper.createJWT(loginPara.getUserName(), String.valueOf(user.getId()),</span><br><span class="line">audienceEntity.getClientId(), audienceEntity.getName(),</span><br><span class="line">audienceEntity.getExpiresSecond() * <span class="number">1000</span>, audienceEntity.getBase64Secret());</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回accessToken</span></span><br><span class="line"><span class="type">AccessToken</span> <span class="variable">accessTokenEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccessToken</span>();</span><br><span class="line">accessTokenEntity.setAccess_token(accessToken);</span><br><span class="line">accessTokenEntity.setExpires_in(audienceEntity.getExpiresSecond());</span><br><span class="line">accessTokenEntity.setToken_type(<span class="string">&quot;bearer&quot;</span>);</span><br><span class="line">response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1000.getCode());</span><br><span class="line">response.setDataInfo(accessTokenEntity);</span><br><span class="line">log.info(<span class="string">&quot;获取token返回&#123;&#125;&quot;</span>, response);</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">log.info(<span class="string">&quot;获取token异常:&#123;&#125;&quot;</span>, ex);</span><br><span class="line">response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1004.getCode());</span><br><span class="line">response.setMessage(ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-添加校验token的filter"><a href="#6-添加校验token的filter" class="headerlink" title="6.添加校验token的filter"></a>6.添加校验token的filter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.config.Audience;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.enums.ReturnCodeEnum;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.jwt.utils.JwtHelper;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.model.response.BaseResponse;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.utils.BackResponseUtil;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.SpringBeanAutowiringSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 2019/2/15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HTTPBearerAuthorizeAttribute</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Audience audienceEntity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(<span class="built_in">this</span>,</span><br><span class="line">filterConfig.getServletContext());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="type">BaseResponse</span> <span class="variable">baseResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>();</span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">httpRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line"><span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> httpRequest.getHeader(<span class="string">&quot;AccessToken&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ((auth != <span class="literal">null</span>) &amp;&amp; (auth.length() &gt; <span class="number">7</span>)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">HeadStr</span> <span class="operator">=</span> auth.substring(<span class="number">0</span>, <span class="number">6</span>).toLowerCase();</span><br><span class="line"><span class="keyword">if</span> (HeadStr.compareTo(<span class="string">&quot;bearer&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">auth = auth.substring(<span class="number">7</span>, auth.length());</span><br><span class="line"><span class="keyword">if</span> (JwtHelper.parseJWT(auth, audienceEntity.getBase64Secret()) != <span class="literal">null</span>) &#123;</span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line">httpResponse.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">httpResponse.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">httpResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">baseResponse = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1010.getCode());</span><br><span class="line">httpResponse.getWriter().write(mapper.writeValueAsString(baseResponse));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-启动入口注册filter"><a href="#7-启动入口注册filter" class="headerlink" title="7.启动入口注册filter"></a>7.启动入口注册filter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.config.Audience;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.filter.HTTPBasicAuthorizeAttribute;</span><br><span class="line"><span class="keyword">import</span> cn.xmp.generator.demo.user.filter.HTTPBearerAuthorizeAttribute;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.xmp.generator.demo.user.mapper*&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Audience.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(SaApplication.class, args);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">FilterRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"><span class="type">HTTPBasicAuthorizeAttribute</span> <span class="variable">httpBasicFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HTTPBasicAuthorizeAttribute</span>();</span><br><span class="line">registrationBean.setFilter(httpBasicFilter);</span><br><span class="line"><span class="type">List</span> <span class="variable">urlPatterns</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">urlPatterns.add(<span class="string">&quot;/app/appUser/*&quot;</span>);</span><br><span class="line">registrationBean.setUrlPatterns(urlPatterns);</span><br><span class="line"><span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">jwtFilterRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">FilterRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"><span class="type">HTTPBearerAuthorizeAttribute</span> <span class="variable">httpBearerFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HTTPBearerAuthorizeAttribute</span>();</span><br><span class="line">registrationBean.setFilter(httpBearerFilter);</span><br><span class="line"><span class="type">List</span> <span class="variable">urlPatterns</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">urlPatterns.add(<span class="string">&quot;/app/appUser/*&quot;</span>);</span><br><span class="line">registrationBean.setUrlPatterns(urlPatterns);</span><br><span class="line"><span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-测试"><a href="#8-测试" class="headerlink" title="8.测试"></a>8.测试</h3><h4 id="1-获取token"><a href="#1-获取token" class="headerlink" title="1.获取token"></a>1.获取token</h4><p><a href="https://i.loli.net/2019/02/25/5c738954ab47f.png"><img src="https://i.loli.net/2019/02/25/5c738954ab47f.png"></a></p>
<h4 id="2-验证token"><a href="#2-验证token" class="headerlink" title="2.验证token"></a>2.验证token</h4><p><a href="https://i.loli.net/2019/02/25/5c738977774f1.png"><img src="https://i.loli.net/2019/02/25/5c738977774f1.png"></a></p>
]]></content>
      <categories>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
        <tag>Jwt</tag>
        <tag>登录</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是 ChinaNet,CN2,GT,GIA</title>
    <url>/xmp-blog/2020/04/16/%E4%BB%80%E4%B9%88%E6%98%AF-ChinaNet-CN2-GT-GIA/</url>
    <content><![CDATA[<h1 id="什么是-ChinaNet-CN2-GT-GIA"><a href="#什么是-ChinaNet-CN2-GT-GIA" class="headerlink" title="什么是 ChinaNet,CN2,GT,GIA?"></a>什么是 ChinaNet,CN2,GT,GIA?</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文讲从几个方面去讲述中国电信出口网络的情况，阅读本文后让读者对使用中国电信连接海外网络中常用的术语与基本知识有一个大致的了解，以及当读者在购买国外高质量主机的时候，有个基本的链路判断，怎么去分辨，<a href="https://www.oldking.net/tag/chinanet/">ChinaNet</a>，<a href="https://www.oldking.net/tag/cn2/">CN2</a>，<a href="https://www.oldking.net/tag/cn2-gt/">CN2 GT</a>，<a href="https://www.oldking.net/tag/cn2-gia/">CN2 GIA</a> 等线路。</p>
<blockquote>
<pre><code>**转载自老鬼的博客** 原文链接: &lt;https://www.oldking.net/751.html#%E5%88%86%E7%B1%BB&gt;
</code></pre>
</blockquote>
<span id="more"></span>
<h2 id="1、基本"><a href="#1、基本" class="headerlink" title="1、基本"></a>1、基本</h2><p>中国电信(China Telecom)，是中国最大的互联服务提供商，截止2018年1月，中国电信的总出口带宽数为 3.6 Tbps，为互联网用户提供高速稳定的全中国资源访问服务。目前，中国电信骨干网的三大国际出口分别是，北京，上海，广州，全国的出口网络最后都会汇集到这三个出口点。</p>
<h2 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h2><h3 id="ChinaNet"><a href="#ChinaNet" class="headerlink" title="ChinaNet"></a>ChinaNet</h3><p>全球最大的中文资源互联网络 ChinaNet，也叫 163 骨干网，AS4134，要纠正的一点是，很多人缪传一个”CN1”的叫法，这是毫无根据的，Chinatelecom Next Carrier Network，简称 CNCN，再简化为 CN2，CN1 这种叫法可能是看着 CN2 类比出来的，但是官方没有过这种叫法。但如果看到这种说法，你可能知道说的是 ChinaNet 也叫 163 网络。ChinaNet 为超过 8000 万宽带用户服务，同时向全球用户提供超过70%的中文网站的中文互联网资讯。绝大部分的出口带宽都是这种网络，ChinaNet 主要定位于承载普通质量的互联网业务，因为他基建早，带宽大，且足够便宜。<br>我们来用 Traceroute 路由表来看一下走 163 网络的出口路由情况。</p>
<p><img src="https://static.oldking.net/wp-content/uploads/2018/12/Screen-Shot-2018-08-14-at-18.14.34.png?w=680" alt="浅谈中国电信出口网络的链路情况（什么是 ChinaNet,CN2,GT,GIA）">ChinaNet</p>
<p>可以看到无论是从出发地点到省级接口，省级接口到上海海外出口，然后到美国，走的都是 AS4134，ChinaNet 网络。</p>
<h3 id="Chinatelecom-Next-Carrier-Network-CN2"><a href="#Chinatelecom-Next-Carrier-Network-CN2" class="headerlink" title="Chinatelecom Next Carrier Network(CN2)"></a>Chinatelecom Next Carrier Network(CN2)</h3><p>CN2，即是 ChinaNet 之后由中国电信发展的下一代承载网，AS4809，主要是为了提供更高质量要求的中国电信骨干承载网络而建立的工程。运营全球互联网转接服务，能够实现欧洲、北美和亚洲之间高速、大容量、安全、稳定转接服务。CN2 相比较 163 网络，带宽小得多，小是相对的因为相对受众少，但稳定高速，定位于承载企业级别的 VPN 业务，常用于政府，企业，金融类、游戏类等对延时敏感的业务。它提供更高质量的网络服务，接入 CN2 网络价格普遍要比 ChinaNet 贵上许多。</p>
<p>下图为 2016 年由中国电信国际有限公司官网提供的全球 CN2 接入点</p>
<p><img src="https://static.oldking.net/wp-content/uploads/2018/12/pidetail12.png?w=680" alt="浅谈中国电信出口网络的链路情况（什么是 ChinaNet,CN2,GT,GIA）">CN2_Nodes</p>
<p>下图为截止 2018 年 8 月中国电信国际有限公司官网提供的全球 GIS 接入点</p>
<p><img src="https://static.oldking.net/wp-content/uploads/2018/12/Screen-Shot-2018-08-14-at-18.27.30.png?w=680" alt="浅谈中国电信出口网络的链路情况（什么是 ChinaNet,CN2,GT,GIA）">GIS_Nodes</p>
<p>可以看到中国大陆有四个出口点，北上广三个，另外还有一个乌鲁木齐，比较少见的哈塞克斯坦 CN2 网络，走的就是乌鲁木齐出口，即使这个也会先走北上广三个点，再跳到乌鲁木齐出口。<br>CN2 上又有很多的产品，主要包括 CN2 GT，CN2 GIA 两类。这里是否叫 CN2 GT 和 CN2 GIA 待考证，因为之前还流行叫半程 CN2，和全程 CN2 的叫法，可以肯定的是有两种运行在 CN2 的服务，一种价格便宜省级骨干走163，出口才走 CN2，一种价格昂贵全程走 CN2，目前主机圈主流叫法 CN2 GT 和 CN2 GIA。另外还有单程双程是另外一种分类，后面讲。</p>
<h4 id="CN2-GT"><a href="#CN2-GT" class="headerlink" title="CN2 GT"></a>CN2 GT</h4><p>GT 英文是 Global Transit，为全球客户提供访问全球互联网资源的转接服务。提供给全球的通讯运营商，截止目前，中国电信已经与国际Tier1&#x2F;2 运营商以及主流OTT建立超过5000G的互联带宽，本身接入网络是 ChinaNet(AS4134)，但是直连中国电信 CN2(AS4809) 的一个服务。CN2 GT 中国国际出口拥有自己的单独线路，但是在国内的链路还是使用的 163 骨干网络。</p>
<h4 id="CN2-GIA"><a href="#CN2-GIA" class="headerlink" title="CN2 GIA"></a>CN2 GIA</h4><p>GIA 英文是 Global Internet Access，为企业客户提供优质的中国方向互联网专线接入服务，注意 GIA 专指与中国的专线服务。主要是提供给企业的优质网络，本身接入网络 CN2(AS4809)，出口全程 CN2(AS4809) 路由，国际网路高速稳定链接中国内地网络。这种带宽的质量应当是电信网络最好的，但是缺点也比较明显，整个 GIA 的出口带宽较小，在较大流量攻击的时候更容易导致整个 GIA 下的网络波动。GIA 的主要优势是回国有单独的线路，高优先级，高质量，但接入价格较贵。</p>
<h4 id="单程（单向）-CN2"><a href="#单程（单向）-CN2" class="headerlink" title="单程（单向） CN2"></a>单程（单向） CN2</h4><p>我们知道，路由是双向的，去和回，单程 CN2 就是指，只有一边的走 CN2，另一边走的其他的网络。可能有两种情况</p>
<ul>
<li>去程 CN2，回程 ChinaNet。这种情况常见，主要是很多主机商拿来打 CN2 广告的噱头，CN2 去程能够很容易被评测出来。但其实，去程 CN2 并没有什么太大作用只是减小去了去的时延，因为我们知道在普通用户的网络访问情况中，回来的流量要比去的要大得多，单程 CN2 要便宜一些，因为流量使用的少，比纯 ChinaNet 算下来还是要贵一点，有点鸡肋的感觉，弃之可惜，食之无味。</li>
<li>去程 ChinaNet，回程 CN2。这也是一种组合的单程 CN2，这种情况，主要是为了兼顾抗 DDoS，速度和价格三方面，纯 CN2 网络相对脆弱，遭遇量大的 DDoS 后，很快就会把链路占满，造成出口拥塞（CN2 链路遭遇大量 DDoS 攻击时也会自动切到 163 网络）。163 网络带宽容量大，从中国内地出去的出去的攻击能够被很好的承载，而回程又走 CN2 线路，加快速度。普遍上，单程回 CN2，比单程去 CN2 花费高，因为回程的量在互联网服务中占多数。这种情况下，是综合抗DDoS（如果有），速度，价格的折中的最优解，适合容易遭受攻击，且需要速度的需求，当然最好的当然还是双程的。</li>
</ul>
<h4 id="双程（双向）-CN2"><a href="#双程（双向）-CN2" class="headerlink" title="双程（双向） CN2"></a>双程（双向） CN2</h4><p>去程回程都走 CN2 网络。其中包含 CN2 GT 和 CN2 GIA。</p>
<p>单程同理，包含 CN2 GT 和 CN2 GIA 两种。</p>
<h4 id="CN2-延迟排序"><a href="#CN2-延迟排序" class="headerlink" title="CN2 延迟排序"></a>CN2 延迟排序</h4><p>根据中国电信国际有限公司官网数据提供的 2018 年 5，6，7 月三个月的 CN2 质量平均情况（未知端点城市，看着像上海，也可能是几个城市平均下来的数据），理论上可看作为最佳情况下，常见 CN2 节点城市与中国连接延迟排序（ms）</p>
<table>
<thead>
<tr>
<th>香港</th>
<th>首尔</th>
<th>东京</th>
<th>新加坡</th>
<th>莫斯科</th>
<th>圣何塞</th>
<th>洛杉矶</th>
<th>法兰克福</th>
<th>西雅图</th>
</tr>
</thead>
<tbody><tr>
<td>28.27</td>
<td>60.37</td>
<td>67.32</td>
<td>67.65</td>
<td>134.78</td>
<td>166.44</td>
<td>175.62</td>
<td>180.65</td>
<td>185.47</td>
</tr>
</tbody></table>
<h4 id="怎么判断-CN2-GT-和-CN2-GIA"><a href="#怎么判断-CN2-GT-和-CN2-GIA" class="headerlink" title="怎么判断 CN2 GT 和 CN2 GIA"></a>怎么判断 CN2 GT 和 CN2 GIA</h4><p>无论接入的是 GT CN2 还是 GIA CN2，都保证国家与国家之间的传输在 CN2 骨干网内进行，路由中有 ip 开头为 59.43.*，AS4809，首先即判断有一段为 CN2 网络。CN2 上承载了两个较为常见的套餐，那怎么判断是哪一种呢，我们来分析几种特殊情况。</p>
<ul>
<li>CN2 GT 的省级出口为 202.97 节点（163骨干网节点），在跨境时才进入 CN2 骨干网，国际跨境节点为 59.43 开头。即使处在 CN2 节点城市，如上海，也会先走 202.97 节点。以此类推其他城市，不再列出。可见目前所有的 CN2 GT 路由都会有 202.97 开头的 ip</li>
</ul>
<p><img src="https://static.oldking.net/wp-content/uploads/2018/12/Screen-Shot-2018-08-14-at-04.24.17.png?w=680" alt="浅谈中国电信出口网络的链路情况（什么是 ChinaNet,CN2,GT,GIA）">CN2_GT_Shanghai</p>
<ul>
<li><p>CN2 GIA 在部署开通有 CN2 节点的省份城市接入该省的省级 CN2 节点，在暂未部署 CN2 节点的省份城市则就近接入北上广节点。(此点不够严谨，特例情况除外，详情看评论区，感谢</p>
<p>Test IP</p>
<p> 指出)</p>
<ul>
<li>本省有 CN2，但非节点城市，如江苏镇江，经南京 202.97 节点进入江苏南京 CN2 节点，最后进入广州 CN2 出口节点。</li>
<li>本省无 CN2，如重庆，经过重庆 163 节点，进入广州 202.97 节点，然后接入广州 CN2 节点</li>
</ul>
</li>
</ul>
<p><img src="https://static.oldking.net/wp-content/uploads/2018/12/Screen-Shot-2018-08-14-at-04.32.55.png?w=680" alt="浅谈中国电信出口网络的链路情况（什么是 ChinaNet,CN2,GT,GIA）">CN2_GIA_Zhenjiang</p>
<p><img src="https://static.oldking.net/wp-content/uploads/2018/12/Screen-Shot-2018-08-14-at-04.20.23.png?w=680" alt="浅谈中国电信出口网络的链路情况（什么是 ChinaNet,CN2,GT,GIA）">CN2_GIA_Chongqing</p>
<ul>
<li>所以这两种情况虽然是 CN2 GIA 但也会先走 202.97，而如果是在上海和其他 CN2 节点城市，这种情况下的 GIA 才不会有 202.97 出现。所以有的说法里面讲有 202.97 就是 CN2 GT 的这个观点，是错误的。</li>
<li>截止目前，我所知的国内走 CN2 节点城市有，成都，南京，西安，武汉，乌鲁木齐，广州，上海，北京。</li>
<li>了解了以上知识点之后，最简单判断 GT 还是 GIA 的方法，直接用上海电信 traceroute，有 59.43 先是 CN2，再无 202.97 即为 GIA。</li>
<li>（2019年补充，由上可知，GIA 会经过省级 CN2 节点，根据查询到的资料，59.43.80.* 这些 IP 都是省级CN2的处理节点，也就是说，如果你的路由表里面出现了这个 IP 那么就是GIA，这是一种方便的判断 CN2 GIA 的方法）</li>
</ul>
<h2 id="3、其他"><a href="#3、其他" class="headerlink" title="3、其他"></a>3、其他</h2><h3 id="补充一"><a href="#补充一" class="headerlink" title="补充一"></a>补充一</h3><p>这里要分清的一点是，ChinaNet 和 CN2 是骨干网的分类，而以下四个则是，中国电信提供的国际互联网服务 Global Internet Services（GIS）下的四个产品，具体不细说了，有兴趣自查。所以说 CN2 GT 和 CN2 GIA 可以理解为运行在 CN2 承载网上的 GT 或 GIA 服务。</p>
<p>以下四段摘自中国电信国际有限公司官网，GIS 产品介绍。</p>
<h4 id="Global-Transit（GT）"><a href="#Global-Transit（GT）" class="headerlink" title="Global Transit（GT）"></a>Global Transit（GT）</h4><p>为全球客户提供访问全球互联网资源的转接服务。</p>
<h4 id="Global-Internet-Access-GIA"><a href="#Global-Internet-Access-GIA" class="headerlink" title="Global Internet Access(GIA)"></a>Global Internet Access(GIA)</h4><p>为企业客户提供优质的中国方向互联网专线接入服务。</p>
<h4 id="ChinaNet-Paid-Peer"><a href="#ChinaNet-Paid-Peer" class="headerlink" title="ChinaNet Paid-Peer"></a>ChinaNet Paid-Peer</h4><p>为全世界运营商和OTT用户提供中国电信中文互联网资源的最短路由接入服务。</p>
<h4 id="China-Access"><a href="#China-Access" class="headerlink" title="China Access"></a>China Access</h4><p>为全球客户提供一站式的中文互联网资源接入服务。</p>
<h3 id="补充二"><a href="#补充二" class="headerlink" title="补充二"></a>补充二</h3><p>无论什么网络，路由都不是固定，路由是时刻动态的，随时会变，这个变，由你自身（比如本地精品网络CN2用户），或者你连接的网络（比如提供CN2的服务器）与通信提供商签约的合同而定，也由网络容量，稳定情况而定。</p>
<h2 id="4、最后"><a href="#4、最后" class="headerlink" title="4、最后"></a>4、最后</h2><p>中国电信的出口网络，依然是占中国出口网络带宽的几乎一半之多，但是使用人数也是最多的，从使用情况经验上来看，呈现高峰明显拥堵，低峰充足。</p>
]]></content>
      <categories>
        <category>vps</category>
      </categories>
      <tags>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot结合redis实现登录验证码校验</title>
    <url>/xmp-blog/2019/03/15/springboot%E7%BB%93%E5%90%88redis%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E7%A0%81%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<h3 id="1-添加redis和第三方验证码库"><a href="#1-添加redis和第三方验证码库" class="headerlink" title="1.添加redis和第三方验证码库"></a>1.添加redis和第三方验证码库</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.apiclub.tool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simplecaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="2-添加redis配置"><a href="#2-添加redis配置" class="headerlink" title="2.添加redis配置"></a>2.添加redis配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">4</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">2000</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="3-添加redis配置类"><a href="#3-添加redis配置类" class="headerlink" title="3.添加redis配置类"></a>3.添加redis配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/2/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    JedisConnectionFactory <span class="title function_">jedisConnectionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JedisConnectionFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    RedisTemplate&lt;String, String&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, String&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, String&gt;();</span><br><span class="line">        template.setConnectionFactory(jedisConnectionFactory());</span><br><span class="line"></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-配置验证码过期时间，宽高"><a href="#4-配置验证码过期时间，宽高" class="headerlink" title="4.配置验证码过期时间，宽高"></a>4.配置验证码过期时间，宽高</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">captchaExpires:</span> <span class="number">180</span></span><br><span class="line">  <span class="attr">captchaW:</span> <span class="number">200</span></span><br><span class="line">  <span class="attr">captchaH:</span> <span class="number">60</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xmp.generator.demo.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.apiclub.captcha.Captcha;</span><br><span class="line"><span class="keyword">import</span> cn.apiclub.captcha.backgrounds.GradiatedBackgroundProducer;</span><br><span class="line"><span class="keyword">import</span> cn.apiclub.captcha.gimpy.FishEyeGimpyRenderer;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiemopeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/2/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;captcha&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaModule</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;redis.captchaExpires&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> captchaExpires; <span class="comment">//超时时间3min</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;redis.captchaW&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> captchaW; <span class="comment">//验证码宽度</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;redis.captchaH&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> captchaH; <span class="comment">//验证码高度</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;getcaptcha&quot;, method = RequestMethod.GET, produces = MediaType.IMAGE_PNG_VALUE)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="type">byte</span>[] getCaptcha(HttpServletResponse response) &#123;</span><br><span class="line">        <span class="comment">//生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="type">Captcha</span> <span class="variable">captcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Captcha</span>.Builder(captchaW, captchaH)</span><br><span class="line">                .addText().addBackground(<span class="keyword">new</span> <span class="title class_">GradiatedBackgroundProducer</span>(Color.red, Color.cyan))</span><br><span class="line">                .gimp(<span class="keyword">new</span> <span class="title class_">FishEyeGimpyRenderer</span>())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;验证码答案:&#123;&#125;&quot;</span>, captcha.getAnswer());</span><br><span class="line">        log.info(<span class="string">&quot;验证码配置:&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, captchaExpires,captchaW,captchaH);</span><br><span class="line">        <span class="comment">//将验证码以&lt;key,value&gt;形式缓存到redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(uuid, captcha.getAnswer(), captchaExpires, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//将验证码key，及验证码的图片返回</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;CaptchaCode&quot;</span>, uuid);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ImageIO.write(captcha.getImage(), <span class="string">&quot;png&quot;</span>, bao);</span><br><span class="line">            <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取验证码异常:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-修改前面的jwt-token校验逻辑"><a href="#5-修改前面的jwt-token校验逻辑" class="headerlink" title="5.修改前面的jwt-token校验逻辑"></a>5.修改前面的jwt-token校验逻辑</h3><p>在校验token前先校验验证码是否正确</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package cn.xmp.generator.demo.user.web;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author xiemopeng</span><br><span class="line"> * @since 2019/2/14</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import cn.xmp.generator.demo.user.config.Audience;</span><br><span class="line">import cn.xmp.generator.demo.user.entity.AppUser;</span><br><span class="line">import cn.xmp.generator.demo.user.enums.ReturnCodeEnum;</span><br><span class="line">import cn.xmp.generator.demo.user.jwt.model.AccessToken;</span><br><span class="line">import cn.xmp.generator.demo.user.jwt.model.LoginPara;</span><br><span class="line">import cn.xmp.generator.demo.user.jwt.utils.JwtHelper;</span><br><span class="line">import cn.xmp.generator.demo.user.model.response.BaseResponse;</span><br><span class="line">import cn.xmp.generator.demo.user.service.IAppUserService;</span><br><span class="line">import cn.xmp.generator.demo.user.utils.BackResponseUtil;</span><br><span class="line">import cn.xmp.generator.demo.user.utils.MyUtils;</span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Scope;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">@Scope(&quot;prototype&quot;)</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class JsonWebToken &#123;</span><br><span class="line">    private IAppUserService appUserService;</span><br><span class="line"></span><br><span class="line">    private Audience audienceEntity;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/oauth/token&quot;, method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public Object getAccessToken(@RequestBody LoginPara loginPara) &#123;</span><br><span class="line">        BaseResponse response = new BaseResponse();</span><br><span class="line">        log.info(&quot;获取token入参&#123;&#125;&quot;, loginPara);</span><br><span class="line">        try &#123;</span><br><span class="line">            String captchaCode = loginPara.getCaptchaCode();</span><br><span class="line">            try &#123;</span><br><span class="line">                if (captchaCode == null) &#123;</span><br><span class="line">                    response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1005.getCode());</span><br><span class="line">                    response.setMessage(ReturnCodeEnum.CODE_1006.getValue());</span><br><span class="line">                    return response;</span><br><span class="line">                &#125;</span><br><span class="line">                String captchaValue = redisTemplate.opsForValue().get(captchaCode);</span><br><span class="line">                if (captchaValue == null) &#123;</span><br><span class="line">                    response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1005.getCode());</span><br><span class="line">                    response.setMessage(ReturnCodeEnum.CODE_1010.getValue());</span><br><span class="line">                    return response;</span><br><span class="line">                &#125;</span><br><span class="line">                redisTemplate.delete(captchaCode);</span><br><span class="line"></span><br><span class="line">                if (captchaValue.compareTo(loginPara.getCaptchaValue()) != 0) &#123;</span><br><span class="line">                    response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1005.getCode());</span><br><span class="line">                    response.setMessage(ReturnCodeEnum.CODE_1010.getValue());</span><br><span class="line">                    return response;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1005.getCode());</span><br><span class="line">                response.setMessage(ReturnCodeEnum.CODE_1010.getValue());</span><br><span class="line">                return response;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //验证用户名密码</span><br><span class="line">            AppUser user = new AppUser();</span><br><span class="line">            user.setName(loginPara.getUserName());</span><br><span class="line">            user.setPassword(loginPara.getPassword());</span><br><span class="line">            log.info(&quot;用户登录入参:&#123;&#125;&quot;, user.toString());</span><br><span class="line">            BaseResponse userResponse = appUserService.login(user);</span><br><span class="line">            log.info(&quot;用户登录返回:&#123;&#125;&quot;, userResponse);</span><br><span class="line">            user = (AppUser) userResponse.getDataInfo();</span><br><span class="line">            if (user == null) &#123;</span><br><span class="line">                response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1002.getCode());</span><br><span class="line">                return response;</span><br><span class="line">            &#125;</span><br><span class="line">            //拼装accessToken</span><br><span class="line">            String accessToken = JwtHelper.createJWT(loginPara.getUserName(), String.valueOf(user.getId()),</span><br><span class="line">                    audienceEntity.getClientId(), audienceEntity.getName(),</span><br><span class="line">                    audienceEntity.getExpiresSecond() * 1000, audienceEntity.getBase64Secret());</span><br><span class="line"></span><br><span class="line">            //返回accessToken</span><br><span class="line">            AccessToken accessTokenEntity = new AccessToken();</span><br><span class="line">            accessTokenEntity.setAccess_token(accessToken);</span><br><span class="line">            accessTokenEntity.setExpires_in(audienceEntity.getExpiresSecond());</span><br><span class="line">            accessTokenEntity.setToken_type(&quot;bearer&quot;);</span><br><span class="line">            response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1000.getCode());</span><br><span class="line">            response.setDataInfo(accessTokenEntity);</span><br><span class="line">            log.info(&quot;获取token返回&#123;&#125;&quot;, response);</span><br><span class="line">            return response;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            log.info(&quot;获取token异常:&#123;&#125;&quot;, ex);</span><br><span class="line">            response = BackResponseUtil.getBaseResponse(ReturnCodeEnum.CODE_1004.getCode());</span><br><span class="line">        &#125;</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h3><p>启动redis服务端，本文使用的windows版测试</p>
<p><img src="http://xmp123.top/wp-content/uploads/2019/02/1551318120812.png" alt="1551318120812"></p>
<p>获取验证码及cookie</p>
<p><img src="http://xmp123.top/wp-content/uploads/2019/02/1551317699823.png" alt="1551317699823"><img src="http://xmp123.top/wp-content/uploads/2019/02/1551317722565.png" alt="1551317722565"><br>通过key(cookie)获取验证码校验验证码<br><img src="http://xmp123.top/wp-content/uploads/2019/02/1551317919233.png" alt="1551317919233"></p>
]]></content>
      <categories>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>代码托管平台 Gogs 搭建</title>
    <url>/xmp-blog/2019/03/15/%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0-Gogs-%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>安装过程分为这些步骤：</p>
<p>新建用户；<br>下载源码编译 &#x2F; 下载预编译二进制打包；<br>运行安装；<br>配置调整；<br>配置 nginx 反向代理；<br>保持服务运行；<br>可以使用LNMP一键安装环境，这里默认你已经安装好了 MySQL 服务器（或 MariaDB）和 nginx</p>
<span id="more"></span>

<p>新建用户<br>Gogs 默认以 git 用户运行（你应该也不会想一个能修改 ssh 配置的程序以 root 用户运行吧？）。 运行 sudo adduser git 新建好 git 用户。 su git 以 git 用户登录，到 git 用户的主目录中新建好 .ssh 文件夹。</p>
<p>下载解包<br>我使用的是预编译的二进制包。需要从源码编译的话，请参考一般 Go 语言项目的编译。下载后解包到你喜欢的地方，例如 &#x2F;usr&#x2F;share&#x2F;gogs&#x2F; 或者 &#x2F;home&#x2F;git&#x2F;gogs&#x2F;。文件夹的内容如下。</p>
<p>$ ls &#x2F;home&#x2F;git&#x2F;gogs&#x2F;<br>custom  data  gogs  LICENSE  log  public  README.md  README_ZH.md  scripts  templates<br>运行安装<br>首先建立好数据库。在 Gogs 目录的 scripts&#x2F;mysql.sql 文件是数据库初始化文件。执行 mysql -u root -p &lt; scripts&#x2F;mysql.sql （需要输入密码）即可初始化好数据库。</p>
<p>然后登录 MySQL 创建一个新用户 gogs，并将数据库 gogs 的所有权限都赋予该用户。</p>
<p>$ mysql -u root -p</p>
<blockquote>
<h1 id="（输入密码）"><a href="#（输入密码）" class="headerlink" title="（输入密码）"></a>（输入密码）</h1><p>create user ‘gogs‘@’localhost’ identified by ‘密码’;<br>grant all privileges on gogs.* to ‘gogs‘@’localhost’;<br>flush privileges;<br>exit;<br>运行 gogs web 把 Gogs 运行起来，然后访问 http:&#x2F;&#x2F;服务器IP:3000&#x2F; 来进行安装，填写好表单之后提交就可以了。 需要注意的是，0.6.9.0903 Beta 版本有个 bug，允许在关闭注册的情况下不添加管理员，这样安装完成之后将没有任何用户可以登录。所以请务必在安装界面指定一个管理员帐号。</p>
</blockquote>
<p>默认有个SSH20端口，最好不要勾选，我也不知道为什么</p>
<p>配置调整<br>配置文件位于 Gogs 目录的 custom&#x2F;conf&#x2F;app.ini，是 INI 格式的文本文件。详细的配置解释和默认值请参考官方文档，其中关键的配置大概是下面这些。</p>
<p>RUN_USER 默认是 git，指定 Gogs 以哪个用户运行<br>ROOT 所有仓库的存储根路径<br>PROTOCOL 如果你使用 nginx 反代的话请使用 http，如果直接裸跑对外服务的话随意<br>DOMAIN 域名。会影响 SSH clone 地址<br>ROOT_URL 完整的根路径，会影响访问时页面上链接的指向，以及 HTTP clone 的地址<br>HTTP_ADDR 监听地址，使用 nginx 的话建议 127.0.0.1，否则 0.0.0.0 也可以<br>HTTP_PORT 监听端口，默认 3000<br>INSTALL_LOCK 锁定安装页面<br>Mailer 相关的选项<br>其中，Mailer 可以使用 Mailgun 的免费邮件发送服务，将 Mailgun 的 SMTP 配置填入到配置中就好。</p>
<p>nginx 反代<br>在 &#x2F;etc&#x2F;nginx&#x2F;sites-available 中新建一个文件，把以下内容写入文件中。</p>
<p>server {<br>    server_name 域名或IP;<br>    listen 80; # 或者 443，如果你使用 HTTPS 的话<br>    # ssl on; 是否启用加密连接<br>    # 如果你使用 HTTPS，还需要填写 ssl_certificate 和 ssl_certificate_key</p>
<pre><code>location / &#123; # 如果你希望通过子路径访问，此处修改为子路径，注意以 / 开头并以 / 结束
    proxy_pass http://127.0.0.1:3000/;
&#125;
</code></pre>
<p>}<br>然后进入 &#x2F;etc&#x2F;nginx&#x2F;sites-enabled 中，执行 ln -s ..&#x2F;sites-available&#x2F;配置文件名 启用这个配置文件。 最后重启 nginx 就好了，Ubuntu 下是 sudo service nginx restart。</p>
<p>服务脚本<br>最新版本的服务脚本已经可以正常使用，请在二进制下载的 scripts 文件夹中找到对应你使用发行版的版本。将脚本放在 &#x2F;etc&#x2F;init.d中，文件名为 gogs，给予执行权限并修改相关参数，以后就可以使用 sudo service gogs start 来启动服务，或者其他子命令来方便地管理。</p>
<p>我已经不再使用 init 脚本。随 Gogs 分发的 scripts 目录中带有一个开箱即用的 systemd 配置文件。将配置文件内容填充好后复制到 &#x2F;etc&#x2F;systemd&#x2F;system 目录中就可以使用。尤其注意 After&#x3D;mysql.service（对 MariaDB）或 After&#x3D;mysqld.service（MySQL）。</p>
<p>原文链接<a href="https://blog.mynook.info/post/host-your-own-git-server-using-gogs/">https://blog.mynook.info/post/host-your-own-git-server-using-gogs/</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Gogs</tag>
        <tag>代码托管</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用威联通自带的wireguard异地组网</title>
    <url>/xmp-blog/2023/04/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A8%81%E8%81%94%E9%80%9A%E8%87%AA%E5%B8%A6%E7%9A%84wireguard%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/</url>
    <content><![CDATA[<h1 id="如何使用威联通自带的wireguard异地组网"><a href="#如何使用威联通自带的wireguard异地组网" class="headerlink" title="如何使用威联通自带的wireguard异地组网"></a>如何使用威联通自带的wireguard异地组网</h1><p>前言:</p>
<p>​       我的主路由使用的是性能较弱的红米AC2100,用的老毛子系统，为了保证主路由的稳定性，采用了旁路由，扩展功能由威联通虚拟机里面的openwrt实现，本来想通过虚拟机里的openwrt安装wg实现异地组网。但是最近发现威联通官方的QVPN既然也已经支持了wireguard，使用起来更加的简洁和方便，于是使用威联通自带的wireguard进行异地组网，实现内网穿透。</p>
<span id="more"></span>

<p>威联通的QVPN可以直接配置wireguard服务端，如下图:</p>
<img src="/xmp-blog/2023/04/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A8%81%E8%81%94%E9%80%9A%E8%87%AA%E5%B8%A6%E7%9A%84wireguard%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/image-20230421163805978.png" class="" title="image-20230421163805978">

<p>威联通的wireguard接口配置的路径在&#x2F;mnt&#x2F;HDA_ROOT&#x2F;.config&#x2F;qvpn&#x2F;wireguard</p>
<p>默认使用的wg0.conf接口配置，这里有一个比较坑的位置，如果通过命令行修改了wg0.conf配置，再在页面启动wireguard服务端，那么页面的配置会直接覆盖wg0.conf配置，使用wg-quick up wg0启动不会覆盖。</p>
<p>wireguard服务端的默认监听端口为51280，安全起见，建议修改为另一个高位端口。</p>
<p>由于威联通是在主路由的NAT下，所以需要注意的是必需在主路由上做端口转发。同时主路由防火墙需要放行对应的端口，老毛子参数设置页可以设置在防火墙启动后执行脚本。</p>
<img src="/xmp-blog/2023/04/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A8%81%E8%81%94%E9%80%9A%E8%87%AA%E5%B8%A6%E7%9A%84wireguard%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/image-20230421170253694.png" class="" title="image-20230421170253694">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### qnap wireguard </span></span><br><span class="line">iptables -A INPUT -p tcp --dport wireguard监听端口 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --dport wireguard监听端口 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -p tcp --dport wireguard监听端口 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp --dport wireguard监听端口 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p udp --dport wireguard监听端口 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -p udp --dport wireguard监听端口 -j ACCEPT</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>威联通的防火墙也需要放行wireguard内网IP</p>
<img src="/xmp-blog/2023/04/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A8%81%E8%81%94%E9%80%9A%E8%87%AA%E5%B8%A6%E7%9A%84wireguard%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/image-20230421170842297.png" class="" title="image-20230421170842297">

<p>如果想实现直接使用内网IP异地访问服务，在客户端的AllowedIPs配置对应的IP范围即可，例如:wireguard服务端配置的网络范围为10.0.5.0&#x2F;24，内网IP为192.168.1.0&#x2F;24那么在客户端的AllowedIPs配置AllowedIPs &#x3D; 10.0.5.0&#x2F;24, 192.168.1.0&#x2F;24 那么就可以直接使用192.168.1.X访问对应的服务了，AllowedIPs配置以,分割，可以配置多个，例如：AllowedIPs &#x3D; 10.0.5.0&#x2F;24, 192.168.1.2&#x2F;32，192.168.1.3&#x2F;32 允许10.0.5.0&#x2F;24范围和192.168.1.2、192.168.1.3单独访问。</p>
]]></content>
  </entry>
  <entry>
    <title>多多线程进阶-JUC并发编程</title>
    <url>/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="多多线程进阶-JUC并发编程"><a href="#多多线程进阶-JUC并发编程" class="headerlink" title="多多线程进阶-JUC并发编程"></a>多多线程进阶-JUC并发编程</h1><span id="more"></span>
<h2 id="1-什么是JUC？"><a href="#1-什么是JUC？" class="headerlink" title="1.什么是JUC？"></a>1.什么是JUC？</h2><img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210204092949886.png" class="" title="image-20210204092949886">

<p>java.util工具包、包、类</p>
<p><strong>业务</strong>：<strong>普通的业务代码 Thread</strong></p>
<p><strong>Runnable</strong>:没有返回值，效率相对Callable低</p>
<h2 id="2-线程和进程"><a href="#2-线程和进程" class="headerlink" title="2.线程和进程"></a>2.线程和进程</h2><blockquote>
<p>线程、进程，如果不能使用一句话说出来的技术，不扎实</p>
</blockquote>
<p>进程：一个程序，QQ.exe、Music.exe程序的集合</p>
<p>一个进程往往包含多个线程，至少包含一个</p>
<p>java默认有几个线程?2个，1.main 2.GC</p>
<p>线程:开一个进程玩一下联盟，操作英雄，语音通话(线程负责)</p>
<p>对java而言开启线程: Thread、Runnable、Callable</p>
<p><strong>java真的能开启线程吗？</strong> 开不了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class="line"><span class="comment">     * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">     * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">     * so that it can be added to the group&#x27;s list of threads</span></span><br><span class="line"><span class="comment">     * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class="line">    group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0();</span><br><span class="line">        started = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">              it will be passed up the call stack */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//本地方法，底层C++，java运行在虚拟机上，无法直接操作硬件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>并发和并行  </p>
</blockquote>
<p>并发：多个线程操作同一个资源</p>
<ul>
<li>Cpu一核，模拟出多条线程，天下武功，唯快不破，快速交替</li>
</ul>
<p>并行：多个人一起走（多个线程一起执行）</p>
<ul>
<li>Cpu多核，多个线程可以同时执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//获取Cpu核心数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line">    System.out.println(<span class="string">&quot;i = &quot;</span> + i);<span class="comment">//i = 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并发编程的本质:充分利用CPU的资源</p>
<blockquote>
<p>线程有几个状态</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//新生</span></span><br><span class="line">    NEW,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class="line"><span class="comment">     * state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">     * be waiting for other resources from the operating system</span></span><br><span class="line"><span class="comment">     * such as processor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//运行</span></span><br><span class="line">    RUNNABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class="line"><span class="comment">     * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class="line"><span class="comment">     * to enter a synchronized block/method or</span></span><br><span class="line"><span class="comment">     * reenter a synchronized block/method after calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//阻塞</span></span><br><span class="line">    BLOCKED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread.</span></span><br><span class="line"><span class="comment">     * A thread is in the waiting state due to calling one of the</span></span><br><span class="line"><span class="comment">     * following methods:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class="line"><span class="comment">     * perform a particular action.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class="line"><span class="comment">     * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//等待,,死死等待</span></span><br><span class="line">    WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class="line"><span class="comment">     * A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">     * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//超时等待</span></span><br><span class="line">    TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a terminated thread.</span></span><br><span class="line"><span class="comment">     * The thread has completed execution.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//终止</span></span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>wait&#x2F;sleep区别</p>
</blockquote>
<p><strong>1.来自不同的类</strong></p>
<p>wait&#x3D;&gt;Object</p>
<p>sleep&#x3D;&gt;Thread</p>
<p><strong>2.关于锁的释放</strong></p>
<p>wait会释放锁，sleep睡觉了，抱着锁睡觉，不会释放锁</p>
<p><strong>3.使用的范围不同</strong></p>
<p>wait必须在同步代码块中</p>
<p>sleep可以在任何地方睡</p>
<p><strong>4.是否需要捕获异常</strong></p>
<p>wait不需要捕获异常</p>
<p>sleep必须捕获异常</p>
<h2 id="3-Lock-重点"><a href="#3-Lock-重点" class="headerlink" title="3.Lock(重点)"></a>3.Lock(重点)</h2><img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210204110020834.png" class="" title="image-20210204110020834">

<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210204110140614.png" class="" title="image-20210204110140614">

<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210204110751806.png" class="" title="image-20210204110751806">

<p>公平锁：十分公平，先来后到（如果先到的线程等待时间较长，就需要一直等待）</p>
<p>非公平锁:十分不公平，可以插队，无参构造默认非公平锁(充分利用cup资源)</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">synchronized和Lock的区别</span><br></pre></td></tr></table></figure>
</blockquote>
<p>1.synchronized是内置关键字，lock是JUC并发包下的类</p>
<p>2.synchronized无法判断锁的状态，lock可以判断锁的状态</p>
<p>3.synchronized会自动释放锁，Lock必须手动释放，如果不释放锁，<strong>死锁</strong></p>
<p>4.synchronized线程1（获得锁，阻塞）、线程2（等待，傻傻得等),Lock不一定会一直等待</p>
<p>5.synchronized可重入锁，不可用中断，非公平，lock可重入锁，不可用中断，非公平（有参构造可设置)</p>
<p>6.synchronized适合锁少量代码同步问题，lock适合锁大量同步代码</p>
<p>总结:synchronized类似自动挡汽车，lock类似手动挡汽车，更灵活</p>
<blockquote>
<p>锁是什么？如何判断锁的是谁？</p>
</blockquote>
<h2 id="4-生产者消费者问题"><a href="#4-生产者消费者问题" class="headerlink" title="4.生产者消费者问题"></a>4.生产者消费者问题</h2><p>面试的:单例模式、排序算法、生产者消费者、死锁</p>
<blockquote>
<p>生产者消费者synchronized版</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多线程通信问题:生产者和消费者</span></span><br><span class="line"><span class="comment">//判断等待，业务，通知</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//+1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问题存在，A、B、C、D四个线程 <strong>虚假唤醒</strong></p>
<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210204140658950.png" class="" title="image-20210204140658950">
</blockquote>
<p>解决办法，if判断改为while判断</p>
<p>就是用if判断的话，唤醒后线程会从wait之后的代码开始运行，但是不会重新判断if条件，直接继续运行if代码块之后的代码，而如果使用while的话，也会从wait之后的代码运行，但是唤醒后会重新判断循环条件，如果不成立再执行while代码块之后的代码块，成立的话继续wait。</p>
<p>这也就是为什么用while而不用if的原因了，因为线程被唤醒后，执行开始的地方是wait之后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多线程通信问题:生产者和消费者</span></span><br><span class="line"><span class="comment">//判断等待，业务，通知</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//+1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (number == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>JUC 版生产者消费者问题</p>
</blockquote>
<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210204140211013.png" class="" title="image-20210204140211013">

<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210204141457785.png" class="" title="image-20210204141457785">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多线程通信问题:生产者和消费者</span></span><br><span class="line"><span class="comment">//判断等待，业务，通知</span></span><br><span class="line"><span class="comment">//使用JUC版 Lock</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data1</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//+1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number == <span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data1</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data1</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为什么使用JUC版Condition?Condition可以实现精准通知唤醒</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//面试题，使用多线程，依次打印A、B、C</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//业务代码  业务判断，执行，通知</span></span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">1</span>) &#123;</span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;打印:AAAAA&quot;</span>);</span><br><span class="line">            <span class="comment">//唤醒指定的线程</span></span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printB</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//业务代码</span></span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">2</span>) &#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;打印:BBBBB&quot;</span>);</span><br><span class="line">            number = <span class="number">3</span>;</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printC</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//业务代码</span></span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">3</span>) &#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;打印:CCCCC&quot;</span>);</span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data3</span> <span class="variable">data3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data3</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data3.printA();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data3.printB();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data3.printC();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-8锁问题"><a href="#5-8锁问题" class="headerlink" title="5.8锁问题"></a>5.8锁问题</h2><blockquote>
<p>小结</p>
</blockquote>
<p>new 锁的this ,具体的实例</p>
<p>static 锁的Class唯一的模板</p>
<h2 id="6-集合类不安全"><a href="#6-集合类不安全" class="headerlink" title="6.集合类不安全"></a>6.集合类不安全</h2><h3 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a>1.List</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CollectoinTest</span> &#123;</span><br><span class="line">    <span class="comment">//java.util.ConcurrentModificationException 并发修改异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//并发下ArrayList不安全？ synchronized</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *解决方案</span></span><br><span class="line"><span class="comment">         * 1.使用Vector，List&lt;String&gt; list = new Vector&lt;&gt;();(不推荐)，Vector是JDK1.0的产物，使用的synchronized，效率低</span></span><br><span class="line"><span class="comment">         * 2.List&lt;String&gt; list = Collections.synchronizedList(new LinkedList&lt;&gt;());</span></span><br><span class="line"><span class="comment">         * 3.List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();推荐使用，底层使用的是新版JUC下的lock方式，效率相对要快</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//CopyOnWrite 写入时复制，读写分离  COW 计算机程序设计领域的一种优化策略</span></span><br><span class="line">        <span class="comment">//CopyOnWriteArrayList比Vector好在哪里？</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + list);</span><br><span class="line">            &#125;, <span class="string">&quot;&quot;</span> + i).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Vector</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用synchronized同步代码块，效率低</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CopyOnWriteArrayList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用JUC下的lock方式加锁，效率快</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用CopyOnWriteMap需要注意两件事情：</p>
<ul>
<li><ol>
<li>减少扩容开销。根据实际需要，初始化CopyOnWriteMap的大小，避免写时CopyOnWriteMap扩容的开销。</li>
</ol>
</li>
<li><ol start="2">
<li>使用批量添加。因为每次添加，容器每次都会进行复制，所以减少添加次数，可以减少容器的复制次数。如使用上面代码里的addBlackList方法。</li>
</ol>
</li>
</ul>
<h4 id="CopyOnWrite的缺点"><a href="#CopyOnWrite的缺点" class="headerlink" title="CopyOnWrite的缺点"></a>CopyOnWrite的缺点</h4><p>CopyOnWrite容器有很多优点，但是同时也存在两个问题，即内存占用问题和数据一致性问题。所以在开发的时候需要注意一下。</p>
<p><strong>内存占用问题</strong>。因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象（注意:在复制的时候只是复制容器里的引用，只是在写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存）。如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。之前我们系统中使用了一个服务由于每晚使用CopyOnWrite机制更新大对象，造成了每晚15秒的Full GC，应用响应时间也随之变长。</p>
<p>针对内存占用问题，可以通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器，如<a href="http://ifeve.com/concurrenthashmap/">ConcurrentHashMap</a>。</p>
<p><strong>数据一致性问题</strong>。CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。</p>
<h3 id="2-Set"><a href="#2-Set" class="headerlink" title="2.Set"></a>2.Set</h3><p>set和List同理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SetTest</span> &#123;</span><br><span class="line">    <span class="comment">//   多线程下会抛出java.util.ConcurrentModificationException 并发修改异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 解决方案</span></span><br><span class="line"><span class="comment">         * 1.Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class="line"><span class="comment">         * 2.Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;();(写时复制，用在读多写少的场景)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hashSet底层是什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HashSet底层就是HashMap!</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//add set本质就是map的key,map的key不能重复!</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//不变的值</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure>

<h3 id="3-Map"><a href="#3-Map" class="headerlink" title="3.Map"></a>3.Map</h3><p>ConcurrentHashMap</p>
<h2 id="7-Callable"><a href="#7-Callable" class="headerlink" title="7.Callable"></a>7.Callable</h2><img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210204173935682.png" class="" title="image-20210204173935682">

<p>1.可以有返回值</p>
<p>2.可以抛出异常</p>
<p>3.方法不同 run()&#x2F;call()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CallableTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="comment">//适配类，Thread无法直接接受Callable，使用FutureTask适配，使用了适配器模式</span></span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(myThread);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;A&quot;</span>).start();<span class="comment">//怎么启动Callable？</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;B&quot;</span>).start();<span class="comment">//结果会被缓存，效率高</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> (String) task.get();<span class="comment">//这个get方法可能会发送阻塞，放在最后</span></span><br><span class="line">        <span class="comment">//或者使用异步通信来处理</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----call()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;str&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>细节：</p>
<p>1.有缓存</p>
<p>2.结果可能需要等待，会阻塞</p>
<h2 id="8-常用的辅助类"><a href="#8-常用的辅助类" class="headerlink" title="8.常用的辅助类"></a>8.常用的辅助类</h2><h3 id="1-CountDownLatch"><a href="#1-CountDownLatch" class="headerlink" title="1.CountDownLatch"></a>1.CountDownLatch</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//总数是6，必须在执行任务的时候使用</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   GO OUT&quot;</span>);</span><br><span class="line">                count.countDown();<span class="comment">//-1</span></span><br><span class="line">            &#125;, <span class="string">&quot;&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">        count.await();<span class="comment">//等待计数器归零，再向下执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Close Door&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理:</p>
<p>count.countDown();&#x2F;&#x2F;数量-1</p>
<p>  count.await();&#x2F;&#x2F;等待计数器归零，再向下执行</p>
<p>每次有线程调用count.countDown()，数量-1，假设计数器变为0， count.await()就会被唤醒，继续向下执行</p>
<h3 id="2-CyclicBarrier"><a href="#2-CyclicBarrier" class="headerlink" title="2.CyclicBarrier"></a>2.CyclicBarrier</h3><p>加法计数器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CyclicBarrierTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 集齐7颗龙珠召唤神龙</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">barrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">7</span>, () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;召唤神龙&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;<span class="comment">//lamba能直接操作i吗？</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;收集第&quot;</span> + finalI + <span class="string">&quot;颗龙珠&quot;</span>);</span><br><span class="line">                    barrier.await();<span class="comment">//等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Semaphore"><a href="#3-Semaphore" class="headerlink" title="3.Semaphore"></a>3.Semaphore</h3><p>信号量</p>
<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210205102031262.png" class="" title="image-20210205102031262">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SemaphoreTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//3线程数量，停车位，限流!</span></span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//acquire 得到</span></span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;抢到车位&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;离开车位&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();<span class="comment">//释放</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;&quot;</span> + i).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理:</p>
<p><code>semaphore.acquire();</code> 获得，假如已经满了，等待，等待被释放为止</p>
<p> <code>semaphore.release();</code>释放，会将当前的信号量释放+1，然后唤醒等待的线程</p>
<p>作用：多个共享资源互斥使用，并发限流,控制最大线程数！</p>
<h2 id="9-ReadWriteLock"><a href="#9-ReadWriteLock" class="headerlink" title="9.ReadWriteLock"></a>9.ReadWriteLock</h2><p>读写锁，写的时候只能一个线程写，读的时候可以多个线程共享读</p>
<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210205104950414.png" class="" title="image-20210205104950414">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReadWriteLockTest</span> &#123;</span><br><span class="line">    <span class="comment">//如果不使用读写锁，在写入的时候，多个线程会同时写入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MapCache</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapCache</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                cache.put(<span class="string">&quot;&quot;</span> + finalI, finalI);</span><br><span class="line">            &#125;, <span class="string">&quot;写线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                cache.get(<span class="string">&quot;&quot;</span> + finalI);</span><br><span class="line">            &#125;, <span class="string">&quot;读线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义缓存</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MapCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; mapCache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存，写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入&quot;</span> + key);</span><br><span class="line">        mapCache.put(key, value);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入ok&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取，读</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取&quot;</span> + key);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> mapCache.get(key);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取ok&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReadWriteLockTest</span> &#123;</span><br><span class="line">    <span class="comment">//如果不使用读写锁，在写入的时候，多个线程会同时写入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MapCache</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapCache</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                cache.put(<span class="string">&quot;&quot;</span> + finalI, finalI);</span><br><span class="line">            &#125;, <span class="string">&quot;写线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                cache.get(<span class="string">&quot;&quot;</span> + finalI);</span><br><span class="line">            &#125;, <span class="string">&quot;读线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReadWriteLock</span></span><br><span class="line"><span class="comment"> * 独占锁(写锁) 一次只能被一个线程占有</span></span><br><span class="line"><span class="comment"> * 共享锁(读锁) 多个线程可以同时占有</span></span><br><span class="line"><span class="comment"> * 读-读 能共享</span></span><br><span class="line"><span class="comment"> * 读-写 不能共享</span></span><br><span class="line"><span class="comment"> * 写-读 不能共享</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//自定义缓存</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MapCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; mapCache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//读写锁，更加细粒度的控制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存，写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        readWriteLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入&quot;</span> + key);</span><br><span class="line">            mapCache.put(key, value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入ok&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readWriteLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取，读</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        readWriteLock.readLock().lock();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取&quot;</span> + key);</span><br><span class="line">            o = mapCache.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取ok&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readWriteLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-阻塞队列"><a href="#10-阻塞队列" class="headerlink" title="10.阻塞队列"></a>10.阻塞队列</h2><img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210205113501682.png" class="" title="image-20210205113501682">

<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210205113732790.png" class="" title="image-20210205113732790">

<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210205114123025.png" class="" title="image-20210205114123025">

<p>什么情况下会使用阻塞队列？多线程并发处理，线程池！</p>
<p><strong>四组api</strong></p>
<table>
<thead>
<tr>
<th>方式</th>
<th>抛出异常</th>
<th>不抛出异常</th>
<th>超时等待</th>
<th>阻塞等待</th>
</tr>
</thead>
<tbody><tr>
<td>添加</td>
<td>add</td>
<td>offer</td>
<td>offer(“d”, 2, TimeUnit.SECONDS)</td>
<td>put</td>
</tr>
<tr>
<td>移除</td>
<td>remove</td>
<td>poll</td>
<td>poll(2,TimeUnit.SECONDS)</td>
<td>take</td>
</tr>
<tr>
<td>检查首元素</td>
<td>element</td>
<td>peek</td>
<td>—</td>
<td>—</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlockingQueueTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BlockingQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">3</span>);</span><br><span class="line">        test1(queue);</span><br><span class="line">        test2(queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(BlockingQueue queue)</span> &#123;</span><br><span class="line">        System.out.println(queue.add(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(queue.add(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(queue.add(<span class="string">&quot;c&quot;</span>));</span><br><span class="line"><span class="comment">//        System.out.println(queue.add(&quot;d&quot;));//队列满，抛出异常Queue full</span></span><br><span class="line">                System.out.println(queue.element());<span class="comment">//获取首元素,无元素，抛出异常NoSuchElementException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(BlockingQueue queue)</span> &#123;</span><br><span class="line">        System.out.println(queue.remove());</span><br><span class="line">        System.out.println(queue.remove());</span><br><span class="line">        System.out.println(queue.remove());</span><br><span class="line">        System.out.println(queue.remove());<span class="comment">//队列空了，抛出异常java.util.NoSuchElementException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlockingQueueTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BlockingQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//        test1(queue);</span></span><br><span class="line"><span class="comment">//        test2(queue);</span></span><br><span class="line">        test3(queue);</span><br><span class="line">        test4(queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">(BlockingQueue queue)</span> &#123;</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;d&quot;</span>));<span class="comment">//队列满，不抛出异常,返回false</span></span><br><span class="line">        System.out.println(queue.peek());<span class="comment">//获取首元素,队列空，不抛出异常,返回null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">(BlockingQueue queue)</span> &#123;</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());<span class="comment">//队列空了，不抛出异常，返回null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阻塞等待</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlockingQueueTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">BlockingQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//        test1(queue);</span></span><br><span class="line"><span class="comment">//        test2(queue);</span></span><br><span class="line"><span class="comment">//        test3(queue);</span></span><br><span class="line"><span class="comment">//        test4(queue);</span></span><br><span class="line">        test5(queue);</span><br><span class="line">        test6(queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">(BlockingQueue queue)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        queue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        queue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        queue.put(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">//        queue.put(&quot;d&quot;);//队列满，不抛出异常,阻塞等待</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">(BlockingQueue queue)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(queue.take());</span><br><span class="line">        System.out.println(queue.take());</span><br><span class="line">        System.out.println(queue.take());</span><br><span class="line">        System.out.println(queue.take());<span class="comment">//队列空了，不抛出异常，阻塞等待</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超时等待</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlockingQueueTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">BlockingQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//        test1(queue);</span></span><br><span class="line"><span class="comment">//        test2(queue);</span></span><br><span class="line"><span class="comment">//        test3(queue);</span></span><br><span class="line"><span class="comment">//        test4(queue);</span></span><br><span class="line"><span class="comment">//        test5(queue);</span></span><br><span class="line"><span class="comment">//        test6(queue);</span></span><br><span class="line">        test7(queue);</span><br><span class="line">        test8(queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">(BlockingQueue queue)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;d&quot;</span>, <span class="number">2</span>, TimeUnit.SECONDS));<span class="comment">//队列满，不抛出异常,超时等待，返回false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">(BlockingQueue queue)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll(<span class="number">2</span>,TimeUnit.SECONDS));<span class="comment">//队列空了，不抛出异常，超时等待,返回null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="SynchronousQueue-同步队列"><a href="#SynchronousQueue-同步队列" class="headerlink" title="SynchronousQueue 同步队列"></a>SynchronousQueue 同步队列</h2></blockquote>
<p>没有容量，</p>
<p>进去一个元素后，只能等到取出元素后才能再放入元素</p>
<p>put、take</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步队列</span></span><br><span class="line"><span class="comment"> * 和其它的阻塞队列BlockingQueue不一样，</span></span><br><span class="line"><span class="comment"> * put进去一个元素后，必须先从里面take出一个元素后，才能再put放入元素!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SynchronousQueueTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>();<span class="comment">//同步队列</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   put a&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   put b&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   put c&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   get=&gt;&quot;</span> + blockingQueue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   get=&gt;&quot;</span> + blockingQueue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   get=&gt;&quot;</span> + blockingQueue.take());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-线程池-重点"><a href="#11-线程池-重点" class="headerlink" title="11.线程池(重点)"></a>11.线程池(重点)</h2><p>线程池:三大方法，7大参数，4种拒绝策略</p>
<blockquote>
<p>池化技术</p>
</blockquote>
<p>程序的运行，本质：占用系统资源！优化资源的使用&#x3D;》池化技术</p>
<p>线程池、连接池(JDBC)、内存池、对象池(JVM)……创建和销毁。十分浪费资源</p>
<p>池化技术:事先准备好一些资源，有人要用，就从我这里拿，用完之后还给我</p>
<p>默认大小:2</p>
<p>max</p>
<p>线程池的好处:</p>
<p>1.降低资源的消耗</p>
<p>2.提高响应速度</p>
<p>3.方便管理</p>
<p><strong>线程可以复用了，可以控制最大并发数，管理线程</strong></p>
<blockquote>
<p>线程池三大方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Executors工具类，3大方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExecutorsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();<span class="comment">//单个线程</span></span><br><span class="line"><span class="comment">//        ExecutorService threadPool = Executors.newFixedThreadPool(3);//创建一个固定大小的线程池</span></span><br><span class="line"><span class="comment">//        ExecutorService threadPool = Executors.newCachedThreadPool();//可伸缩，遇强则强，遇弱则弱</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//使用线程池之后，使用线程池来创建线程</span></span><br><span class="line">                threadPool.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();<span class="comment">//用完关闭线程池</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>7大参数</p>
</blockquote>
<p>源码分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,<span class="comment">//约21亿</span></span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//本质是ThreadPoolExecutor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,//核心线程池大小</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> maximumPoolSize,//最大核心线程池大小</span></span><br><span class="line"><span class="params">                              <span class="type">long</span> keepAliveTime,//超时等待时间，超时了没有人调用就会释放</span></span><br><span class="line"><span class="params">                              TimeUnit unit,//超时单位</span></span><br><span class="line"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,//阻塞队列</span></span><br><span class="line"><span class="params">                              ThreadFactory threadFactory,//线程工厂，创建线程的，一般不动</span></span><br><span class="line"><span class="params">                              RejectedExecutionHandler handler//拒绝策略)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210205150305827.png" class="" title="image-20210205150305827">

<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210205150526104.png" class="" title="image-20210205150526104">

<blockquote>
<p>手动创建线程池</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Executors工具类，3大方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExecutorsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程</span></span><br><span class="line"><span class="comment">//        ExecutorService threadPool = Executors.newFixedThreadPool(3);//创建一个固定大小的线程池</span></span><br><span class="line"><span class="comment">//        ExecutorService threadPool = Executors.newCachedThreadPool();//可伸缩，遇强则强，遇弱则弱</span></span><br><span class="line">        <span class="comment">//工作中使用自定义线程池ThreadPoolExecutor</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                <span class="number">5</span>,</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()<span class="comment">//银行满了，还有人进来，不处理这个人，抛出异常RejectedExecutionException</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//最大承载：队列Queue+maxnumPoolSize</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//使用线程池之后，使用线程池来创建线程</span></span><br><span class="line">                threadPool.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();<span class="comment">//用完关闭线程池</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210205163110723.png" class="" title="image-20210205163110723">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()<span class="comment">//银行满了，还有人进来，不处理这个人，抛出异常RejectedExecutionException</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy()<span class="comment">//哪里来的去哪里，main线程过来的，就返回main线程执行</span></span><br></pre></td></tr></table></figure>

<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210205163408764.png" class="" title="image-20210205163408764">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardPolicy()<span class="comment">//队列满了，丢掉任务，不会抛出异常</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy()<span class="comment">//队列满了，尝试去和队列首位竞争，如果竞争失败不执行也不抛出异常，如果成功就执行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结和扩展</p>
</blockquote>
<p>最大核心线程池数量怎么设置？</p>
<p>​    1.cpu密集型，几核就设置几，可以保持CPU的效率最高<br>​    2.io密集型 判断你的程序中十分耗费io的线程有多少，一般是线程数量的2倍</p>
<p>了解:cpu密集型、io密集型(调优)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ExecutorsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程</span></span><br><span class="line"><span class="comment">//        ExecutorService threadPool = Executors.newFixedThreadPool(3);//创建一个固定大小的线程池</span></span><br><span class="line"><span class="comment">//        ExecutorService threadPool = Executors.newCachedThreadPool();//可伸缩，遇强则强，遇弱则弱</span></span><br><span class="line">        <span class="comment">//最大核心线程数量怎么去设置？</span></span><br><span class="line">        <span class="comment">//1.cpu密集型，几核就设置几，可以保持CPU的效率最高</span></span><br><span class="line">        <span class="comment">//2.io密集型 判断你的程序中十分耗费io的线程有多少，一般是线程数量的2倍</span></span><br><span class="line">        <span class="comment">//15个大型任务，io会十分占用资源</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统核心数</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                Runtime.getRuntime().availableProcessors(),</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy()<span class="comment">//队列满了，尝试去和队列首位竞争，如果竞争失败不执行也不抛出异常，如果成功就执行</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//最大承载：队列Queue+maxnumPoolSize</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//使用线程池之后，使用线程池来创建线程</span></span><br><span class="line">                threadPool.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();<span class="comment">//用完关闭线程池</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="12-ForkJoin"><a href="#12-ForkJoin" class="headerlink" title="12.ForkJoin"></a>12.ForkJoin</h2><blockquote>
<p>什么是ForkJoin?</p>
</blockquote>
<p>ForkJoin在Jdk1.7出现，可以并行执行任务，提供效率! 用于大数据量</p>
<p>大数据:map reduce,核心思想把大任务拆分为小任务，分而治之（分治法的算法思想）</p>
<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210206101643047.png" class="" title="image-20210206101643047">

<blockquote>
<p>ForkJoin的特点:工作窃取</p>
</blockquote>
<p>内部维护的都是双端队列，B线程任务执行完了，A线程任务还没执行完，B线程不会干等着A，B线程会从A线程的另一端窃取任务，从而提升效率  </p>
<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210206101751231.png" class="" title="image-20210206101751231">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ForkJoinTest</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Long&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Long start;</span><br><span class="line">    <span class="keyword">private</span> Long end;</span><br><span class="line">    <span class="comment">//临界值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ForkJoinTest</span><span class="params">(Long start, Long end)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算求和方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Long <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((end - start) &lt; temp) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> start; start &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//超过临界值，走分支合并计算</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;<span class="comment">//中间值</span></span><br><span class="line">            <span class="type">ForkJoinTest</span> <span class="variable">task1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinTest</span>(start, middle);</span><br><span class="line">            task1.fork();<span class="comment">//拆分任务，把任务压入线程队列</span></span><br><span class="line">            <span class="type">ForkJoinTest</span> <span class="variable">task2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinTest</span>(middle + <span class="number">1</span>, end);</span><br><span class="line">            task2.fork();<span class="comment">//拆分任务，把任务压入线程队列</span></span><br><span class="line">            <span class="keyword">return</span> task1.join() + task2.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        test1();<span class="comment">//耗时1411</span></span><br><span class="line"><span class="comment">//        test2();</span></span><br><span class="line"><span class="comment">//        test3();//耗时1129</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通做法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10_0000_0000L</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum = &quot;</span> + sum + <span class="string">&quot;   耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ForkJoin分治法方式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ExecutionException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> <span class="title class_">ForkJoinTest</span>(<span class="number">0L</span>, <span class="number">10_0000_0000L</span>);</span><br><span class="line">        ForkJoinTask&lt;Long&gt; submit = pool.submit(task);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> submit.get();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum = &quot;</span> + sum + <span class="string">&quot;   耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并行流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> LongStream.rangeClosed(<span class="number">0</span>, <span class="number">10_0000_0000L</span>).parallel().reduce(<span class="number">0</span>, Long::sum);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum = &quot;</span> + sum + <span class="string">&quot;   耗时&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="13-异步回调"><a href="#13-异步回调" class="headerlink" title="13.异步回调"></a>13.异步回调</h2><blockquote>
<p>Future 设计的初衷:对将来的某个结果进行建模</p>
</blockquote>
<img src="/xmp-blog/2021/03/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%9B%E9%98%B6-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20210206114201179.png" class="" title="image-20210206114201179">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步调用CompletableFuture</span></span><br><span class="line"><span class="comment"> * 异步执行</span></span><br><span class="line"><span class="comment"> * 成功回调</span></span><br><span class="line"><span class="comment"> * 失败回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FutureTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line"><span class="comment">//        voidTest();</span></span><br><span class="line">        supplyAsyncTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">supplyAsyncTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="comment">//有返回值的异步回调supplyAsync</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; supplyAsyncFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   supplyAsync=&gt;Integer&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;业务代码&quot;</span>);</span><br><span class="line">        supplyAsyncFuture.whenComplete((integer, throwable) -&gt;&#123;</span><br><span class="line">            System.out.println(integer);<span class="comment">//正常的返回结果</span></span><br><span class="line">            System.out.println(throwable);<span class="comment">//异常信息java.util.concurrent.CompletionException</span></span><br><span class="line">        &#125;).exceptionally(throwable -&gt; &#123;</span><br><span class="line">            System.out.println(throwable.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1005</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;supplyAsyncFuture.get() = &quot;</span> + supplyAsyncFuture.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">voidTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="comment">//没有返回值的异步回调runAsync</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   runAsync=&gt;void&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;业务代码&quot;</span>);</span><br><span class="line">        future.get();<span class="comment">//获取阻塞执行结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>如何给docker容器指定固定ip</title>
    <url>/xmp-blog/2023/03/09/%E5%A6%82%E4%BD%95%E7%BB%99docker%E5%AE%B9%E5%99%A8%E6%8C%87%E5%AE%9A%E5%9B%BA%E5%AE%9Aip/</url>
    <content><![CDATA[<h1 id="如何给docker容器指定固定ip"><a href="#如何给docker容器指定固定ip" class="headerlink" title="如何给docker容器指定固定ip"></a>如何给docker容器指定固定ip</h1><p>docker网络模式有bridge,host,none三种，默认使用bridge桥接模式，但是此模式默认只能使用DHCP自动分配IP，而且不能使用服务名字作为host直接访问，这会导致每次重启容器，IP都会变动，不易维护。要想使用固定IP，只能使用自建的docker网络。</p>
<span id="more"></span>
<ol>
<li><p>.创建自定义bridge网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create --driver bridge --subnet=10.0.2.0/24 --gateway=10.0.2.1 mynet	  </span><br></pre></td></tr></table></figure>
</li>
<li><p>docker-compose指定网络，并设置ip</p>
<p>部署mysql8，指定IP地址10.0.2.2</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql8</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mysql8</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">mysql_net:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.2</span> <span class="comment">#指定容器内固定ip</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/xxx/my.conf:/etc/mysql/my.cnf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/xxx/logs:/var/log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/xxx/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">PUID:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">PGID:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mysql_net:</span></span><br><span class="line">     <span class="attr">external:</span></span><br><span class="line">       <span class="attr">name:</span> <span class="string">mynet</span> <span class="comment">#使用自定义网络</span></span><br></pre></td></tr></table></figure>

<p>部署freshrss，指定IP地址10.0.2.3</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">freshrss-app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">freshrss/freshrss:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">freshrss-app</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">freshrss-app</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">freshrss_net:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;12080:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/xxx/data:/var/www/FreshRSS/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/xxx/extensions:/var/www/FreshRSS/extensions</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">PUID:</span> <span class="number">1000</span></span><br><span class="line">      <span class="attr">PGID:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">CRON_MIN:</span> <span class="string">&#x27;*/45&#x27;</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">freshrss_net:</span></span><br><span class="line">     <span class="attr">external:</span></span><br><span class="line">       <span class="attr">name:</span> <span class="string">mynet</span></span><br></pre></td></tr></table></figure>

<p>这样即可在freshrss配置中指定mysql的host为mysql8，容器内达到网络互通</p>
</li>
</ol>
<img src="/xmp-blog/2023/03/09/%E5%A6%82%E4%BD%95%E7%BB%99docker%E5%AE%B9%E5%99%A8%E6%8C%87%E5%AE%9A%E5%9B%BA%E5%AE%9Aip/Snipaste_2023-03-09_10-39-49.png" class="" title="Snipaste_2023-03-09_10-39-49">]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker,容器,ip</tag>
      </tags>
  </entry>
  <entry>
    <title>java杂记-Arrays.asList方法遇到的坑</title>
    <url>/xmp-blog/2021/03/05/%E6%9D%82%E8%AE%B0-Arrays-asList%E6%96%B9%E6%B3%95%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h1 id="Java-杂记-Arrays-asList方法遇到的坑"><a href="#Java-杂记-Arrays-asList方法遇到的坑" class="headerlink" title="[Java 杂记]Arrays.asList方法遇到的坑"></a>[Java 杂记]Arrays.asList方法遇到的坑</h1><span id="more"></span>
<h2 id="1-Arrays-asList使用限制"><a href="#1-Arrays-asList使用限制" class="headerlink" title="1.Arrays.asList使用限制"></a>1.Arrays.asList使用限制</h2><p>​		Arrays.asList是将数组转换成集合的方法</p>
<h3 id="1-该方法适用于对象型数据的数组（String、Integer…）"><a href="#1-该方法适用于对象型数据的数组（String、Integer…）" class="headerlink" title="1.该方法适用于对象型数据的数组（String、Integer…）"></a>1.该方法适用于对象型数据的数组（String、Integer…）</h3><p>​		</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);<span class="comment">//使用包装对象String</span></span><br><span class="line">    <span class="type">char</span>[] chars = <span class="string">&quot;abc&quot;</span>.toCharArray();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本来想得到的应该是 List&lt;Character&gt; 数组，但是实际上是把chars数组当作一个元素放入集合了，</span></span><br><span class="line"><span class="comment">     * 该方法不建议使用于基本数据类型的数组（byte,short,int,long,float,double,boolean）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;<span class="type">char</span>[]&gt; chars1 = Arrays.asList(chars);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​		Java基本类型（byte&#x2F;short&#x2F;int&#x2F;long&#x2F;float&#x2F;double&#x2F;char&#x2F;boolean）的数组（byte[]&#x2F;short[]&#x2F;int[]&#x2F;long[]&#x2F;float[]&#x2F;double[]&#x2F;char[]&#x2F;boolean[]）不能直接通过Arrays.asList方法转换为List，因为List的元素必须是包装类。在Java8之前，想要实现这种转换只能通过循环。对于<strong>int, long, double</strong>三种基本类型，Java8提供的新特性Stream则可以让我们在一行之内解决这个问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> [] ints = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; integers = Arrays.stream(ints).boxed().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">Arrays.stream(ints).mapToObj(value -&gt; (Integer)value).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>那char这种的基本类型只能通过循环来转换成集合吗？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[] chars = <span class="string">&quot;abc&quot;</span>.toCharArray();</span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> aChar : chars) &#123;</span><br><span class="line">    list.add(aChar);</span><br><span class="line">&#125;</span><br><span class="line">list.forEach(o -&gt; System.out.print(o + <span class="string">&quot; &quot;</span>));<span class="comment">//a b c </span></span><br></pre></td></tr></table></figure>

<p>解决方法：1.通过第三方api，例如<code>Guava</code> jar 包提供的 <code>Chars.asList（</code>）方法 2.使用JDK 8 提供的 <code>lambda</code> 流式编程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第三方api</span></span><br><span class="line">List&lt;Character&gt; characters = Chars.asList(chars);</span><br><span class="line">characters.forEach(o -&gt; System.out.print(o + <span class="string">&quot; &quot;</span>));<span class="comment">//a b c</span></span><br><span class="line"><span class="comment">//使用流式编程</span></span><br><span class="line">List&lt;Character&gt; characterList = <span class="keyword">new</span> <span class="title class_">String</span>(chars).chars().mapToObj(value -&gt; (<span class="type">char</span>) value).collect(Collectors.toList());</span><br><span class="line">characterList.forEach(o -&gt; System.out.print(o + <span class="string">&quot; &quot;</span>));<span class="comment">//a b c</span></span><br></pre></td></tr></table></figure>

<h3 id="2-返回的集合是只读的，不支持add-、remove-、clear-等方法"><a href="#2-返回的集合是只读的，不支持add-、remove-、clear-等方法" class="headerlink" title="2.返回的集合是只读的，不支持add()、remove()、clear()等方法"></a>2.返回的集合是只读的，不支持add()、remove()、clear()等方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);//使用包装对象String</span><br><span class="line">strings.add(&quot;d&quot;);//报异常java.lang.UnsupportedOperationException</span><br></pre></td></tr></table></figure>

<p>Arrays.asList返回ArrayList不是java.util包下的，而是java.util.Arrays.ArrayList</p>
<p>它是Arrays类自己定义的一个静态内部类，这个内部类没有实现add()、remove()方法，而是直接使用它的父类AbstractList的相应方法。</p>
<p>而AbstractList中的add()和remove()是直接抛出java.lang.UnsupportedOperationException异常的！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation always throws an</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> UnsupportedOperationException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassCastException            &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException          &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException      &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException     &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation always throws an</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> UnsupportedOperationException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnsupportedOperationException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException     &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以通过下面的方法解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);<span class="comment">//使用包装对象String</span></span><br><span class="line">ArrayList&lt;String&gt; stringArrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(strings);<span class="comment">//重新实例化一个ArrayList，将只读变成可读</span></span><br><span class="line">stringArrayList.add(<span class="string">&quot;d&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-Java——日期格式化YYYYMMdd与yyyyMMdd的区别"><a href="#2-Java——日期格式化YYYYMMdd与yyyyMMdd的区别" class="headerlink" title="2.Java——日期格式化YYYYMMdd与yyyyMMdd的区别"></a>2.Java——日期格式化YYYYMMdd与yyyyMMdd的区别</h2><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    //YYYY 是表示：当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，那么这周就算入下一年。</span><br><span class="line">    //2019-12-29至2020-1-4跨年周</span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    //2019-12-28</span><br><span class="line">    calendar.set(2019, Calendar.DECEMBER, 28);  </span><br><span class="line">    Date strDate1 = calendar.getTime(); </span><br><span class="line">    //2019-12-29</span><br><span class="line">    calendar.set(2019, Calendar.DECEMBER, 29);  </span><br><span class="line">    Date strDate2 = calendar.getTime(); </span><br><span class="line">    // 2019-12-31  </span><br><span class="line">    calendar.set(2019, Calendar.DECEMBER, 31);  </span><br><span class="line">    Date strDate3 = calendar.getTime();  </span><br><span class="line">    // 2020-01-01  </span><br><span class="line">    calendar.set(2020, Calendar.JANUARY, 1);  </span><br><span class="line">    Date strDate4 = calendar.getTime();  </span><br><span class="line">    </span><br><span class="line">    DateFormat df1 = new SimpleDateFormat(&quot;yyyyMMdd&quot;);</span><br><span class="line">    DateFormat df2 = new SimpleDateFormat(&quot;YYYYMMdd&quot;);</span><br><span class="line">    //yyyyMMdd</span><br><span class="line">    System.out.println(&quot;yyyyMMdd&quot;);</span><br><span class="line">    System.out.println(&quot;2019-12-28: &quot; + df1.format(strDate1)); </span><br><span class="line">    System.out.println(&quot;2019-12-29: &quot; + df1.format(strDate2)); </span><br><span class="line">    System.out.println(&quot;2019-12-31: &quot; + df1.format(strDate3));  </span><br><span class="line">    System.out.println(&quot;2020-01-01: &quot; + df1.format(strDate4));  </span><br><span class="line">    //YYYYMMdd</span><br><span class="line">    System.out.println(&quot;YYYYMMdd&quot;);</span><br><span class="line">    System.out.println(&quot;2019-12-28: &quot; + df2.format(strDate1));</span><br><span class="line">    System.out.println(&quot;2019-12-29: &quot; + df2.format(strDate2));</span><br><span class="line">    System.out.println(&quot;2019-12-31: &quot; + df2.format(strDate3));  </span><br><span class="line">    System.out.println(&quot;2020-01-01: &quot; + df2.format(strDate4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<p>结果：</p>
<p><img src="https://img2018.cnblogs.com/i-beta/1540552/202001/1540552-20200106111926178-1042892419.png" alt="img"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/xmp-blog/2019/03/15/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<img src="/xmp-blog/2019/03/15/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/photo.jpg" class="" title="图片测试">
]]></content>
  </entry>
  <entry>
    <title>如何用vps建wp个人网站</title>
    <url>/xmp-blog/2019/03/15/%E5%A6%82%E4%BD%95%E7%94%A8vps%E5%BB%BAwp%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>#1为什么要用WordPress建站<br>WordPress是一种使用PHP语言和MySQL数据库开发的个人博客系统，其稳定可靠，易于使用，且是免费开源的。而最让我看重的，是它支持一大波优秀的插件和模板，比如SEO优化、静态缓存和数据备份等。</p>
<p>具体可参看百度文库相关介绍：<a href="http://baike.baidu.com/item/WordPress">http://baike.baidu.com/item/WordPress</a></p>
<span id="more"></span>
<p>#2选择虚拟主机还是VPS<br>在回答这个问题之前，让我们先来弄清楚虚拟主机和VPS的区别。</p>
<p>#2.1虚拟主机</p>
<p>虚拟主机（Virtual Hosting）又叫共享主机（Shared Hosting），是使用特殊的软硬件技术，把一台真实的主机分割成多个的逻辑存储单元，每个单元都没有物理实体，但是每一个物理单元都能像真实的物理主机一样在网络上工作，具有共享IP地址(或独立IP地址)以及必要的互联网功能。</p>
<p>通俗一点讲，就是一个出租屋里分了好多床位，租客们共用水、电、卫生间等生活设施。</p>
<p>优点：便宜、便捷，自带被褥，拎包即住<br>缺点：居住性能差<br>#2.2什么是VPS<br>VPS（Virtual Private Server）即虚拟专用服务器，就是利用虚拟化技术（如KVM、Xen、OpenVZ等）把一台真实的服务器分割成若干虚拟的服务器，具有独立的操作系统及开关机等功能，能自行搭建和配置特定的服务。</p>
<p>通俗的说，就如同买了小区里的一套房子，空间及设施都是自己的，想怎么装就怎么装。</p>
<p>优点：爱咋用咋用，居住性能好<br>缺点：价格价高，需要懂点技术<br>由上可以看出，究竟是选用虚拟主机还是VPS建站主要看你的使用目的和性能要求。</p>
<p>一般来说，如果你对服务器配置和维护并不太懂，且个人博客的访问量不大（比如日均1000PV以下），虚拟主机（带独立IP最好）是首选，价格通常年付二三百RMB的样子。</p>
<p>但是，如果你和博主一样喜欢折腾，喜欢追求更高性能，同时也想学习一点Linux相关知识，那么可以考虑使用VPS。</p>
<p>实际上有些性能很不错的国外VPS也很便宜，一般月付5美元甚至更少即可。这样算下来，其实并不比虚拟主机贵到哪去。</p>
<p>博主选用的是美国Vultr公司的最便宜的一款VPS，日本东京的机房，感觉速度要比美国西海岸洛杉矶机房好一些。</p>
<p>博客现已搬迁至搬瓦工年付$19.99这款小内存VPS，具体购买及安装过程详见下文。</p>
<p>#3注册域名<br>考虑到性价比（免费隐私保护）和支付便利（支持支付宝），博主目前在用以下两个域名注册商，在这也推荐给大家。</p>
<p>NameSilo：<a href="https://www.namesilo.com/">https://www.namesilo.com/</a><br>阿里云（万网）：<a href="https://wanwang.aliyun.com/domain/">https://wanwang.aliyun.com/domain/</a><br>2018年2月1日起，阿里云域名涨价了，.COM 续费 ￥69 每年！（感觉是时候转出去了）</p>
<p>反观NameSilo，价格一直比较稳定，甚至不定期赠送优惠，注册和转移时还能再省点。</p>
<p>【优惠活动】2018年12月31日前，使用NameSilo优惠码 the1usd 可减免一美元，首年只需 $7.99！</p>
<p>#4如何选购便宜的VPS<br>坦白说，虽然网上有不少推荐和介绍，比如知乎回答和一些评测博客，但如何选择一款便宜好用且性能不错的VPS还着实让我头疼了一阵。</p>
<p>为什么呢？</p>
<p>网上有些推荐的文章仅仅只是为了推荐而推荐，拿来主义，人云亦云，缺乏实际的使用体验。这就可能导致推荐者对VPS整体的稳定性缺乏深入的评测，而稳定可靠恰恰是一个网站长期发展的重要保障。</p>
<p>尽管128MB甚至更低内存的VPS也可以搭建WordPress建站，但博主并不推荐这样做。因为我们的目的是要做一个省时省力又能长期稳定运行的网站，而不是炫耀VPS优化技术。</p>
<p>于是，在兼顾价格（5美元以下）、速度（ping值200左右）以及稳定性（在线率99.95以上）三个前提下，最终筛选出三个便宜的国外VPS：Vultr、BandwagonHost（搬瓦工）和DigitalOcean（DO）。</p>
<p>但是这三个到底哪个最适合自己呢？感觉还是一头雾水。</p>
<p>纸上得来终觉浅，绝知此事要躬行。于是，就三个VPS全部试用了一遍，并通过我能用得到的各种测试，最终选定了Vultr-VPS（日本机房）。</p>
<p>#4.1搬瓦工VPS和Vultr哪个好</p>
<p>首先，Vultr和DigitalOcean（DO）几乎一样，最便宜的一款VPS月付都是5美元。但是Vultr给的内存是768MB，DO的则只有512MB。</p>
<p>尽管DO在SSD空间上比较大方，给了20GB，而Vultr的则是15GB。但是，博主可以很负责任的告诉你，一般的网站存储+备份+环境一共5-10GB的空间就足够了。显然，内存比空间更实用！</p>
<p>【温馨提示】Vultr现已更改套餐，价格、流量及空间大小均有所调整，可直达官网查看详情。</p>
<p>其次，Vultr快照（Snapshot）是免费的，且不同VPS甚至不同机房之间可以无缝迁移。</p>
<p>比如，刚开始我把网站放在美国西海岸的洛杉矶机房，后来发现日本东京机房的速度更快。于是，我只需要把洛杉矶的VPS快照备份，然后在新开的东京VPS上一键恢复就把数据搬过去了，不用再重装系统和优化配置了。</p>
<p>第三，Vultr是KVM虚化技术，私以为比BandwagonHost（搬瓦工）的OpenVZ好一些。</p>
<p>但是，搬瓦工年付19.99刀的VPS也的确不错，无论CPU性能还是硬盘I&#x2F;O读写速度（可达900MB&#x2F;s，见下图）目前都比Vultr（平均450MB&#x2F;s）要好一些。若优化得当，搭建三两个流量不大的WordPress博客应该不是问题。</p>
<p>再来看下经过优化加速之后，本页面（多图长文）的全国打开速度：（可点击放大）</p>
<p>那么，搬瓦工VPS和Vultr到底哪个好呢？</p>
<p>搬瓦工采用的是OpenVZ虚拟化技术，博主担心日后可能会严重超售，影响VPS性能。再加上目前Vultr搞活动，新注册就送20美元（需信用卡或PayPal验证并建议充值10美元），足够免费折腾四个月，等于花$10使用6个月，算算比虚拟主机都便宜！所以，博主最终还是选择了Vultr。</p>
<p>利好消息：Vultr最近下调了价格，最低套餐（512MB&#x2F;500GB）只需2.5美元&#x2F;月！</p>
<p>遗憾的是月付2.5美元这款平时只有纽约和迈阿密机房有货，但这俩机房靠近美国东海岸，离国内实在有点太远了，略坑。建站的话博主还是推荐Vultr的洛杉矶、西雅图和硅谷这三个美西机房，距离国内比较近，带宽也足。</p>
<p>但是，如果抢不到2.5刀那款的话，这几个美西机房要月付5刀了。当然，5刀的配置会更好一些，看个人需要了。</p>
<p>另外，降价之后赠送20美元的优惠活动也随之取消了。</p>
<p>如果你对网站的访问速度不像博主这么挑剔的话，月付$2.5的美东机房还是可以接受的。</p>
<p>VULTR-VPS的优点（博主喜欢的）<br>稳定：真的很稳，官方承诺VPS在线率100%<br>便宜：最低$2.5&#x2F;月（支持按小时计费）<br>IP随便换：可多机房间相互转移，主机IP随时更换（简直逆天）<br>备份方便：后台一键 SnapShot 备份整机，省心放心（无需关机，比搬瓦工更贴心）<br>速度较好：东京和洛杉矶机房速度相对不错，但需要月付5美元<br>VULTR-VPS的不足（博主不满的）<br>月付2.5美元仅限纽约和迈阿密机房，距大陆较远<br>主机I&#x2F;O读写稍低，300MB-500MB&#x2F;s（搬瓦工500-1000MB&#x2F;s）<br>实在想不出还有啥不满意的<br>Vultr赠送20美元活动直达链接：<a href="https://www.vultr.com/20-dollars/">https://www.vultr.com/20-dollars/</a><br>（由于众所周知的原因，目前东京、洛杉矶和纽约等机房IP被Q严重，可能需要多刷几次才能开出一个可用的IP。怕麻烦的话，建议首选硅谷或伦敦机房。）</p>
<p>实际上，便宜的VPS不超售是不可能的。因为VPS商家是做生意赚钱的，而不是来搞慈善。</p>
<p>但是，从过去几个月的使用情况来看，搬瓦工这款年付19.99美元（256MB&#x2F;500GB）（512MB&#x2F;500GB）小内存VPS速度和稳定性确实很不错。</p>
<p>在过去的几个月里，除了博主备份系统和更换机房时 reboot 几下，还从未宕过机。经过适当的优化（见下文）后，博客页面也基本可以达到秒开。</p>
<p>再加上Vultr赠送的小钱钱也早已经用完，所以本博客（即SEOIMO.COM）目前已从Vultr迁移至搬瓦工的洛杉矶机房。</p>
<p>搬瓦工VPS和Vultr到底哪个更适合，博主的建议是：</p>
<p>如果你只有三两个流量不大的网站，比如每天5000PV以内，搬瓦工256MB&#x2F;500GB这款小鸡还是完全能够胜任的。</p>
<p>因为，博主经过测试（LoadImpact），模拟5分钟内100个访客持续访问本页也没有搞垮这个小鸡。非但没搞垮，这款小内存VPS表现还很不错。</p>
<p>不相信博主？有图有真相，直接上图（看不清可点击放大）：</p>
<p>从上图可以看出，在5分钟内，模拟100个访客持续访问本页，打开时间基本维持在0.8-1.2秒之间。倘若从早10点至晚22点算起（百度上网时间分布统计），按12个小时持续访问的话，每天有大约15000PV的访问量！</p>
<p>是否可以这样理解：即使像本页面这样有这么多的图片和文字，每天大约15000PV的流量，经过适当的优化，在搬瓦工这款256MB的小内存VPS上也基本是秒开的。</p>
<p>是不是有点吓到了？</p>
<p>再来看一下100访客在线时VPS的系统平均负载：</p>
<p>内存耗尽是意料之中的事情，毕竟只有256MB。但出乎博主意料的是：系统平均负载并不高，甚至还不到0.2！这么高的流量，博主原以为起码也要超过1的，即CPU刚好跑满。现在非但没有跑满，竟还有足够多的剩余。不得不说，搬瓦工的技术还真是可以！</p>
<p>由此可见，小内存VPS不一定就不能搭建大流量WordPress博客，关键要优化得当。</p>
<p>当然了，如果网站真有每天超过10000PV的流量，博主还是建议提升下VPS配置，比如升级到搬瓦工1024MB&#x2F;1024GB这个套餐。因为每天10000PV的流量即便挂Adsense广告每天也该有10美元的收入了，就不要再扣VPS月租这点小钱了。</p>
<p>搬瓦工VPS的优点（博主喜欢的）<br>便宜：最低$19.99&#x2F;年（使用优惠码更省）<br>稳定：承诺99.5%在线率保证，经博主过去一年多对本站的检测来看，除了博主认为重启之外，在线率实际几乎100%<br>够快：洛杉矶机房，CN2线路，ping值低，速度快（本站所用）；香港机房更快，但是价格就无爱了<br>IP可换：可多机房间相互转移，实现随意更换IP地址（博主大爱）<br>备份方便：后台一键 SnapShot 备份整机，省心放心<br>搬瓦工VPS的不足（博主不满的）<br>进行 SnapShot 时强制关闭VPS，持续5分钟左右（不如Vultr周到）<br>系统过于精简，建站时某些必备软件可能需要自己手动安装<br>香港机房VPS太贵，真心贵<br>建议首选KVM架构，最低$19.99&#x2F;年，可安装BBR加速，看视频方便。</p>
<p>KVM-512MB&#x2F;500GB直达链接：<a href="https://bandwagonhost.com/kvm-512mb/">https://bandwagonhost.com/kvm-512mb/</a><br>限时供货，使用优惠码 BWH1ZBPVK 可省6%（目前最高）；</p>
<p>推荐洛杉矶CN2直连线路（后台切换）；请务必确保注册信息真实有效，且与登录IP地址相符。否则，大概率会被视为欺诈（Fraud）而上黑名单。</p>
<p>一般来说，512MB内存足够个人建站使用了。但若是年付 $19.99 这款紧俏套餐已经脱销，或者你需要更高配置的，年付 $49.99 这款也足够好：20GB空间，1024MB内存，多机房可自由切换。</p>
<p>至于其余的高价套餐，博主以为仅对搭建wordpress博客来说，性价比并不高。因此，也就没必要去花冤枉钱（土豪请随意）。</p>
<p>KVM-1024MB&#x2F;1024GB直达链接：<a href="https://bandwagonhost.com/kvm-1024mb/">https://bandwagonhost.com/kvm-1024mb/</a><br>价格：	</p>
<p>稳定：	</p>
<p>速度：	</p>
<p>操作：	</p>
<p>优惠：	</p>
<p>【温馨提示】DigitalOcean只支持信用卡和PayPal付款，而搬瓦工和Vultr则可使用支付宝（Alipay）。</p>
<p>#4.2如何购买搬瓦工VPS<br>默认折叠，请单击展开 &#x2F; 折叠 ..</p>
<p>#4.3如何购买Vultr-VPS<br>默认折叠，请单击展开 &#x2F; 折叠 ..</p>
<p>接下来，正式进入本文的最重要环节：通过SSH连接VPS搭建LAMP环境，进而安装WordPress博客。</p>
<p>#5SSH连接VPS<br>SSH（Secure Shell）即安全外壳协议，是目前较可靠、专为远程登录会话和其他网络服务提供安全性的协议。我们需要一种SSH工具来连接VPS，个人推荐PuTTY，最好使用英文原版。</p>
<p>下载地址：<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html</a></p>
<p>下载后免安装，直接打开。填入刚才开通的VPS地址，默认端口22。然后点击Open打开，弹出的新窗口点击左边 “Yes” 。</p>
<p>回到我们刚才打开的Vultr-VPS管理页面，左边有登陆名root和密码，复制密码。</p>
<p>在PuTTY界面输入root后回车，单击右键即可输入密码。</p>
<p>【温馨提示】PuTTY中输入密码是不显示的，单击右键即为粘贴。</p>
<p>登陆成功后，首先需要修改root密码，因为初始密码太复杂不好记，也不一定安全。</p>
<h1 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h1><p>回车后设置新密码，再回车重新输入。然后界面显示如下，说明密码修改成功。</p>
<p>（密码长度建议20字符以上，字母大小写 + 数字 + 特殊字符）</p>
<p>之后，最好再升级一下系统，以保证获得最新的软件和内核。</p>
<h1 id="yum-y-update"><a href="#yum-y-update" class="headerlink" title="yum -y update"></a>yum -y update</h1><p>回车，等待升级完成。</p>
<p>此外，为防止SSH登录一段时间后自动断开，可更改如下设置以保持SSH长时间在线。</p>
<h1 id="vi-x2F-etc-x2F-ssh-x2F-sshd-config"><a href="#vi-x2F-etc-x2F-ssh-x2F-sshd-config" class="headerlink" title="vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config"></a>vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</h1><p>将如下两行代码前的 # 去掉，然后做相应修改：（若无此两行代码请在末尾自行添加）</p>
<p>#PermitUserEnvironment no<br>#Compression delayed<br>ClientAliveInterval 60<br>ClientAliveCountMax 3<br>#ShowPatchLevel no<br>#UseDNS yes<br>保存，重启SSH即可生效：</p>
<h1 id="service-sshd-restart"><a href="#service-sshd-restart" class="headerlink" title="service sshd restart"></a>service sshd restart</h1><p>开启BBR加速</p>
<p>BBR是Google提出的一个开源的TCP拥塞控制算法，应用于Linux4.9+内核上，对提升网速效果显著。</p>
<p>因此，对于KVM架构的VPS，博主倾向于在正式部署生产环境之前，首先开启BBR。</p>
<p>但这并不意味着你一定要这么做。倘若你的VPS线路已经很不错，完全可以跳过这一步。</p>
<p>切换到 root 目录：</p>
<h1 id="cd"><a href="#cd" class="headerlink" title="cd ~"></a>cd ~</h1><p>下载安装脚本：</p>
<h1 id="wget-–no-check-certificate-https-github-com-teddysun-across-raw-master-bbr-sh"><a href="#wget-–no-check-certificate-https-github-com-teddysun-across-raw-master-bbr-sh" class="headerlink" title="wget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh"></a>wget –no-check-certificate <a href="https://github.com/teddysun/across/raw/master/bbr.sh">https://github.com/teddysun/across/raw/master/bbr.sh</a></h1><p>如提示 wget: command not found ，可执行命令 # yum install wget 进行安装。</p>
<p>安装BBR：</p>
<h1 id="chmod-x-bbr-sh-amp-amp-x2F-bbr-sh"><a href="#chmod-x-bbr-sh-amp-amp-x2F-bbr-sh" class="headerlink" title="chmod +x bbr.sh &amp;&amp; .&#x2F;bbr.sh"></a>chmod +x bbr.sh &amp;&amp; .&#x2F;bbr.sh</h1><p>按要求输入 y 后，自动重启VPS。</p>
<p>重新登入后，查看结果：</p>
<h1 id="sysctl-net-ipv4-tcp-available-congestion-control"><a href="#sysctl-net-ipv4-tcp-available-congestion-control" class="headerlink" title="sysctl net.ipv4.tcp_available_congestion_control"></a>sysctl net.ipv4.tcp_available_congestion_control</h1><p>出现形如以下字样时，说明BBR开启成功。</p>
<p>net.ipv4.tcp_available_congestion_control &#x3D; bbr cubic reno<br>#6搭建LAMP环境</p>
<p>LAMP指的是Linux（操作系统）、Apache（HTTP服务器），MySQL（数据库软件） 和PHP（有时也是指Perl或Python）的第一个字母，主要用来建立web应用平台。</p>
<p>博主使用的是LNMP一键安装包，具体可参看这里：<a href="https://lnmp.org/install.html">https://lnmp.org/install.html</a></p>
<p>【温馨提示】为提高效率，可直接复制代码，然后在PuTTY窗口单击右键进行粘贴。</p>
<p>首先，创建screen会话：</p>
<h1 id="screen-S-lamp"><a href="#screen-S-lamp" class="headerlink" title="screen -S lamp"></a>screen -S lamp</h1><p>如提示 screen: command not found ，可执行命令 # yum install screen 进行安装。</p>
<p>如果安装过程中出现异常中断，重新登入VPS后，输入 # screen -r lamp 恢复安装界面。</p>
<p>由于LNMP1.4版本可一键设置SSL，所以推荐优先安装1.4版本：</p>
<p>LNMP1.4-FULLLNMP1.3-FULL</p>
<h1 id="wget-c-http-soft-vpser-net-lnmp-lnmp1-4-full-tar-gz-amp-amp-tar-zxf-lnmp1-4-full-tar-gz-amp-amp-cd-lnmp1-4-full-amp-amp-x2F-install-sh-lamp"><a href="#wget-c-http-soft-vpser-net-lnmp-lnmp1-4-full-tar-gz-amp-amp-tar-zxf-lnmp1-4-full-tar-gz-amp-amp-cd-lnmp1-4-full-amp-amp-x2F-install-sh-lamp" class="headerlink" title="wget -c http://soft.vpser.net/lnmp/lnmp1.4-full.tar.gz &amp;&amp; tar -zxf lnmp1.4-full.tar.gz &amp;&amp; cd lnmp1.4-full &amp;&amp; .&#x2F;install.sh lamp"></a>wget -c <a href="http://soft.vpser.net/lnmp/lnmp1.4-full.tar.gz">http://soft.vpser.net/lnmp/lnmp1.4-full.tar.gz</a> &amp;&amp; tar -zxf lnmp1.4-full.tar.gz &amp;&amp; cd lnmp1.4-full &amp;&amp; .&#x2F;install.sh lamp</h1><p>当然，如果你之前已经安装的是LNMP1.3，也可以一键升级到1.4版本。</p>
<p>以下安装过程不再赘述，选项一般默认即可，主要设置详见下图（LNMP1.3示意）。</p>
<p>这里设置的数据库ROOT密码务必记牢，下面添加域名时会用到！！</p>
<p>LNMP安装成功之后，如果数据库密码忘记了，可参看这里进行重置。</p>
<p>（建议安装PHP5.6版本；安装SSL证书时如出现问题，可以参考博主安装Let’s-Encrypt免费的SSL证书时遇到的几个大坑）</p>
<p>当出现上图中的绿字 “Press any key to install…or Press Ctrl+c to cancel” 后，按回车键确认开始安装。</p>
<p>安装大约持续半个小时左右。安装成功后的界面如下图所示：</p>
<p>至此，LAMP环境已经在VPS上搭建完成。输入VPS的IP访问，会出现以下界面：</p>
<p>重要提示：★★★★★<br>①为了安全，建议将 phpmyadmin 目录重命名为不容易猜到的目录（比如 hereispma , ..）：</p>
<h1 id="cd-x2F-home-x2F-wwwroot-x2F-default"><a href="#cd-x2F-home-x2F-wwwroot-x2F-default" class="headerlink" title="cd &#x2F;home&#x2F;wwwroot&#x2F;default"></a>cd &#x2F;home&#x2F;wwwroot&#x2F;default</h1><h1 id="mv-phpmyadmin-hereispma"><a href="#mv-phpmyadmin-hereispma" class="headerlink" title="mv phpmyadmin hereispma"></a>mv phpmyadmin hereispma</h1><p>②此安装成功页面是IP访问时的默认页面（非域名），建议删除或改名：</p>
<h1 id="rm-rf-index-html-或者"><a href="#rm-rf-index-html-或者" class="headerlink" title="rm -rf index.html 或者"></a>rm -rf index.html 或者</h1><h1 id="mv-index-html-random-name-html"><a href="#mv-index-html-random-name-html" class="headerlink" title="mv index.html random-name.html"></a>mv index.html random-name.html</h1><p>③如需要开启IP访问网站域名，请更改IP访问默认路径（此步骤可选，不推荐）：</p>
<h1 id="vi-x2F-usr-x2F-local-x2F-apache-x2F-conf-x2F-extra-x2F-httpd-vhosts-conf"><a href="#vi-x2F-usr-x2F-local-x2F-apache-x2F-conf-x2F-extra-x2F-httpd-vhosts-conf" class="headerlink" title="vi &#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf&#x2F;extra&#x2F;httpd-vhosts.conf"></a>vi &#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf&#x2F;extra&#x2F;httpd-vhosts.conf</h1><p>将 DocumentRoot “&#x2F;home&#x2F;wwwroot&#x2F;default” 及 Directory “&#x2F;home&#x2F;wwwroot&#x2F;default” 两处中的 “&#x2F;home&#x2F;wwwroot&#x2F;default” 修改为需要IP访问的域名，如 “&#x2F;home&#x2F;wwwroot&#x2F;seoimo.com”。</p>
<p>在安装WordPress之前，建议安装PHP缓存加速类扩展，对降低VPS压力和提高WordPress速度大有裨益。</p>
<p>推荐安装两个：OPcache和Memcached。</p>
<p>首先，需要进入LNMP解压目录 lnmp1.4-full （lnmp1.3则改为lnmp1.3-full）：</p>
<h1 id="cd-x2F-root-x2F-lnmp1-4-full"><a href="#cd-x2F-root-x2F-lnmp1-4-full" class="headerlink" title="cd &#x2F;root&#x2F;lnmp1.4-full"></a>cd &#x2F;root&#x2F;lnmp1.4-full</h1><p>回车，接下来安装Opcache：</p>
<h1 id="x2F-addons-sh-install-opcache"><a href="#x2F-addons-sh-install-opcache" class="headerlink" title=".&#x2F;addons.sh install opcache"></a>.&#x2F;addons.sh install opcache</h1><p>回车，再回车。</p>
<p>当出现 “Opcache installed successfully, enjoy it!” 字样时，即表示安装成功。</p>
<p>接着安装Memcached：</p>
<h1 id="x2F-addons-sh-install-memcached"><a href="#x2F-addons-sh-install-memcached" class="headerlink" title=".&#x2F;addons.sh install memcached"></a>.&#x2F;addons.sh install memcached</h1><p>回车，选择2，回车，再回车。</p>
<p>当出现 “Memcached installed successfully, enjoy it!” 字样时，即表示安装成功。</p>
<p>此时，可以删除之前下载的lnmp1.4安装包，以节省空间。</p>
<h1 id="rm-rf-x2F-root-x2F-lnmp1-4-full-tar-gz"><a href="#rm-rf-x2F-root-x2F-lnmp1-4-full-tar-gz" class="headerlink" title="rm -rf &#x2F;root&#x2F;lnmp1.4-full.tar.gz"></a>rm -rf &#x2F;root&#x2F;lnmp1.4-full.tar.gz</h1><p>回车即可。</p>
<p>接下来就可以添加域名安装WordPress了。</p>
<p>#7添加域名 &#x2F; 虚拟主机<br>请提前做好域名解析，例如：</p>
<p>添加域名：</p>
<h1 id="lnmp-vhost-add"><a href="#lnmp-vhost-add" class="headerlink" title="lnmp vhost add"></a>lnmp vhost add</h1><p>回车，提示输入域名：</p>
<h1 id="seoimo-com"><a href="#seoimo-com" class="headerlink" title="seoimo.com"></a>seoimo.com</h1><p>回车，提示是否添加多个域名：</p>
<h1 id="y"><a href="#y" class="headerlink" title="y"></a>y</h1><p>回车，博主习惯绑定带 www 的域名：</p>
<h1 id="www-seoimo-com"><a href="#www-seoimo-com" class="headerlink" title="www.seoimo.com"></a><a href="http://www.seoimo.com/">www.seoimo.com</a></h1><p>回车，显示网站目录。默认 &#x2F;home&#x2F;wwwroot&#x2F;seoimo.com 即可。</p>
<p>若是绑定二级域名，必须输入完整的目录路径。例如：</p>
<p>将 tools.seoimo.com 绑定到网站根目录下的 tools 文件夹，则应输入：</p>
<p>&#x2F;home&#x2F;wwwroot&#x2F;seoimo.com&#x2F;tools</p>
<p>回车。博主习惯不需要日志记录，但建议你开启（y）：</p>
<h1 id="n"><a href="#n" class="headerlink" title="n"></a>n</h1><p>会车后，输入站长邮箱。</p>
<p>继续回车，提示数据库名和数据库用户名是否保持一致。</p>
<h1 id="y-1"><a href="#y-1" class="headerlink" title="y"></a>y</h1><p>回车，输入 root 用户的数据库密码（不会显示，在#6搭建LAMP环境中设置好的）。</p>
<p>回车，输入数据库名，自行设置。例如：</p>
<h1 id="sjk-seoimo"><a href="#sjk-seoimo" class="headerlink" title="sjk_seoimo"></a>sjk_seoimo</h1><p>回车，设置数据库密码。例如：</p>
<h1 id="sjkmmseoimo"><a href="#sjkmmseoimo" class="headerlink" title="sjkmmseoimo"></a>sjkmmseoimo</h1><p>回车，再回车。</p>
<p>当出现下图所示画面时候，说明添加域名已经成功。</p>
<p>关于FTP功能</p>
<p>LNMP1.3默认是不安装FTP服务的。</p>
<p>需要上下传文件时，设置FTP软件（如FlashFXP）连接类型为 “SFTP over SSH”即可。</p>
<p>但是，特定情况下仍需要开启FTP服务的话，可进行如下操作：</p>
<h1 id="cd-x2F-root-x2F-lnmp1-3-full"><a href="#cd-x2F-root-x2F-lnmp1-3-full" class="headerlink" title="cd &#x2F;root&#x2F;lnmp1.3-full"></a>cd &#x2F;root&#x2F;lnmp1.3-full</h1><h1 id="x2F-pureftpd-sh"><a href="#x2F-pureftpd-sh" class="headerlink" title=".&#x2F;pureftpd.sh"></a>.&#x2F;pureftpd.sh</h1><p>安装成功后，添加FTP用户：</p>
<h1 id="lnmp-ftp-add"><a href="#lnmp-ftp-add" class="headerlink" title="lnmp ftp add"></a>lnmp ftp add</h1><p>设置好FTP用户名、密码以及访问目录的绝对路径（以 “&#x2F;” 开头）！！</p>
<p>特别提示：</p>
<p>使用FTP软件连接VPS后，若无法进行上传和下载，并提示 “553 Can’t open that file: Permission denied” 时，可能需要更改下权限：</p>
<h1 id="chown-www-www-R-x2F-目录路径-x2F"><a href="#chown-www-www-R-x2F-目录路径-x2F" class="headerlink" title="chown www:www -R &#x2F;目录路径&#x2F;"></a>chown www:www -R &#x2F;目录路径&#x2F;</h1><p>#8安装WordPress程序<br>以下的步骤想必应该很熟悉，和带Cpanel或DirectAdmin面板安装WordPress过程比较类似。只不过，在面板上操作是可视化的，比较直观。而在这里是通过命令执行的，非可视。只要输入命令时细心点，一般是不会出问题的。</p>
<p>首先，进入添加的域名目录：</p>
<h1 id="cd-x2F-home-x2F-wwwroot-x2F-seoimo-com"><a href="#cd-x2F-home-x2F-wwwroot-x2F-seoimo-com" class="headerlink" title="cd &#x2F;home&#x2F;wwwroot&#x2F;seoimo.com"></a>cd &#x2F;home&#x2F;wwwroot&#x2F;seoimo.com</h1><p>回车。然后浏览器中打开WordPress中文站点，下载最新的程序压缩包：</p>
<h1 id="wget-https-cn-wordpress-org-wordpress-4-9-4-zh-CN-tar-gz"><a href="#wget-https-cn-wordpress-org-wordpress-4-9-4-zh-CN-tar-gz" class="headerlink" title="wget https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz"></a>wget <a href="https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz">https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz</a></h1><p>回车。等待下载完之后，解压压缩包：</p>
<h1 id="tar-zxvf-wordpress-4-9-4-zh-CN-tar-gz"><a href="#tar-zxvf-wordpress-4-9-4-zh-CN-tar-gz" class="headerlink" title="tar -zxvf wordpress-4.9.4-zh_CN.tar.gz"></a>tar -zxvf wordpress-4.9.4-zh_CN.tar.gz</h1><p>回车。</p>
<p>接下来，将解压出来的wordpress文件夹内全部文件移动到当前的域名目录下（别忘了后面的.）。</p>
<h1 id="mv-wordpress-x2F"><a href="#mv-wordpress-x2F" class="headerlink" title="mv wordpress&#x2F;* ."></a>mv wordpress&#x2F;* .</h1><p>回车。然后，可以选择删掉空文件夹wordpress及源程序（可选）。</p>
<h1 id="rm-rf-wordpress"><a href="#rm-rf-wordpress" class="headerlink" title="rm -rf wordpress"></a>rm -rf wordpress</h1><h1 id="rm-rf-wordpress-4-9-4-zh-CN-tar-gz"><a href="#rm-rf-wordpress-4-9-4-zh-CN-tar-gz" class="headerlink" title="rm -rf wordpress-4.9.4-zh_CN.tar.gz"></a>rm -rf wordpress-4.9.4-zh_CN.tar.gz</h1><p>回车，搞定。</p>
<p>为避免因权限的问题导致安装出错，比如wp-config.php无法创建、需要提供FTP用户密码以及主题和插件不能更新等，建议赋予网站根目录文件的可写权限。</p>
<h1 id="chmod-R-755-x2F-home-x2F-wwwroot"><a href="#chmod-R-755-x2F-home-x2F-wwwroot" class="headerlink" title="chmod -R 755 &#x2F;home&#x2F;wwwroot"></a>chmod -R 755 &#x2F;home&#x2F;wwwroot</h1><h1 id="chown-R-www-x2F-home-x2F-wwwroot"><a href="#chown-R-www-x2F-home-x2F-wwwroot" class="headerlink" title="chown -R www &#x2F;home&#x2F;wwwroot"></a>chown -R www &#x2F;home&#x2F;wwwroot</h1><p>【温馨提示】以后每添加一个域名，都要对应地执行一次以上两步操作。</p>
<p>另外，LNMP安装包默认禁用了 scandir 函数，这会导致WordPress后台看不到安装的主题，以及当前主题总显示 “有新的翻译可用” 的提醒。所以，需要开启此函数。</p>
<h1 id="vi-x2F-usr-x2F-local-x2F-php-x2F-etc-x2F-php-ini"><a href="#vi-x2F-usr-x2F-local-x2F-php-x2F-etc-x2F-php-ini" class="headerlink" title="vi &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php.ini"></a>vi &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php.ini</h1><p>回车，然后查找 scandir 函数。</p>
<p>?scandir 或者 &#x2F;scandir</p>
<p>回车，然后按delete键删除，接下来需要保存并退出vi命令。</p>
<h1 id="wq"><a href="#wq" class="headerlink" title=":wq"></a>:wq</h1><p>回车。然后重启一下LNMP：</p>
<h1 id="lnmp-restart"><a href="#lnmp-restart" class="headerlink" title="lnmp restart"></a>lnmp restart</h1><p>好了，打开博客网址进行最后的安装吧！（注意要提前设置好域名解析）</p>
<p>至此，在VPS上通过搭建LAMP环境安装WordPress博客已经大功告成了。</p>
<p>接下来，我们来对VPS进行必要的配置优化，以便进一步提高主机性能。</p>
<p>#9VPS配置优化<br>关于VPS服务器方面的配置优化绝对是个技术活，如果深入研究的话会比较复杂。博主非技术大牛，在这里仅介绍一下常用的三点：优化php.ini配置、添加swap交换分区和开启Keep-Alive功能 + 优化Httpd配置。</p>
<p>#9.1优化php.ini配置<br>用vi命令修改 php.ini 文件。</p>
<h1 id="vi-x2F-usr-x2F-local-x2F-php-x2F-etc-x2F-php-ini-1"><a href="#vi-x2F-usr-x2F-local-x2F-php-x2F-etc-x2F-php-ini-1" class="headerlink" title="vi &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php.ini"></a>vi &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php.ini</h1><p>单击 i 键进入 insert 模式，按 “上下左右” 四个方向键找到并修改以下两项：</p>
<p>max_execution_time &#x3D; 300<br>memory_limit &#x3D; 64M<br>前者表示允许脚本最大执行时间300秒，后者表示允许单个脚本允许使用的最大内存64M（通常1G内存以下设置64M或128M即可）。</p>
<p>单击 Esc 键退出 insert 模式，输入以下命令保存退出。注意英文状态下输入！</p>
<h1 id="wq-1"><a href="#wq-1" class="headerlink" title=":wq"></a>:wq</h1><p>回车。然后重启一下LNMP：</p>
<h1 id="lnmp-restart-1"><a href="#lnmp-restart-1" class="headerlink" title="lnmp restart"></a>lnmp restart</h1><p>回车。</p>
<p>#9.2添加Swap交换分区<br>①此方法只适用于虚拟化技术为KVM和Xen的VPS，OpenVZ不支持添加Swap交换分区，也就说说搬瓦工VPS（KVM-512MB套餐除外）不能用此方法增加Swap空间；</p>
<p>②若搬瓦工VPS管理后台Swap状态长期显示红色，则表明VPS内存已满，该考虑升级VPS了。</p>
<p>关于Swap分区的具体含义在此不再赘述，详细可以参考百度百科：Swap分区</p>
<p>简单来说，当VPS的物理内存不够用时，系统会占用一部分Swap分区作为临时内存，目的是防止因物理内存耗尽而可能出现的错误。</p>
<p>因此，对小内存VPS来说，设置一定大小的Swap交换分区显然很有意义。</p>
<p>但是，由于硬盘的 I&#x2F;O 读写速度远不能和内存的读写速度相提并论（可能相差几十倍），使用Swap交换分区时，系统可能会变得特别缓慢、卡顿，甚至程序会出现错误。</p>
<p>因此，要尽量避免使用Swap分区，不得不使用时也不宜设置过大（大了也没用还占用空间），也就是说：我们不能指望用Swap来代替物理内存使用。甚至于，当你的VPS物理内存很充足时，完全可以禁用Swap以提高VPS的响应速度。</p>
<p>当物理内存（实际使用内存）长期处于耗尽状态时，正确的做法就是该升级套餐了。</p>
<p>添加Swap交换分区</p>
<p>使用root用户登陆PuTTY，先看看是否已经添加了Swap:</p>
<h1 id="free-m"><a href="#free-m" class="headerlink" title="free -m"></a>free -m</h1><p>若显示为 Swap &#x3D; 0 的话，表明没有添加。否则，说明系统已自带Swap交换分区。</p>
<p>进入var文件目录：</p>
<h1 id="cd-x2F-var-x2F"><a href="#cd-x2F-var-x2F" class="headerlink" title="cd &#x2F;var&#x2F;"></a>cd &#x2F;var&#x2F;</h1><p>获取256MB的文件块（一般设置为内存的0.5倍即可）：</p>
<h1 id="dd-if-x3D-x2F-dev-x2F-zero-of-x3D-swapfile-bs-x3D-1M-count-x3D-256"><a href="#dd-if-x3D-x2F-dev-x2F-zero-of-x3D-swapfile-bs-x3D-1M-count-x3D-256" class="headerlink" title="dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;swapfile bs&#x3D;1M count&#x3D;256"></a>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;swapfile bs&#x3D;1M count&#x3D;256</h1><p>创建Swap文件：</p>
<h1 id="x2F-sbin-x2F-mkswap-swapfile"><a href="#x2F-sbin-x2F-mkswap-swapfile" class="headerlink" title="&#x2F;sbin&#x2F;mkswap swapfile"></a>&#x2F;sbin&#x2F;mkswap swapfile</h1><p>激活Swap文件：</p>
<h1 id="x2F-sbin-x2F-swapon-swapfile"><a href="#x2F-sbin-x2F-swapon-swapfile" class="headerlink" title="&#x2F;sbin&#x2F;swapon swapfile"></a>&#x2F;sbin&#x2F;swapon swapfile</h1><p>为了安全，建议修改一下权限：</p>
<h1 id="chmod-0600-x2F-var-x2F-swapfile"><a href="#chmod-0600-x2F-var-x2F-swapfile" class="headerlink" title="chmod 0600 &#x2F;var&#x2F;swapfile"></a>chmod 0600 &#x2F;var&#x2F;swapfile</h1><p>将swapfile添加到fstab文件中，开机自动启动：</p>
<h1 id="echo-“-x2F-var-x2F-swapfile-swap-swap-defaults-0-0”-gt-gt-x2F-etc-x2F-fstab"><a href="#echo-“-x2F-var-x2F-swapfile-swap-swap-defaults-0-0”-gt-gt-x2F-etc-x2F-fstab" class="headerlink" title="echo “&#x2F;var&#x2F;swapfile swap swap defaults 0 0” &gt;&gt; &#x2F;etc&#x2F;fstab"></a>echo “&#x2F;var&#x2F;swapfile swap swap defaults 0 0” &gt;&gt; &#x2F;etc&#x2F;fstab</h1><p>搞定了。此时查看内存信息:</p>
<h1 id="free-m-1"><a href="#free-m-1" class="headerlink" title="free -m"></a>free -m</h1><p>出现 “Swap: 256” 字样表示设置成功。</p>
<p>修改 swappiness 默认值</p>
<p>上面说了，我们要尽量避免使用Swap分区。所以，这里我们需要额外做些修改，使系统尽可能的优先使用物理内存。</p>
<p>首先查看下 swappiness 的默认值：</p>
<h1 id="cat-x2F-proc-x2F-sys-x2F-vm-x2F-swappiness"><a href="#cat-x2F-proc-x2F-sys-x2F-vm-x2F-swappiness" class="headerlink" title="cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness"></a>cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness</h1><p>通常，返回值是60（默认值）。</p>
<p>实际上，swappiness &#x3D; 0 表示最大限度使用物理内存，然后才使用swap分区；swappiness ＝ 100 表示系统积极的使用swap分区，然后才使用物理内存。</p>
<p>显然，这里我们需要降低 swappiness 的默认值。</p>
<h1 id="vi-x2F-etc-x2F-sysctl-conf"><a href="#vi-x2F-etc-x2F-sysctl-conf" class="headerlink" title="vi &#x2F;etc&#x2F;sysctl.conf"></a>vi &#x2F;etc&#x2F;sysctl.conf</h1><p>在里面添加 vm.swappiness &#x3D; 10 字段，然后退出保存。</p>
<p>或者：</p>
<h1 id="echo-“vm-swappiness-x3D-10”-gt-gt-x2F-etc-x2F-sysctl-conf"><a href="#echo-“vm-swappiness-x3D-10”-gt-gt-x2F-etc-x2F-sysctl-conf" class="headerlink" title="echo “vm.swappiness &#x3D; 10” &gt;&gt; &#x2F;etc&#x2F;sysctl.conf"></a>echo “vm.swappiness &#x3D; 10” &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</h1><p>然后 # reboot 一下VPS即可。</p>
<p>重置Swap交换分区</p>
<p>若系统已设置Swap，但是需要对其做出更改的话，可以将其删除。</p>
<p>首先查看Swap位置：</p>
<h1 id="swapon-s"><a href="#swapon-s" class="headerlink" title="swapon -s"></a>swapon -s</h1><p>比如显示为 &#x2F;var&#x2F;swap，则停止并删除swap：</p>
<h1 id="x2F-sbin-x2F-swapoff-x2F-var-x2F-swap"><a href="#x2F-sbin-x2F-swapoff-x2F-var-x2F-swap" class="headerlink" title="&#x2F;sbin&#x2F;swapoff &#x2F;var&#x2F;swap"></a>&#x2F;sbin&#x2F;swapoff &#x2F;var&#x2F;swap</h1><h1 id="rm-rf-x2F-var-x2F-swap"><a href="#rm-rf-x2F-var-x2F-swap" class="headerlink" title="rm -rf &#x2F;var&#x2F;swap"></a>rm -rf &#x2F;var&#x2F;swap</h1><p>然后，将其删除开机启动：</p>
<h1 id="vi-x2F-etc-x2F-fstab"><a href="#vi-x2F-etc-x2F-fstab" class="headerlink" title="vi &#x2F;etc&#x2F;fstab"></a>vi &#x2F;etc&#x2F;fstab</h1><p>将 &#x2F;var&#x2F;swap swap swap defaults 0 0 该行删除，然后保存退出。</p>
<p>#9.3开启Keep-Alive功能 + 优化Httpd配置<br>开启Keep-Alive功能可使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。可见，对访问静态网页时，开启Keep-Alive是很有用的。</p>
<p>因为在进行WordPress管理方面上的优化时，需要安装静态缓存插件，所以，开启Keep-Alive功能十分必要。</p>
<h1 id="vi-x2F-usr-x2F-local-x2F-apache-x2F-conf-x2F-extra-x2F-httpd-default-conf"><a href="#vi-x2F-usr-x2F-local-x2F-apache-x2F-conf-x2F-extra-x2F-httpd-default-conf" class="headerlink" title="vi &#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf&#x2F;extra&#x2F;httpd-default.conf"></a>vi &#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf&#x2F;extra&#x2F;httpd-default.conf</h1><p>依次修改以下四条：</p>
<p>Timeout 30<br>KeepAlive On<br>MaxKeepAliveRequests 100<br>KeepAliveTimeout 5<br>退出，保存：</p>
<h1 id="wq-2"><a href="#wq-2" class="headerlink" title=":wq"></a>:wq</h1><p>接下来优化 Httpd 配置（ prefork 模式下），以降低Apache内存占用。此步骤对小内存VPS（如搬瓦工256MB方案）尤为重要。</p>
<h1 id="vi-x2F-usr-x2F-local-x2F-apache-x2F-conf-x2F-extra-x2F-httpd-mpm-conf"><a href="#vi-x2F-usr-x2F-local-x2F-apache-x2F-conf-x2F-extra-x2F-httpd-mpm-conf" class="headerlink" title="vi &#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf&#x2F;extra&#x2F;httpd-mpm.conf"></a>vi &#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf&#x2F;extra&#x2F;httpd-mpm.conf</h1><p>依次修改如下：</p>
<p>退出，保存：</p>
<h1 id="wq-3"><a href="#wq-3" class="headerlink" title=":wq"></a>:wq</h1><p>然后，重启httpd服务：</p>
<h1 id="service-httpd-restart"><a href="#service-httpd-restart" class="headerlink" title="service httpd restart"></a>service httpd restart</h1><p>#10删除mysql-bin.0000<em>日志文件<br>博主所用的LNMP一键安装包默认开启了日志记录，这样就会在 &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;var&#x2F;目录下面生成大量 mysql-bin.0000</em> 类似的文件，大小甚至达到几个G！</p>
<p>所以，我们需要做下调整，禁止保留日志记录以防止占用太多空间。</p>
<p>于是，编辑 &#x2F;etc&#x2F;my.cnf 文件：</p>
<h1 id="vi-x2F-etc-x2F-my-cnf"><a href="#vi-x2F-etc-x2F-my-cnf" class="headerlink" title="vi &#x2F;etc&#x2F;my.cnf"></a>vi &#x2F;etc&#x2F;my.cnf</h1><p>找到以下两行代码，在前面添加 #，彻底禁用MySQL日志：</p>
<p>max_connect_errors &#x3D; 100<br>open_files_limit &#x3D; 65535<br>#log-bin&#x3D;mysql-bin<br>#binlog_format&#x3D;mixed<br>server-id &#x3D; 1<br>expire_logs_days &#x3D; 10<br>保存退出，重启一下MySQL：</p>
<h1 id="x2F-etc-x2F-init-d-x2F-mysql-restart"><a href="#x2F-etc-x2F-init-d-x2F-mysql-restart" class="headerlink" title="&#x2F;etc&#x2F;init.d&#x2F;mysql restart"></a>&#x2F;etc&#x2F;init.d&#x2F;mysql restart</h1><p>#11Linux-VPS安全配置 &#x2F; 防护措施<br>博主以为，VPS的安全防护绝对是运行网站的重中之重。防护措施做不好，轻者给后期运行带来无穷无尽的烦恼，重者造成网站瘫痪甚至数据清空，那就真的欲哭无泪了。</p>
<p>好在Linux本身已经足够安全稳定，只要你不泄露关键的登录信息（比如SSH端口和ROOT密码等），通常不会产生重大事故。但即便如此，我们还是应该未雨绸缪，提前做好VPS的安全防护措施。</p>
<p>那么，VPS安全配置究竟该如何做呢？</p>
<p>在这里，博主结合自己建站经验，介绍一下Linux-VPS安防措施里最有效的三个方面：修改SSH端口、阻止SSH暴力破解和防御DDOS攻击。</p>
<p>#11.1修改SSH端口（强烈推荐）<br>首先，编辑配置文件：</p>
<h1 id="vi-x2F-etc-x2F-ssh-x2F-sshd-config-1"><a href="#vi-x2F-etc-x2F-ssh-x2F-sshd-config-1" class="headerlink" title="vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config"></a>vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</h1><p>找到 #Port 22 这行（默认端口22），把前面的 # 去掉，然后再添加一个新的端口（不超过65535），比如 Port 56789：</p>
<p>保存，重启SSH即可：</p>
<h1 id="service-sshd-restart-1"><a href="#service-sshd-restart-1" class="headerlink" title="service sshd restart"></a>service sshd restart</h1><p>接下来，在防火墙 &#x2F;etc&#x2F;sysconfig&#x2F;iptables 里开启此端口：</p>
<h1 id="iptables-A-INPUT-p-tcp-m-tcp-–dport-56789-j-ACCEPT"><a href="#iptables-A-INPUT-p-tcp-m-tcp-–dport-56789-j-ACCEPT" class="headerlink" title="iptables -A INPUT -p tcp -m tcp –dport 56789 -j ACCEPT"></a>iptables -A INPUT -p tcp -m tcp –dport 56789 -j ACCEPT</h1><p>保存并重启防火墙：</p>
<h1 id="service-iptables-save"><a href="#service-iptables-save" class="headerlink" title="service iptables save"></a>service iptables save</h1><h1 id="service-iptables-restart"><a href="#service-iptables-restart" class="headerlink" title="service iptables restart"></a>service iptables restart</h1><p>或者，也可以编辑 &#x2F;etc&#x2F;sysconfig&#x2F;iptables 文件，复制端口 22 的规则，粘贴在其下另起一行。</p>
<p>按 :wq 保存退出后，重启防火墙。</p>
<p>查看防火墙状态，看看端口是否开启成功：</p>
<h1 id="service-iptables-status"><a href="#service-iptables-status" class="headerlink" title="service iptables status"></a>service iptables status</h1><p>现在，使用新的端口连接SSH。</p>
<p>若成功登录，则再次编辑 &#x2F;etc&#x2F;ssh&#x2F;sshd_config，将里面的 Port 22 前加 # 保存后，重启SSH即可。</p>
<p>温馨提示：</p>
<p>CentOS7.X中默认的防火墙 firewalld 而非CentOS6.X中的 iptables 。如果你也像博主一样感觉用着很不爽，需要换回 iptables 的，可以参考如下设置。</p>
<p>1、关闭firewall并禁止开启启动：</p>
<h1 id="service-firewalld-stop"><a href="#service-firewalld-stop" class="headerlink" title="service firewalld stop"></a>service firewalld stop</h1><h1 id="systemctl-disable-firewalld-service"><a href="#systemctl-disable-firewalld-service" class="headerlink" title="systemctl disable firewalld.service"></a>systemctl disable firewalld.service</h1><p>2、安装iptables：</p>
<h1 id="yum-install-iptables-services"><a href="#yum-install-iptables-services" class="headerlink" title="yum install iptables-services"></a>yum install iptables-services</h1><p>3、修改iptables配置：</p>
<h1 id="vi-x2F-etc-x2F-sysconfig-x2F-iptables"><a href="#vi-x2F-etc-x2F-sysconfig-x2F-iptables" class="headerlink" title="vi &#x2F;etc&#x2F;sysconfig&#x2F;iptables"></a>vi &#x2F;etc&#x2F;sysconfig&#x2F;iptables</h1><p>粘贴如下内容（可按需要自行增删）：</p>
<p>*filter<br>:INPUT ACCEPT [0:0]<br>:FORWARD ACCEPT [0:0]<br>:OUTPUT ACCEPT [0:0]<br>-A INPUT -p icmp -j ACCEPT<br>-A INPUT -i lo -j ACCEPT<br>-A INPUT -m state –state RELATED,ESTABLISHED -j ACCEPT<br>-A INPUT -p tcp -m tcp –dport 22 -j ACCEPT<br>-A INPUT -p tcp -m tcp –dport 80 -j ACCEPT<br>-A INPUT -p tcp -m tcp –dport 3306 -j DROP<br>-A INPUT -p tcp -m tcp –dport 443 -j ACCEPT<br>-A INPUT -p tcp -m tcp –dport 11211 -j DROP<br>-A INPUT -p udp -m udp –dport 11211 -j DROP<br>-A INPUT -j REJECT –reject-with icmp-host-prohibited<br>-A FORWARD -j REJECT –reject-with icmp-host-prohibited<br>COMMIT<br>按 :wq 保存退出后，重启iptables，并设置为开机启动：</p>
<h1 id="service-iptables-restart-1"><a href="#service-iptables-restart-1" class="headerlink" title="service iptables restart"></a>service iptables restart</h1><h1 id="systemctl-enable-iptables-service"><a href="#systemctl-enable-iptables-service" class="headerlink" title="systemctl enable iptables.service"></a>systemctl enable iptables.service</h1><p>【温馨提示】搬瓦工VPS生成的SSH端口是随机的（非默认端口22），因此，可无需再次修改。</p>
<p>#11.2阻止SSH暴力破解（可选）<br>更改默认的22端口后，已经可以阻止绝大多数的SSH非法请求了。</p>
<p>但是，如果遇到程序自动扫描SSH端口并进行暴力破解，那么仅仅修改端口的话，可能还是不够的。因此，我们需要安装DenyHosts进行自动拦截。</p>
<p>（温馨提示：设置高强度密码+更改默认SSH端口后，视实际需要，本步骤可以省略。）</p>
<p>首先，下载 DenyHosts 并解压到 root 目录：</p>
<h1 id="cd-1"><a href="#cd-1" class="headerlink" title="cd ~"></a>cd ~</h1><h1 id="wget-http-soft-vpser-net-security-denyhosts-DenyHosts-2-6-tar-gz"><a href="#wget-http-soft-vpser-net-security-denyhosts-DenyHosts-2-6-tar-gz" class="headerlink" title="wget http://soft.vpser.net/security/denyhosts/DenyHosts-2.6.tar.gz"></a>wget <a href="http://soft.vpser.net/security/denyhosts/DenyHosts-2.6.tar.gz">http://soft.vpser.net/security/denyhosts/DenyHosts-2.6.tar.gz</a></h1><h1 id="tar-zxvf-DenyHosts-2-6-tar-gz"><a href="#tar-zxvf-DenyHosts-2-6-tar-gz" class="headerlink" title="tar -zxvf DenyHosts-2.6.tar.gz"></a>tar -zxvf DenyHosts-2.6.tar.gz</h1><h1 id="cd-DenyHosts-2-6"><a href="#cd-DenyHosts-2-6" class="headerlink" title="cd DenyHosts-2.6"></a>cd DenyHosts-2.6</h1><p>接下来，进行安装和配置：</p>
<h1 id="python-setup-py-install"><a href="#python-setup-py-install" class="headerlink" title="python setup.py install"></a>python setup.py install</h1><h1 id="cd-x2F-usr-x2F-share-x2F-denyhosts-x2F"><a href="#cd-x2F-usr-x2F-share-x2F-denyhosts-x2F" class="headerlink" title="cd &#x2F;usr&#x2F;share&#x2F;denyhosts&#x2F;"></a>cd &#x2F;usr&#x2F;share&#x2F;denyhosts&#x2F;</h1><h1 id="cp-denyhosts-cfg-dist-denyhosts-cfg"><a href="#cp-denyhosts-cfg-dist-denyhosts-cfg" class="headerlink" title="cp denyhosts.cfg-dist denyhosts.cfg"></a>cp denyhosts.cfg-dist denyhosts.cfg</h1><h1 id="cp-daemon-control-dist-daemon-control"><a href="#cp-daemon-control-dist-daemon-control" class="headerlink" title="cp daemon-control-dist daemon-control"></a>cp daemon-control-dist daemon-control</h1><p>然后，设置开机启动：</p>
<h1 id="chown-root-daemon-control"><a href="#chown-root-daemon-control" class="headerlink" title="chown root daemon-control"></a>chown root daemon-control</h1><h1 id="chmod-700-daemon-control"><a href="#chmod-700-daemon-control" class="headerlink" title="chmod 700 daemon-control"></a>chmod 700 daemon-control</h1><h1 id="x2F-daemon-control-start"><a href="#x2F-daemon-control-start" class="headerlink" title=".&#x2F;daemon-control start"></a>.&#x2F;daemon-control start</h1><h1 id="echo-“-x2F-usr-x2F-share-x2F-denyhosts-x2F-daemon-control-start”-gt-gt-x2F-etc-x2F-rc-local"><a href="#echo-“-x2F-usr-x2F-share-x2F-denyhosts-x2F-daemon-control-start”-gt-gt-x2F-etc-x2F-rc-local" class="headerlink" title="echo “&#x2F;usr&#x2F;share&#x2F;denyhosts&#x2F;daemon-control start” &gt;&gt; &#x2F;etc&#x2F;rc.local"></a>echo “&#x2F;usr&#x2F;share&#x2F;denyhosts&#x2F;daemon-control start” &gt;&gt; &#x2F;etc&#x2F;rc.local</h1><p>至此，DenyHosts就算安装完成了。通常，DenyHosts默认的阻拦配置就可以。当然，你也可以自行设置：</p>
<h1 id="vi-x2F-usr-x2F-share-x2F-denyhosts-x2F-denyhosts-cfg"><a href="#vi-x2F-usr-x2F-share-x2F-denyhosts-x2F-denyhosts-cfg" class="headerlink" title="vi &#x2F;usr&#x2F;share&#x2F;denyhosts&#x2F;denyhosts.cfg"></a>vi &#x2F;usr&#x2F;share&#x2F;denyhosts&#x2F;denyhosts.cfg</h1><p>自行设置如下几个主要的参数：</p>
<p>PURGE_DENY &#x3D; 5d<br>DENY_THRESHOLD_INVALID &#x3D; 5<br>DENY_THRESHOLD_VALID &#x3D; 5<br>DENY_THRESHOLD_ROOT &#x3D; 5<br>HOSTNAME_LOOKUP &#x3D; NO<br>最后，重启一下DenyHosts即可：</p>
<h1 id="x2F-usr-x2F-share-x2F-denyhosts-x2F-daemon-control-restart"><a href="#x2F-usr-x2F-share-x2F-denyhosts-x2F-daemon-control-restart" class="headerlink" title="&#x2F;usr&#x2F;share&#x2F;denyhosts&#x2F;daemon-control restart"></a>&#x2F;usr&#x2F;share&#x2F;denyhosts&#x2F;daemon-control restart</h1><p>倘若自己的IP（如何查看）被误封，可在 &#x2F;etc&#x2F;hosts.deny 中删除对应的IP后重启DenyHosts即可。</p>
<p>卸载DenyHosts</p>
<p>卸载DenyHosts比较麻烦，官方貌似没有提供具体卸载方法。</p>
<p>不过，我们可以通过 停用 + 禁止开机启动 来将其关闭。</p>
<p>停用DenyHosts：</p>
<h1 id="x2F-usr-x2F-share-x2F-denyhosts-x2F-daemon-control-stop"><a href="#x2F-usr-x2F-share-x2F-denyhosts-x2F-daemon-control-stop" class="headerlink" title="&#x2F;usr&#x2F;share&#x2F;denyhosts&#x2F;daemon-control stop"></a>&#x2F;usr&#x2F;share&#x2F;denyhosts&#x2F;daemon-control stop</h1><p>禁止开机启动，编辑 &#x2F;etc&#x2F;rc.local ：</p>
<h1 id="vi-x2F-etc-x2F-rc-local"><a href="#vi-x2F-etc-x2F-rc-local" class="headerlink" title="vi &#x2F;etc&#x2F;rc.local"></a>vi &#x2F;etc&#x2F;rc.local</h1><p>将 &#x2F;usr&#x2F;share&#x2F;denyhosts&#x2F;daemon-control start 这行删除，保存退出。</p>
<p>如此，就实现了停用DenyHosts的目的。</p>
<p>#11.3防御DDOS攻击<br>这里主要用到一款优秀的免费软件DDoS Deflate：<a href="http://deflate.medialayer.com/">http://deflate.medialayer.com/</a></p>
<p>首先，下载DDoS Deflate并安装：</p>
<h1 id="cd-2"><a href="#cd-2" class="headerlink" title="cd ~"></a>cd ~</h1><h1 id="wget-http-www-inetbase-com-scripts-ddos-install-sh"><a href="#wget-http-www-inetbase-com-scripts-ddos-install-sh" class="headerlink" title="wget http://www.inetbase.com/scripts/ddos/install.sh"></a>wget <a href="http://www.inetbase.com/scripts/ddos/install.sh">http://www.inetbase.com/scripts/ddos/install.sh</a></h1><h1 id="chmod-0700-install-sh"><a href="#chmod-0700-install-sh" class="headerlink" title="chmod 0700 install.sh"></a>chmod 0700 install.sh</h1><h1 id="x2F-install-sh"><a href="#x2F-install-sh" class="headerlink" title=".&#x2F;install.sh"></a>.&#x2F;install.sh</h1><p>按 Q 键退出，然后编辑配置文件：</p>
<h1 id="vi-x2F-usr-x2F-local-x2F-ddos-x2F-ddos-conf"><a href="#vi-x2F-usr-x2F-local-x2F-ddos-x2F-ddos-conf" class="headerlink" title="vi &#x2F;usr&#x2F;local&#x2F;ddos&#x2F;ddos.conf"></a>vi &#x2F;usr&#x2F;local&#x2F;ddos&#x2F;ddos.conf</h1><p>推荐做如下更改，其余默认即可：</p>
<p>NO_OF_CONNECTIONS &#x3D; 100<br>APF_BAN &#x3D; 0<br>BAN_PERIOD &#x3D; 36000<br>保存后退出。</p>
<p>#12MySQL数据库优化<br>众所周知，LAMP是比较依赖数据库的。尤其是搭建的WordPress博客没进行HTML静态缓存的情况下，对数据库的依赖更加严重。</p>
<p>在我看来，对MySQL数据库的优化是特别重要也是特别困难的一项工作。不仅仅是因为MySQL设置里参数众多，让人看着头疼迷糊，更是因为这些参数没有一个固定的最优组合。参数设置的激进，浪费VPS资源，设置的保守，又可能限制程序的正常运行。</p>
<p>那么，究竟该怎么设置才合理呢？</p>
<p>根据博主的经验，对MySQL众多参数中最重要的以下几点进行合理的优化后，基本可以保证中小流量（比如＜5000IP&#x2F;天）博客的正常访问。</p>
<p>为确保安全，首先备份一下 &#x2F;etc&#x2F;my.cnf ：</p>
<h1 id="cp-x2F-etc-x2F-my-cnf-x2F-etc-x2F-my-cnf-old"><a href="#cp-x2F-etc-x2F-my-cnf-x2F-etc-x2F-my-cnf-old" class="headerlink" title="cp &#x2F;etc&#x2F;my.cnf &#x2F;etc&#x2F;my.cnf.old"></a>cp &#x2F;etc&#x2F;my.cnf &#x2F;etc&#x2F;my.cnf.old</h1><p>接下来，修改 &#x2F;etc&#x2F;my.cnf 中的以下参数：</p>
<h1 id="vi-x2F-etc-x2F-my-cnf-1"><a href="#vi-x2F-etc-x2F-my-cnf-1" class="headerlink" title="vi &#x2F;etc&#x2F;my.cnf"></a>vi &#x2F;etc&#x2F;my.cnf</h1><p>key_buffer_size &#x3D; 15M<br>query_cache_size &#x3D; 15M<br>max_connections &#x3D; 100<br>修改后，保存退出。重启一下MySQL数据库即可：</p>
<h1 id="x2F-etc-x2F-init-d-x2F-mysql-restart-1"><a href="#x2F-etc-x2F-init-d-x2F-mysql-restart-1" class="headerlink" title="&#x2F;etc&#x2F;init.d&#x2F;mysql restart"></a>&#x2F;etc&#x2F;init.d&#x2F;mysql restart</h1><p>特别提示：★★★★★</p>
<p>随着博客流量的日益增长，这些设置可能不再适合，需要不断调整，以达到最合理的方案。</p>
<p>那么，如何调整呢？</p>
<p>在这里，博主根据自己的实际经验，提供以下方法。同时，也建议你定期监测调整。</p>
<p>一、连接MySQL数据库：</p>
<h1 id="mysql-uroot-p"><a href="#mysql-uroot-p" class="headerlink" title="mysql -uroot -p"></a>mysql -uroot -p</h1><p>回车，输入数据库密码（root用户）。</p>
<p>出现提示符 mysql&gt; 后，即表示成功进入MySQL数据库中。</p>
<p>二、查看服务器响应的最大连接数（Max_used_connections）：</p>
<p>mysql&gt; show global status like ‘Max_used_connections’;</p>
<p>返回值中，Max_used_connections 表示服务器过去发生的最大连接数。</p>
<p>博主建议：</p>
<p>max_connections &#x2F; Max_used_connections &#x3D; 1.5</p>
<p>比值可以大一些，但太小的话可能出现 1040 错误：“MySQL: ERROR 1040: Too many connections”</p>
<p>三、查看key_buffer_size使用情况：</p>
<p>mysql&gt; show global status like ‘key_read%’;</p>
<p>得到返回值（单位：Byte），索引未命中缓存的概率：</p>
<p>key_cache_miss_rate ＝ Key_reads &#x2F; Key_read_requests * 100%</p>
<p>博主建议：</p>
<p>key_cache_miss_rate ＜ 0.1% 即可，表示1000个索引读取请求才有一个直接读硬盘；</p>
<p>如果比值过小（比如＜ 0.01%），则表示 key_buffer_size 分配的过多，可适当减少。</p>
<p>四、查询缓存（query cache）利用率：</p>
<p>mysql&gt; show global status like ‘qcache%’;</p>
<p>返回值中，Qcache_free_memory 表示缓存中的空闲内存（单位：Byte）</p>
<p>则查询缓存利用率：</p>
<p>x &#x3D; (query_cache_size - Qcache_free_memory) &#x2F; query_cache_size * 100%</p>
<p>博主建议：</p>
<p>查询缓存利用率 ＞80% 时，可适当提高 query_cache_size 数值；</p>
<p>查询缓存利用率 ＜20% 时，可适当降低 query_cache_size 数值。</p>
<p>五、退出MySQL数据库：</p>
<p>mysql&gt; exit</p>
<p>#13创建VPS快照<br>为了数据安全，一定要养成定期备份的好习惯。否则一旦有个闪失，可真的要一夜回到解放前了。</p>
<p>所幸，Vultr提供免费的VPS快照备份，可以通过一键恢复（restoring），无缝迁移系统到别的机子或者机房。实在是太方便了。</p>
<p>操作也很简单：打开VPS管理页面，点击 “Snapshots” ，方框内填入标签即可。</p>
<p>值得一提的是，Vultr的 Snapshots 恢复的时候有个小坑：备份恢复只能向等于或大于备份空间的机子进行操作。</p>
<p>也就是说，你在月付$5机子上可以一键恢复月付$2.5的机子上的备份。反之则不行，因为小空间没法恢复大空间。</p>
<p>所以，博主备份时的标签一般都注明套餐类型和日期，以便于管理。</p>
<p>如上图中：512MB-SEOIMO-2017-10-01</p>
<p>【温馨提示】搬瓦工VPS快照备份请参看：#4.2 + 如何购买搬瓦工VPS</p>
<p>#14WordPress博客的备份和迁移<br>网站备份的重要性就不需要博主多说了。在Linux系统下，对WordPress进行备份其实并不难。主要涉及两部分：文件备份和数据库备份</p>
<p>#14.1 文件备份<br>温馨提示：以下命令中涉及的数据库和域名，请根据你VPS上具体设置，自行修改。</p>
<p>为了方便管理，我们先建立一个文件夹专门存放备份数据，比如 &#x2F;home&#x2F;backup&#x2F; ：</p>
<h1 id="mkdir-x2F-home-x2F-backup"><a href="#mkdir-x2F-home-x2F-backup" class="headerlink" title="mkdir &#x2F;home&#x2F;backup"></a>mkdir &#x2F;home&#x2F;backup</h1><p>以本站所在文件夹 seoimo.com 为例，压缩整站并移动到 &#x2F;home&#x2F;backup&#x2F; 文件夹下（为方便管理，博主添加了备份日期）：</p>
<h1 id="cd-x2F-home-x2F-wwwroot"><a href="#cd-x2F-home-x2F-wwwroot" class="headerlink" title="cd &#x2F;home&#x2F;wwwroot"></a>cd &#x2F;home&#x2F;wwwroot</h1><h1 id="tar-zcf-seoimo-com-20171001-tar-gz-seoimo-com"><a href="#tar-zcf-seoimo-com-20171001-tar-gz-seoimo-com" class="headerlink" title="tar -zcf seoimo.com-20171001.tar.gz seoimo.com"></a>tar -zcf seoimo.com-20171001.tar.gz seoimo.com</h1><h1 id="mv-seoimo-com-20171001-tar-gz-x2F-home-x2F-backup-x2F"><a href="#mv-seoimo-com-20171001-tar-gz-x2F-home-x2F-backup-x2F" class="headerlink" title="mv seoimo.com-20171001.tar.gz &#x2F;home&#x2F;backup&#x2F;"></a>mv seoimo.com-20171001.tar.gz &#x2F;home&#x2F;backup&#x2F;</h1><p>好了，整站已经打包备份完成。接下来，开始备份数据库。</p>
<p>#14.2 数据库备份<br>首先，打开 &#x2F;home&#x2F;backup&#x2F; 文件夹，我们需要将数据库备份在这里：</p>
<h1 id="cd-x2F-home-x2F-backup"><a href="#cd-x2F-home-x2F-backup" class="headerlink" title="cd &#x2F;home&#x2F;backup"></a>cd &#x2F;home&#x2F;backup</h1><h1 id="lnmp-database-list"><a href="#lnmp-database-list" class="headerlink" title="lnmp database list"></a>lnmp database list</h1><p>输入 root 数据库密码（在#6 + 搭建LAMP环境设置的），即可查看当前数据库列表。</p>
<p>选择需要备份网站的对应数据库，以选定 sjk_seoimo 为例：</p>
<p>mysqldump -uroot -p sjk_seoimo &gt; sjk_seoimo-20171001.sql</p>
<p>再次输入数据库密码，即可完成数据库备份。</p>
<p>可键入命令 # ls 查看当前目录下已经存在了备份好的文件。</p>
<p>此时，可以用通过 FTP 下载到本地保存，也可上传到别的 VPS 上备份保存。</p>
<p>#14.3 WordPress迁移 &#x2F; 搬家<br>某些情况下，我们可能需要进行网站迁移，从一个VPS搬家到另一个VPS上。如果是没有开通 SSH 功能的虚拟主机，搬家起来可能会比较麻烦，来来回回的下载和上传。但是，在VPS上操作则相对简单的多。</p>
<p>假设新VPS的IP为 8.8.8.8，SSH端口为 22，则打开备份目录，选择需要的文件备份和数据库备份上传：</p>
<h1 id="cd-x2F-home-x2F-backup-1"><a href="#cd-x2F-home-x2F-backup-1" class="headerlink" title="cd &#x2F;home&#x2F;backup"></a>cd &#x2F;home&#x2F;backup</h1><h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1><h1 id="scp-P-22-seoimo-com-20171001-tar-gz-114-x6f-x6f-116-x40-56-46-56-46-56-46-56-x2F-home-x2F-backup"><a href="#scp-P-22-seoimo-com-20171001-tar-gz-114-x6f-x6f-116-x40-56-46-56-46-56-46-56-x2F-home-x2F-backup" class="headerlink" title="scp -P 22 seoimo.com-20171001.tar.gz &#114;&#x6f;&#x6f;&#116;&#x40;&#56;&#46;&#56;&#46;&#56;&#46;&#56;:&#x2F;home&#x2F;backup"></a>scp -P 22 seoimo.com-20171001.tar.gz <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#56;&#46;&#56;&#46;&#56;&#46;&#56;">&#114;&#x6f;&#x6f;&#116;&#x40;&#56;&#46;&#56;&#46;&#56;&#46;&#56;</a>:&#x2F;home&#x2F;backup</h1><h1 id="scp-P-22-sjk-seoimo-20171001-sql-x72-111-111-116-64-56-x2e-x38-46-56-x2e-x38-x2F-home-x2F-backup"><a href="#scp-P-22-sjk-seoimo-20171001-sql-x72-111-111-116-64-56-x2e-x38-46-56-x2e-x38-x2F-home-x2F-backup" class="headerlink" title="scp -P 22 sjk_seoimo-20171001.sql &#x72;&#111;&#111;&#116;&#64;&#56;&#x2e;&#x38;&#46;&#56;&#x2e;&#x38;:&#x2F;home&#x2F;backup"></a>scp -P 22 sjk_seoimo-20171001.sql <a href="mailto:&#x72;&#111;&#111;&#116;&#64;&#56;&#x2e;&#x38;&#46;&#56;&#x2e;&#x38;">&#x72;&#111;&#111;&#116;&#64;&#56;&#x2e;&#x38;&#46;&#56;&#x2e;&#x38;</a>:&#x2F;home&#x2F;backup</h1><p>回车后，按要求输入新的VPS登陆密码。</p>
<p>接下来，SSH登入新的VPS。然后解压或替换网站域名目录：</p>
<h1 id="cp-x2F-home-x2F-backup-x2F-seoimo-com-20171001-tar-gz-x2F-home-x2F-wwwroot"><a href="#cp-x2F-home-x2F-backup-x2F-seoimo-com-20171001-tar-gz-x2F-home-x2F-wwwroot" class="headerlink" title="cp &#x2F;home&#x2F;backup&#x2F;seoimo.com-20171001.tar.gz &#x2F;home&#x2F;wwwroot"></a>cp &#x2F;home&#x2F;backup&#x2F;seoimo.com-20171001.tar.gz &#x2F;home&#x2F;wwwroot</h1><h1 id="cd-x2F-home-x2F-wwwroot-1"><a href="#cd-x2F-home-x2F-wwwroot-1" class="headerlink" title="cd &#x2F;home&#x2F;wwwroot"></a>cd &#x2F;home&#x2F;wwwroot</h1><h1 id="tar-zxf-seoimo-com-20171001-tar-gz"><a href="#tar-zxf-seoimo-com-20171001-tar-gz" class="headerlink" title="tar -zxf seoimo.com-20171001.tar.gz"></a>tar -zxf seoimo.com-20171001.tar.gz</h1><h1 id="rm-rf-seoimo-com-20171001-tar-gz"><a href="#rm-rf-seoimo-com-20171001-tar-gz" class="headerlink" title="rm -rf seoimo.com-20171001.tar.gz"></a>rm -rf seoimo.com-20171001.tar.gz</h1><p>搬家后解压的文件可能存在权限的问题，建议赋予网站根目录文件的可写权限。</p>
<h1 id="chmod-R-755-x2F-home-x2F-wwwroot-x2F-seoimo-com"><a href="#chmod-R-755-x2F-home-x2F-wwwroot-x2F-seoimo-com" class="headerlink" title="chmod -R 755 &#x2F;home&#x2F;wwwroot&#x2F;seoimo.com"></a>chmod -R 755 &#x2F;home&#x2F;wwwroot&#x2F;seoimo.com</h1><h1 id="chown-R-www-x2F-home-x2F-wwwroot-x2F-seoimo-com"><a href="#chown-R-www-x2F-home-x2F-wwwroot-x2F-seoimo-com" class="headerlink" title="chown -R www &#x2F;home&#x2F;wwwroot&#x2F;seoimo.com"></a>chown -R www &#x2F;home&#x2F;wwwroot&#x2F;seoimo.com</h1><p>之后，导入数据库，仍以 sjk_seoimo 为例：</p>
<h1 id="cd-x2F-home-x2F-backup-2"><a href="#cd-x2F-home-x2F-backup-2" class="headerlink" title="cd &#x2F;home&#x2F;backup"></a>cd &#x2F;home&#x2F;backup</h1><h1 id="ls-1"><a href="#ls-1" class="headerlink" title="ls"></a>ls</h1><h1 id="mysql-uroot-p-sjk-seoimo-lt-sjk-seoimo-20171001-sql"><a href="#mysql-uroot-p-sjk-seoimo-lt-sjk-seoimo-20171001-sql" class="headerlink" title="mysql -uroot -p sjk_seoimo &lt; sjk_seoimo-20171001.sql"></a>mysql -uroot -p sjk_seoimo &lt; sjk_seoimo-20171001.sql</h1><p>倘若虚拟主机转虚拟主机，或者虚拟主机转VPS，数据库密码和某些插件文件路径可能不同，这就需要额外去查找更改了。</p>
<p>但如果都是在VPS上通过LNMP搭建WordPress，通常则无需再做额外操作。</p>
<p>注意：如果网站开启了 HTTPS 访问，且是安装的 Let’s Encrypt 提供的免费SSL证书，那么除了上面的操作之外，还需要使用命令 # lnmp ssl add 再重新添加SSL证书。</p>
<p>【温馨提示】数据库的导出用的符号是 “&gt;”，导入用的是 “&lt;”；注意方向，千万别搞错了。</p>
<p>#14.4 WordPress搬家脚本<br>使用此脚本前请务必提前做好备份（SnapShot），万一搬家出错，还有得恢复！！</p>
<p>如果你像博主一样，厌倦了每次搬家都要一遍一遍的执行压缩、传输、解压以及添加网站等操作，尤其是当VPS上有多个域名时。那么，这里有个高（偷）效（懒）的方法。</p>
<p>博主写了一个自动迁移WordPress的Shell脚本（WP-Migration），在你新的VPS执行就可以。但前提是你的新旧两个VPS系统最好一致，比如同为CentOS6.x或者CentOS7.x。否则，可能出现未知的问题（博主猜测）。</p>
<p>优点：不需要用lnmp命令提前添加好域名和数据库，全部从旧的VPS上直接复制。</p>
<p>博主水平有限，Linux勉强算是入门。故而把源码贴在下面，也希望有路过的大神能提点意见和建议。</p>
<p>脚本源码：</p>
<p>#!&#x2F;bin&#x2F;bash# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<h1 id="Name-WP-Migration-by-SEOIMO"><a href="#Name-WP-Migration-by-SEOIMO" class="headerlink" title="Name: WP-Migration by SEOIMO"></a>Name: WP-Migration by SEOIMO</h1><h1 id="Link-https-www-seoimo-com-wordpress-vps"><a href="#Link-https-www-seoimo-com-wordpress-vps" class="headerlink" title="Link: https://www.seoimo.com/wordpress-vps/"></a>Link: <a href="https://www.seoimo.com/wordpress-vps/">https://www.seoimo.com/wordpress-vps/</a></h1><h1 id="Date-2018-03-01"><a href="#Date-2018-03-01" class="headerlink" title="Date: 2018-03-01"></a>Date: 2018-03-01</h1><h1 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-记录程序起始时间"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-记录程序起始时间" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;# 记录程序起始时间"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;# 记录程序起始时间</h1><p>echo “[Starting time: <code>date +&#39;%Y-%m-%d %H:%M:%S&#39;</code>]”<br>time_start&#x3D;$(date +%s)</p>
<h1 id="停止lnmp"><a href="#停止lnmp" class="headerlink" title="停止lnmp"></a>停止lnmp</h1><p>lnmp stop</p>
<h1 id="输入旧的VPS地址和端口"><a href="#输入旧的VPS地址和端口" class="headerlink" title="输入旧的VPS地址和端口"></a>输入旧的VPS地址和端口</h1><p>read -p “Please enter your Old VPS IP (e.g. 58.58.58.58): “ old_vps_ip<br>read -p “Please enter your Old VPS SSH Port (e.g. 58585): “ old_ssh_port</p>
<h1 id="迁移旧的VPS上添加的-所有-网站-x2F-域名（形如：xxx-com）"><a href="#迁移旧的VPS上添加的-所有-网站-x2F-域名（形如：xxx-com）" class="headerlink" title="迁移旧的VPS上添加的[所有]网站&#x2F;域名（形如：xxx.com）"></a>迁移旧的VPS上添加的[所有]网站&#x2F;域名（形如：xxx.com）</h1><p>echo -e “\033[32;49;1m[#1 Copy the WWWROOT files from your Old VPS now.]\033[39;49;0m”<br>scp -P $old_ssh_port -rC root@$old_vps_ip:&#x2F;home&#x2F;wwwroot&#x2F;*.com &#x2F;home&#x2F;wwwroot&#x2F;</p>
<h1 id="更改网站权限"><a href="#更改网站权限" class="headerlink" title="更改网站权限"></a>更改网站权限</h1><p>chmod -R 755 &#x2F;home&#x2F;wwwroot<br>chown -R www &#x2F;home&#x2F;wwwroot</p>
<h1 id="迁移旧的VPS上添加的-所有-网站的数据库（先备份本机数据库）"><a href="#迁移旧的VPS上添加的-所有-网站的数据库（先备份本机数据库）" class="headerlink" title="迁移旧的VPS上添加的[所有]网站的数据库（先备份本机数据库）"></a>迁移旧的VPS上添加的[所有]网站的数据库（先备份本机数据库）</h1><p>echo -e “\033[32;49;1m[#2 Copy the DATABASE files from your Old VPS now.]\033[39;49;0m”<br>cp -r &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;var &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;var.old<br>scp -P $old_ssh_port -rC root@$old_vps_ip:&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;var&#x2F; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;</p>
<h1 id="更改数据库权限"><a href="#更改数据库权限" class="headerlink" title="更改数据库权限"></a>更改数据库权限</h1><p>chown -R mysql:mysql &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;var</p>
<h1 id="迁移旧的VPS上Apache中绑定的-所有-域名设置（先备份本机域名设置）"><a href="#迁移旧的VPS上Apache中绑定的-所有-域名设置（先备份本机域名设置）" class="headerlink" title="迁移旧的VPS上Apache中绑定的[所有]域名设置（先备份本机域名设置）"></a>迁移旧的VPS上Apache中绑定的[所有]域名设置（先备份本机域名设置）</h1><p>echo -e “\033[32;49;1m[#3 Copy the HTTPD files from your Old VPS now.]\033[39;49;0m”<br>cp -r &#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf &#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf.old<br>scp -P $old_ssh_port -rC root@$old_vps_ip:&#x2F;usr&#x2F;local&#x2F;apache&#x2F;conf&#x2F; &#x2F;usr&#x2F;local&#x2F;apache&#x2F;</p>
<h1 id="旧的VPS上网站是否启用了Let’s-Encrypt免费的SSL证书"><a href="#旧的VPS上网站是否启用了Let’s-Encrypt免费的SSL证书" class="headerlink" title="旧的VPS上网站是否启用了Let’s Encrypt免费的SSL证书"></a>旧的VPS上网站是否启用了Let’s Encrypt免费的SSL证书</h1><p>echo -e “\033[32;49;1m[#4 Copy the Let’s Encrypt files from your Old VPS now.]\033[39;49;0m”<br>read -p “Did you set up the Let’s Encrypt SSL in your Old VPS before? (yes or no): “ letsencrypt<br>if [ “$letsencrypt” &#x3D; “yes” ] || [ “$letsencrypt” &#x3D; “y” ]; then<br>scp -P $old_ssh_port -rC root@$old_vps_ip:&#x2F;etc&#x2F;letsencrypt &#x2F;etc&#x2F;<br>else<br>echo “[Skipping.]”<br>fi</p>
<h1 id="重启lnmp"><a href="#重启lnmp" class="headerlink" title="重启lnmp"></a>重启lnmp</h1><p>lnmp start</p>
<h1 id="计算程序耗时并输出"><a href="#计算程序耗时并输出" class="headerlink" title="计算程序耗时并输出"></a>计算程序耗时并输出</h1><p>echo “[End time: <code>date +&#39;%Y-%m-%d %H:%M:%S&#39;</code>]”<br>time_end&#x3D;$(date +%s)<br>echo -e “\033[32;49;1m[Successfully done! Command takes $((time_end-time_start)) seconds.]\033[39;49;0m”</p>
<h1 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h1><p>exit 0</p>
<p>使用方法：</p>
<p>在你新的VPS上依次执行以下命令：</p>
<h1 id="cd-amp-amp-wget-https-www-seoimo-com-wp-content-shells-wp-migration-sh"><a href="#cd-amp-amp-wget-https-www-seoimo-com-wp-content-shells-wp-migration-sh" class="headerlink" title="cd ~ &amp;&amp; wget https://www.seoimo.com/wp-content/shells/wp-migration.sh"></a>cd ~ &amp;&amp; wget <a href="https://www.seoimo.com/wp-content/shells/wp-migration.sh">https://www.seoimo.com/wp-content/shells/wp-migration.sh</a></h1><h1 id="chmod-x-wp-migration-sh-amp-amp-x2F-wp-migration-sh"><a href="#chmod-x-wp-migration-sh-amp-amp-x2F-wp-migration-sh" class="headerlink" title="chmod +x wp-migration.sh &amp;&amp; .&#x2F;wp-migration.sh"></a>chmod +x wp-migration.sh &amp;&amp; .&#x2F;wp-migration.sh</h1><p>脚本执行期间需要输入3-4次旧VPS的SSH访问密码，建议提前写好。用时直接复制粘贴，免得出错。</p>
<p>脚本执行完成，显示如下字样，说明WordPress迁移成功。否则，本脚本可能在你的系统上无法正常使用，建议按前面的常规方法搬家。</p>
<p>Starting LAMP…<br>start apache… done<br>Starting MySQL SUCCESS!<br>[Successfully done! Command takes 105 seconds.]<br>关于SSL证书的说明如果在旧的VPS上已经安装了免费的 Let’s Encrypt 证书，但新的VPS上从未安装过（包括为其他域名），那么搬家之后，建议在新的VPS上按照如下命令添加证书，以便安装相关依赖。</p>
<h1 id="lnmp-ssl-add"><a href="#lnmp-ssl-add" class="headerlink" title="lnmp ssl add"></a>lnmp ssl add</h1><p>但是，倘若旧的VPS上已经为网站添加了证书，且新的VPS上也成功安装过 Let’s Encrypt 证书（包括为其他域名），即系统上已经安装了相关依赖。</p>
<p>那么，搬家之后，证书通常不会出现问题，但自动续期时可能会显示如下错误：</p>
<p>expected &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;seoimo.com&#x2F;cert.pem to be a symlink<br>Renewal configuration file &#x2F;etc&#x2F;letsencrypt&#x2F;renewal&#x2F;seoimo.com.conf is broken. Skipping.<br>这是因为在复制过程中，相关软链接（类似于快捷方式）会出现问题。因此，需要重建一下 cert 相关软链接：</p>
<h1 id="cd-amp-amp-wget-https-www-seoimo-com-wp-content-shells-cert-symlink-sh"><a href="#cd-amp-amp-wget-https-www-seoimo-com-wp-content-shells-cert-symlink-sh" class="headerlink" title="cd ~ &amp;&amp; wget https://www.seoimo.com/wp-content/shells/cert-symlink.sh"></a>cd ~ &amp;&amp; wget <a href="https://www.seoimo.com/wp-content/shells/cert-symlink.sh">https://www.seoimo.com/wp-content/shells/cert-symlink.sh</a></h1><h1 id="chmod-x-cert-symlink-sh-amp-amp-x2F-cert-symlink-sh"><a href="#chmod-x-cert-symlink-sh-amp-amp-x2F-cert-symlink-sh" class="headerlink" title="chmod +x cert-symlink.sh &amp;&amp; .&#x2F;cert-symlink.sh"></a>chmod +x cert-symlink.sh &amp;&amp; .&#x2F;cert-symlink.sh</h1><p>显示提示后，输入已安装 Let’s Encrypt 证书的域名即可。</p>
<p>脚本执行完成后，再试着手动更新下证书，看看是否可以正常续期：</p>
<h1 id="x2F-bin-x2F-certbot-renew-–renew-by-default-–disable-hook-validation-–renew-hook-“-x2F-etc-x2F-init-d-x2F-httpd-restart”"><a href="#x2F-bin-x2F-certbot-renew-–renew-by-default-–disable-hook-validation-–renew-hook-“-x2F-etc-x2F-init-d-x2F-httpd-restart”" class="headerlink" title="&#x2F;bin&#x2F;certbot renew –renew-by-default –disable-hook-validation –renew-hook “&#x2F;etc&#x2F;init.d&#x2F;httpd restart”"></a>&#x2F;bin&#x2F;certbot renew –renew-by-default –disable-hook-validation –renew-hook “&#x2F;etc&#x2F;init.d&#x2F;httpd restart”</h1><p>如仍提示续期失败，你可能需要手动重新安装证书：# lnmp ssl add</p>
<p>附上 cert-symlink.sh 脚本源码如下：</p>
<p>#!&#x2F;bin&#x2F;bash# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<h1 id="Name-Cert-Symlink-by-SEOIMO"><a href="#Name-Cert-Symlink-by-SEOIMO" class="headerlink" title="Name: Cert-Symlink by SEOIMO"></a>Name: Cert-Symlink by SEOIMO</h1><h1 id="Link-https-www-seoimo-com-wordpress-vps-1"><a href="#Link-https-www-seoimo-com-wordpress-vps-1" class="headerlink" title="Link: https://www.seoimo.com/wordpress-vps/"></a>Link: <a href="https://www.seoimo.com/wordpress-vps/">https://www.seoimo.com/wordpress-vps/</a></h1><h1 id="Date-2018-03-01-1"><a href="#Date-2018-03-01-1" class="headerlink" title="Date: 2018-03-01"></a>Date: 2018-03-01</h1><h1 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-记录程序起始时间-1"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-记录程序起始时间-1" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;# 记录程序起始时间"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;# 记录程序起始时间</h1><p>echo “[Starting time: <code>date +&#39;%Y-%m-%d %H:%M:%S&#39;</code>]”<br>time_start&#x3D;$(date +%s)</p>
<h1 id="输入重建Symlink链接的网站-x2F-域名（形如：xxx-com）"><a href="#输入重建Symlink链接的网站-x2F-域名（形如：xxx-com）" class="headerlink" title="输入重建Symlink链接的网站&#x2F;域名（形如：xxx.com）"></a>输入重建Symlink链接的网站&#x2F;域名（形如：xxx.com）</h1><p>read -p “Please enter your SSL domain (e.g. xxx.com): “ cert_domain</p>
<h1 id="重建Symlink链接"><a href="#重建Symlink链接" class="headerlink" title="重建Symlink链接"></a>重建Symlink链接</h1><p>rm -rf &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;$cert_domain&#x2F;*.pem<br>ln -s &#x2F;etc&#x2F;letsencrypt&#x2F;archive&#x2F;$cert_domain&#x2F;fullchain1.pem &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;$cert_domain&#x2F;fullchain.pem<br>ln -s &#x2F;etc&#x2F;letsencrypt&#x2F;archive&#x2F;$cert_domain&#x2F;cert1.pem &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;$cert_domain&#x2F;cert.pem<br>ln -s &#x2F;etc&#x2F;letsencrypt&#x2F;archive&#x2F;$cert_domain&#x2F;chain1.pem &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;$cert_domain&#x2F;chain.pem<br>ln -s &#x2F;etc&#x2F;letsencrypt&#x2F;archive&#x2F;$cert_domain&#x2F;privkey1.pem &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;$cert_domain&#x2F;privkey.pem</p>
<h1 id="计算程序耗时并输出-1"><a href="#计算程序耗时并输出-1" class="headerlink" title="计算程序耗时并输出"></a>计算程序耗时并输出</h1><p>echo “[End time: <code>date +&#39;%Y-%m-%d %H:%M:%S&#39;</code>]”<br>time_end&#x3D;$(date +%s)<br>echo -e “\033[32;49;1m[Successfully done! Command takes $((time_end-time_start)) seconds.]\033[39;49;0m”</p>
<h1 id="退出-1"><a href="#退出-1" class="headerlink" title="退出"></a>退出</h1><p>exit 0</p>
<p>#14.5 备份小技巧<br>上文提到过，备份后的文件可以通过 FTP 软件下载到本地保存，也可以通过 SCP 命令上传到其他VPS上备份。</p>
<p>那么，哪个方法更好呢？</p>
<p>看个人喜好了。不过博主倾向于后者，即 scp 到其他VPS上备份保存。因为一旦你的网站出现问题，重新开VPS和从本地上传的话，一般只有几十到几百KB&#x2F;s的上传速度，比较慢。而VPS之间的 scp 传速则快得多，通常几十MB&#x2F;s的速度，简直天壤之别。</p>
<p>那是不是意味着需要额外单独买个VPS作为备份？</p>
<p>条件允许当然更好。但是，也不一定需要。因为Vultr自带免费的 “Snapshots” 功能。</p>
<p>虽然搬瓦工（和Vultr）很不错，但鸡蛋都放在一个篮子里总是不够安全的。博主的做法是：</p>
<p>在Vultr上另开一个机子（比如最便宜的月付$2.5），然后按本文教程搭建好本站一毛一样的站点。然后 “Snapshots”，之后把新开的VPS销毁。这样一来，即使不再新开VPS，后台依然保留备份的 “Snapshots” 。</p>
<p>博主需要做的就是定期花几毛钱重开VPS（每月1-2次），恢复（Restoring），然后把备份上传过来，再重新 “Snapshots” 后销毁。</p>
<p>这样，一旦由于某些原因本站甚至搬瓦工出了问题，博客也可以在Vultr上很快恢复访问。</p>
<p>Snapshots-Restoring的具体步骤：</p>
<p>登录Vultr → 左侧Servers → 选中VPS → 上面Snapshot → 右下Restore-Snapshot</p>
<p>#15写在最后<br>到这里，关于在月付2.5美元（甚至更少）的便宜VPS上搭建LAMP环境，进而安装WordPress建站并进行主要的优化配置已全部完成。是不是突然觉得豁然开朗？</p>
<p>当然，在搭建完博客后，你也可以开启 HTTPS 访问。这不仅仅是为了跟风装13，其对关键词排名也确有一定的帮助。</p>
<p>博客安装免费SSL证书：<a href="https://www.seoimo.com/lamp-ssl/">https://www.seoimo.com/lamp-ssl/</a><br>其实，把网站安装成功只是万里长征开始的第一步，后面还要涉及WordPress内部的优化和加速、博客的内容建设、运营管理、安全防护等等，这在以后的文章中会继续和大家分享。</p>
<p>博主以为，一个优秀的博客，就像小树苗一样，需要博主长期精心的培育和维护，才能最终长成参天大树。</p>
<p>不过，千万要记得：一定要养成定期备份的好习惯！</p>
<p>非原创，原文链接<a href="https://www.seoimo.com/wordpress-vps/">https://www.seoimo.com/wordpress-vps/</a></p>
]]></content>
      <categories>
        <category>vps</category>
      </categories>
      <tags>
        <tag>vps</tag>
        <tag>博客</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>解决qnap重启后自动清理系统文件的问题</title>
    <url>/xmp-blog/2023/03/30/%E8%A7%A3%E5%86%B3qnap%E9%87%8D%E5%90%AF%E5%90%8E%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="解决qnap重启后自动清理系统文件的问题"><a href="#解决qnap重启后自动清理系统文件的问题" class="headerlink" title="解决qnap重启后自动清理系统文件的问题"></a>解决qnap重启后自动清理系统文件的问题</h1><p>威联通系统在重启后会自动清除系统文件，导致某些应用的配置失效，尝试了修改用户目录下.bashrc或者&#x2F;etc&#x2F;profie文件，都不行。查询官方论坛找到了解决办法，基本思路就是将无法持久化的系统配置文件复制到可以持久化的文件里面，再用软连接的方式将系统文件指向可持久化的文件,将软连接脚本设置成随系统启动执行。</p>
<span id="more"></span>
<p>例如安装mailx:</p>
<p>1.将标准配置文件复制到一个持久位置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/profile /etc/config/</span><br><span class="line"><span class="built_in">cp</span> /etc/.mailrc /etc/config/</span><br></pre></td></tr></table></figure>

<p>2.将mailx环境变量追加到配置里:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export MAILRC=/etc/.mailrc&quot;</span> &gt;&gt; /etc/config/profile</span><br></pre></td></tr></table></figure>

<p>3.将需要的mailx配置加到.mailrc中:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;set sendmail=&quot;</span>/opt/bin/msmtp<span class="string">&quot;&quot;</span> &gt;&gt; /etc/config/.mailrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;set sendcharsets=utf-8&quot;</span> &gt;&gt; /etc/config/.mailrc</span><br></pre></td></tr></table></figure>

<p>4.接下来需要在系统启动的时候执行下面的脚本:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -fs /etc/config/profile /etc/profile</span><br><span class="line"><span class="built_in">ln</span> -fs /etc/config/.mailrc /etc/.mailrc</span><br></pre></td></tr></table></figure>

<p>可以参考官方wiki</p>
<p>[]: <a href="https://wiki.qnap.com/wiki/Running_Your_Own_Application_at_Startup">https://wiki.qnap.com/wiki/Running_Your_Own_Application_at_Startup</a></p>
<p>我的是x86_64的Intel平台，使用的是下面的方法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount $(/sbin/hal_app --get_boot_pd port_id=0)6 /tmp/config</span><br><span class="line"><span class="built_in">touch</span> /tmp/config/autorun.sh</span><br><span class="line"><span class="built_in">chmod</span> +x /tmp/config/autorun.sh</span><br><span class="line"><span class="comment">##将需要执行的脚本放在这里，例如上面的执行ln命令的脚本，这样就不会怕重启后清理系统文件了</span></span><br><span class="line"><span class="variable">$EDITOR</span> /tmp/config/autorun.sh</span><br><span class="line">umount /tmp/config</span><br></pre></td></tr></table></figure>

<p>完成autorun.sh后，需要在威联通系统的控制面板里面启用允许在系统启动时运行autorun.sh的选项。</p>
<img src="/xmp-blog/2023/03/30/%E8%A7%A3%E5%86%B3qnap%E9%87%8D%E5%90%AF%E5%90%8E%E8%87%AA%E5%8A%A8%E6%B8%85%E7%90%86%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/AllowAutorun2.png" class="" title="AllowAutorun2">]]></content>
      <categories>
        <category>nas</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>nas</tag>
        <tag>qnap</tag>
        <tag>威联通</tag>
      </tags>
  </entry>
</search>
